{"version":3,"file":"dj.js","sources":["../src/music/theory/MusicTheoryConstants.ts","../src/io/jmon/conversion.ts","../src/music/theory/Scale.ts","../src/music/theory/Progression.ts","../src/music/harmony/Voice.ts","../src/music/harmony/Ornament.ts","../src/music/rhythm/Rhythm.ts","../src/music/rhythm/AdvancedRhythm.ts","../src/music/motifs/MotifBank.ts","../src/utils/matrix.ts","../src/algorithms/gaussian-processes/GaussianProcessRegressor.ts","../src/algorithms/gaussian-processes/kernels/base.ts","../src/algorithms/gaussian-processes/kernels/rbf.ts","../src/algorithms/gaussian-processes/utils.ts","../src/algorithms/gaussian-processes/Kernel.ts","../src/algorithms/gaussian-processes/kernels/rational-quadratic.ts","../src/algorithms/gaussian-processes/kernels/periodic.ts","../src/algorithms/cellular-automata/CellularAutomata.ts","../src/algorithms/polyloops/Polyloop.ts","../src/analysis/MusicalAnalysis.ts","../src/algorithms/genetic/GeneticAlgorithm.ts","../src/algorithms/walks/RandomWalk.ts","../src/algorithms/fractals/Mandelbrot.ts","../src/algorithms/fractals/LogisticMap.ts","../src/algorithms/minimalism/MinimalismProcess.ts","../src/utils/music.ts"],"sourcesContent":["import { ChromaticNote, ScaleMode, Interval } from '../../types/music';\n\nexport class MusicTheoryConstants {\n  public static readonly chromaticScale: ChromaticNote[] = [\n    'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'\n  ];\n\n  public static readonly intervals: Record<Interval, number> = {\n    unison: 0,\n    minor2nd: 1,\n    major2nd: 2,\n    minor3rd: 3,\n    major3rd: 4,\n    perfect4th: 5,\n    tritone: 6,\n    perfect5th: 7,\n    minor6th: 8,\n    major6th: 9,\n    minor7th: 10,\n    major7th: 11,\n    octave: 12,\n  };\n\n  public static readonly scaleIntervals: Record<ScaleMode, number[]> = {\n    major: [0, 2, 4, 5, 7, 9, 11],\n    minor: [0, 2, 3, 5, 7, 8, 10],\n    dorian: [0, 2, 3, 5, 7, 9, 10],\n    phrygian: [0, 1, 3, 5, 7, 8, 10],\n    lydian: [0, 2, 4, 6, 7, 9, 11],\n    mixolydian: [0, 2, 4, 5, 7, 9, 10],\n    locrian: [0, 1, 3, 5, 6, 8, 10],\n  };\n\n  public static convertFlatToSharp(note: string): ChromaticNote {\n    const flatToSharp: Record<string, ChromaticNote> = {\n      'Db': 'C#',\n      'Eb': 'D#',\n      'Gb': 'F#',\n      'Ab': 'G#',\n      'Bb': 'A#',\n    };\n\n    return flatToSharp[note] || (note as ChromaticNote);\n  }\n\n  public static scaleToTriad(mode: ScaleMode): number[] {\n    const intervals = this.scaleIntervals[mode];\n    return [intervals[0]!, intervals[2]!, intervals[4]!]; // 1st, 3rd, 5th degrees\n  }\n\n  public static getChromaticIndex(note: ChromaticNote): number {\n    return this.chromaticScale.indexOf(note);\n  }\n\n  public static getNoteFromIndex(index: number): ChromaticNote {\n    const normalizedIndex = ((index % 12) + 12) % 12;\n    return this.chromaticScale[normalizedIndex]!;\n  }\n\n  public static transposeNote(note: ChromaticNote, semitones: number): ChromaticNote {\n    const currentIndex = this.getChromaticIndex(note);\n    const newIndex = currentIndex + semitones;\n    return this.getNoteFromIndex(newIndex);\n  }\n\n  public static getInterval(note1: ChromaticNote, note2: ChromaticNote): number {\n    const index1 = this.getChromaticIndex(note1);\n    const index2 = this.getChromaticIndex(note2);\n    return ((index2 - index1) + 12) % 12;\n  }\n}","import { Note, Sequence, Pitch, Duration } from '../../types/common';\nimport { RhythmPattern } from '../../types/music';\nimport { \n  JMonNote, \n  JMonSequence, \n  JMonComposition, \n  BasicJMonComposition,\n  MusicalTime,\n  NoteDuration,\n  AudioNode\n} from '../../types/jmon';\n\nexport class JMonConverter {\n  \n  /**\n   * Convert a numeric time (in beats) to JMON bars:beats:ticks format\n   * Assumes 4/4 time signature and 480 ticks per beat\n   */\n  public static timeToMusicalTime(time: number, timeSignature: [number, number] = [4, 4]): MusicalTime {\n    const [beatsPerBar] = timeSignature;\n    const ticksPerBeat = 480; // Standard MIDI resolution\n    \n    const bars = Math.floor(time / beatsPerBar);\n    const beats = Math.floor(time % beatsPerBar);\n    const ticks = Math.round((time % 1) * ticksPerBeat);\n    \n    return `${bars}:${beats}:${ticks}`;\n  }\n\n  /**\n   * Convert a duration in beats to note value format\n   */\n  public static durationToNoteValue(duration: Duration): NoteDuration {\n    // Common duration mappings (assuming 4/4 time)\n    const durationsMap: Record<number, string> = {\n      4: '1n',    // whole note\n      3: '2n.',   // dotted half\n      2: '2n',    // half note\n      1.5: '4n.', // dotted quarter\n      1: '4n',    // quarter note\n      0.75: '8n.', // dotted eighth\n      0.5: '8n',   // eighth note\n      0.25: '16n', // sixteenth note\n      0.125: '32n', // thirty-second note\n    };\n\n    // Find closest match\n    const closest = Object.keys(durationsMap)\n      .map(Number)\n      .reduce((prev, curr) => \n        Math.abs(curr - duration) < Math.abs(prev - duration) ? curr : prev\n      );\n\n    return durationsMap[closest] || `${duration}n`;\n  }\n\n  /**\n   * Convert a simple Note to JMonNote\n   */\n  public static noteToJMonNote(note: Note, timeSignature: [number, number] = [4, 4]): JMonNote {\n    return {\n      note: note.pitch,\n      time: note.time !== undefined ? this.timeToMusicalTime(note.time, timeSignature) : '0:0:0',\n      duration: this.durationToNoteValue(note.duration),\n      velocity: note.velocity || 0.8,\n    };\n  }\n\n  /**\n   * Convert a Sequence to JMonSequence\n   */\n  public static sequenceToJMonSequence(\n    sequence: Sequence, \n    label: string = 'Generated Sequence',\n    timeSignature: [number, number] = [4, 4]\n  ): JMonSequence {\n    return {\n      label,\n      notes: sequence.notes.map(note => this.noteToJMonNote(note, timeSignature)),\n      synth: {\n        type: 'Synth',\n        options: {\n          oscillator: { type: 'triangle' },\n          envelope: { attack: 0.02, decay: 0.1, sustain: 0.3, release: 1 }\n        }\n      }\n    };\n  }\n\n  /**\n   * Convert a RhythmPattern to JMonSequence\n   */\n  public static rhythmPatternToJMonSequence(\n    pattern: RhythmPattern,\n    pitches: Pitch[] = [60], // Default to middle C\n    label: string = 'Rhythm Pattern'\n  ): JMonSequence {\n    const notes: JMonNote[] = [];\n    let currentTime = 0;\n    \n    pattern.durations.forEach((duration, index) => {\n      const pitch = pitches[index % pitches.length] || 60;\n      const isAccented = pattern.accents?.[index] || false;\n      \n      if (duration > 0) { // Only add notes for non-zero durations\n        notes.push({\n          note: pitch,\n          time: this.timeToMusicalTime(currentTime),\n          duration: this.durationToNoteValue(duration),\n          velocity: isAccented ? 0.9 : 0.7,\n        });\n      }\n      \n      currentTime += duration;\n    });\n\n    return {\n      label,\n      notes,\n      synth: {\n        type: 'Synth',\n        options: {\n          oscillator: { type: 'sawtooth' },\n          envelope: { attack: 0.01, decay: 0.1, sustain: 0.5, release: 0.3 }\n        }\n      }\n    };\n  }\n\n  /**\n   * Create a basic JMON composition from sequences\n   */\n  public static createBasicComposition(\n    sequences: JMonSequence[],\n    bpm: number = 120,\n    metadata?: { name?: string; author?: string; description?: string }\n  ): BasicJMonComposition {\n    return {\n      format: 'jmonTone',\n      version: '1.0',\n      bpm,\n      audioGraph: [\n        {\n          id: 'master',\n          type: 'Destination',\n          options: {}\n        }\n      ],\n      connections: [], // Direct to master for now\n      sequences,\n      ...(metadata && { metadata })\n    };\n  }\n\n  /**\n   * Create a complete JMON composition with effects\n   */\n  public static createComposition(\n    sequences: JMonSequence[],\n    options: {\n      bpm?: number;\n      keySignature?: string;\n      timeSignature?: string;\n      effects?: Array<{ type: string; options: Record<string, any> }>;\n      metadata?: { name?: string; author?: string; description?: string };\n    } = {}\n  ): JMonComposition {\n    const {\n      bpm = 120,\n      keySignature = 'C',\n      timeSignature = '4/4',\n      effects = [],\n      metadata\n    } = options;\n\n    const audioGraph: AudioNode[] = [\n      {\n        id: 'master',\n        type: 'Destination',\n        options: {}\n      }\n    ];\n\n    const connections: [string, string][] = [];\n\n    // Add global effects\n    effects.forEach((effect, index) => {\n      const effectId = `effect${index}`;\n      audioGraph.push({\n        id: effectId,\n        type: effect.type as any,\n        options: effect.options\n      });\n      connections.push([effectId, 'master']);\n    });\n\n    return {\n      format: 'jmonTone',\n      version: '1.0',\n      bpm,\n      keySignature,\n      timeSignature,\n      audioGraph,\n      connections,\n      sequences,\n      ...(metadata && { metadata })\n    };\n  }\n\n  /**\n   * Convert MIDI note number to note name\n   */\n  public static midiToNoteName(midiNote: number): string {\n    const notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const octave = Math.floor(midiNote / 12) - 1;\n    const noteIndex = midiNote % 12;\n    return `${notes[noteIndex]}${octave}`;\n  }\n\n  /**\n   * Convert note name to MIDI note number\n   */\n  public static noteNameToMidi(noteName: string): number {\n    const noteRegex = /^([A-G])(#|b)?(-?\\d+)$/;\n    const match = noteName.match(noteRegex);\n    \n    if (!match) {\n      throw new Error(`Invalid note name: ${noteName}`);\n    }\n\n    const [, note, accidental, octaveStr] = match;\n    if (!note || !octaveStr) {\n      throw new Error(`Invalid note name: ${noteName}`);\n    }\n    const octave = parseInt(octaveStr, 10);\n    \n    const noteValues: Record<string, number> = {\n      'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11\n    };\n    \n    let midiNote = noteValues[note]! + (octave + 1) * 12;\n    \n    if (accidental === '#') {\n      midiNote += 1;\n    } else if (accidental === 'b') {\n      midiNote -= 1;\n    }\n    \n    return midiNote;\n  }\n\n  /**\n   * Convert a musical time string back to numeric time\n   */\n  public static musicalTimeToTime(musicalTime: MusicalTime, timeSignature: [number, number] = [4, 4]): number {\n    const [beatsPerBar] = timeSignature;\n    const ticksPerBeat = 480;\n    \n    const parts = musicalTime.split(':');\n    if (parts.length !== 3) {\n      throw new Error(`Invalid musical time format: ${musicalTime}`);\n    }\n    \n    const bars = parseInt(parts[0]!, 10);\n    const beats = parseFloat(parts[1]!);\n    const ticks = parseInt(parts[2]!, 10);\n    \n    return bars * beatsPerBar + beats + (ticks / ticksPerBeat);\n  }\n\n  /**\n   * Validate JMON composition\n   */\n  public static validateComposition(composition: JMonComposition): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n    \n    if (composition.format !== 'jmonTone') {\n      errors.push('Format must be \"jmonTone\"');\n    }\n    \n    if (composition.bpm < 20 || composition.bpm > 400) {\n      errors.push('BPM must be between 20 and 400');\n    }\n    \n    if (!composition.sequences || composition.sequences.length === 0) {\n      errors.push('At least one sequence is required');\n    }\n    \n    composition.sequences.forEach((seq, index) => {\n      if (!seq.label) {\n        errors.push(`Sequence ${index} missing label`);\n      }\n      \n      if (!seq.notes || seq.notes.length === 0) {\n        errors.push(`Sequence ${index} has no notes`);\n      }\n    });\n    \n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n}","import { ChromaticNote, ScaleMode, MusicalScale } from '../../types/music';\nimport { Pitch } from '../../types/common';\nimport { MusicTheoryConstants } from './MusicTheoryConstants';\nimport { JMonSequence, JMonNote } from '../../types/jmon';\nimport { JMonConverter } from '../../io/jmon/conversion';\n\nexport class Scale {\n  public readonly tonic: ChromaticNote;\n  public readonly mode: ScaleMode;\n\n  constructor(tonic: ChromaticNote, mode: ScaleMode) {\n    this.tonic = tonic;\n    this.mode = mode;\n  }\n\n  public generate(octave = 4, length?: number): Pitch[] {\n    const intervals = MusicTheoryConstants.scaleIntervals[this.mode];\n    const tonicIndex = MusicTheoryConstants.getChromaticIndex(this.tonic);\n    \n    const basePitches = intervals.map(interval => {\n      const noteIndex = (tonicIndex + interval) % 12;\n      return 60 + (octave - 4) * 12 + noteIndex; // MIDI note number\n    });\n\n    if (length === undefined) {\n      return basePitches;\n    }\n\n    const result: Pitch[] = [];\n    let currentOctave = octave;\n    \n    for (let i = 0; i < length; i++) {\n      const scaleIndex = i % intervals.length;\n      if (scaleIndex === 0 && i > 0) {\n        currentOctave++;\n      }\n      \n      const interval = intervals[scaleIndex]!;\n      const noteIndex = (tonicIndex + interval) % 12;\n      const pitch = 60 + (currentOctave - 4) * 12 + noteIndex;\n      result.push(pitch);\n    }\n\n    return result;\n  }\n\n  public getMusicalScale(): MusicalScale {\n    const pitches = this.generate();\n    return {\n      tonic: this.tonic,\n      mode: this.mode,\n      pitches,\n    };\n  }\n\n  public getDegree(degree: number, octave = 4): Pitch {\n    const intervals = MusicTheoryConstants.scaleIntervals[this.mode];\n    const normalizedDegree = ((degree - 1) % intervals.length);\n    const octaveOffset = Math.floor((degree - 1) / intervals.length);\n    \n    const interval = intervals[normalizedDegree]!;\n    const tonicIndex = MusicTheoryConstants.getChromaticIndex(this.tonic);\n    const noteIndex = (tonicIndex + interval) % 12;\n    \n    return 60 + (octave + octaveOffset - 4) * 12 + noteIndex;\n  }\n\n  public getNoteNames(): ChromaticNote[] {\n    const intervals = MusicTheoryConstants.scaleIntervals[this.mode];\n    const tonicIndex = MusicTheoryConstants.getChromaticIndex(this.tonic);\n    \n    return intervals.map(interval => {\n      const noteIndex = (tonicIndex + interval) % 12;\n      return MusicTheoryConstants.chromaticScale[noteIndex]!;\n    });\n  }\n\n  public isInScale(pitch: Pitch): boolean {\n    const pitchClass = pitch % 12;\n    const scalePitches = this.generate().map(p => p % 12);\n    return scalePitches.includes(pitchClass);\n  }\n\n  /**\n   * Get the scale degrees as MIDI note numbers\n   * Returns the pitches of the scale in the default octave\n   */\n  public getScaleDegrees(octave: number = 4): Pitch[] {\n    return this.generate(octave);\n  }\n\n  public getClosestScalePitch(pitch: Pitch): Pitch {\n    const scalePitches = this.generate(Math.floor(pitch / 12), 8); // Generate enough pitches\n    \n    let closest = scalePitches[0]!;\n    let minDistance = Math.abs(pitch - closest);\n    \n    for (const scalePitch of scalePitches) {\n      const distance = Math.abs(pitch - scalePitch);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closest = scalePitch;\n      }\n    }\n    \n    return closest;\n  }\n\n  public toJMonSequence(\n    options: {\n      length?: number;\n      octave?: number;\n      duration?: string;\n      velocity?: number;\n      label?: string;\n    } = {}\n  ): JMonSequence {\n    const {\n      length = 8,\n      octave = 4,\n      duration = '4n',\n      velocity = 0.8,\n      label = `${this.tonic} ${this.mode} scale`\n    } = options;\n\n    const pitches = this.generate(octave, length);\n    const notes: JMonNote[] = pitches.map((pitch, index) => ({\n      note: JMonConverter.midiToNoteName(pitch),\n      time: JMonConverter.timeToMusicalTime(index),\n      duration,\n      velocity\n    }));\n\n    return {\n      label,\n      notes,\n      synth: {\n        type: 'Synth',\n        options: {\n          oscillator: { type: 'sine' },\n          envelope: { attack: 0.02, decay: 0.1, sustain: 0.3, release: 0.5 }\n        }\n      }\n    };\n  }\n\n  /**\n   * Create Observable Plot visualization of scale pitches\n   */\n  public plotScale(octave: number = 4, length: number = 8, options?: any): ReturnType<typeof import('../../visualization/plots/PlotRenderer').PlotRenderer.bar> {\n    const { PlotRenderer } = require('../../visualization/plots/PlotRenderer');\n    const pitches = this.generate(octave, length);\n    const noteNames = this.getNoteNames();\n    \n    const data = {\n      x: pitches.map((_, i) => noteNames[i % noteNames.length] || `${i + 1}`),\n      y: pitches,\n      color: pitches.map(() => 'steelblue')\n    };\n\n    return PlotRenderer.bar(data, {\n      title: `${this.tonic} ${this.mode} Scale`,\n      width: 600,\n      height: 300,\n      showAxis: true,\n      ...options\n    });\n  }\n\n  /**\n   * Create Observable Plot radar chart of scale intervals\n   */\n  public plotIntervals(options?: any): ReturnType<typeof import('../../visualization/plots/PlotRenderer').PlotRenderer.radar> {\n    const { PlotRenderer } = require('../../visualization/plots/PlotRenderer');\n    const intervals = MusicTheoryConstants.scaleIntervals[this.mode];\n    const noteNames = this.getNoteNames();\n    \n    const data = {\n      x: intervals.map((_, i) => i * (360 / intervals.length)), // Convert to angles\n      y: intervals.map(() => 1), // All points at same radius\n      color: noteNames.map(() => 'steelblue')\n    };\n\n    return PlotRenderer.radar(data, {\n      title: `${this.tonic} ${this.mode} Scale Intervals`,\n      width: 400,\n      height: 400,\n      ...options\n    });\n  }\n}","import { ChromaticNote, ScaleMode, ChordProgression } from '../../types/music';\nimport { Pitch } from '../../types/common';\n// import { MusicTheoryConstants } from './MusicTheoryConstants';\nimport { Scale } from './Scale';\nimport { JMonSequence, JMonNote } from '../../types/jmon';\nimport { JMonConverter } from '../../io/jmon/conversion';\n\nexport interface ProgressionOptions {\n  length?: number;\n  octave?: number;\n  voicing?: 'triad' | 'seventh' | 'extended';\n}\n\nexport class Progression {\n  private scale: Scale;\n\n  constructor(tonic: ChromaticNote, mode: ScaleMode = 'major') {\n    this.scale = new Scale(tonic, mode);\n  }\n\n  public generate(options: ProgressionOptions = {}): ChordProgression {\n    const { length = 4, voicing = 'triad' } = options;\n    \n    // Common chord progressions by mode\n    const progressionPatterns: Record<ScaleMode, number[][]> = {\n      major: [[1, 4, 5, 1], [1, 6, 4, 5], [1, 5, 6, 4], [2, 5, 1, 1]],\n      minor: [[1, 4, 5, 1], [1, 6, 4, 5], [1, 7, 6, 7], [1, 3, 7, 1]],\n      dorian: [[1, 4, 1, 4], [1, 7, 4, 1], [1, 2, 7, 1]],\n      phrygian: [[1, 2, 1, 2], [1, 7, 6, 1]],\n      lydian: [[1, 2, 1, 2], [1, 5, 4, 1]],\n      mixolydian: [[1, 7, 4, 1], [1, 4, 7, 1]],\n      locrian: [[1, 2, 1, 2]],\n    };\n\n    const patterns = progressionPatterns[this.scale.mode];\n    const selectedPattern = patterns[Math.floor(Math.random() * patterns.length)]!;\n    \n    // Adjust pattern length to match requested length\n    const chords: string[] = [];\n    for (let i = 0; i < length; i++) {\n      const degree = selectedPattern[i % selectedPattern.length]!;\n      const chord = this.generateChord(degree, voicing);\n      chords.push(chord);\n    }\n\n    return {\n      chords,\n      key: this.scale.tonic,\n      mode: this.scale.mode,\n    };\n  }\n\n  public generateChord(degree: number, voicing: 'triad' | 'seventh' | 'extended' = 'triad'): string {\n    const scaleNotes = this.scale.getNoteNames();\n    const rootNote = scaleNotes[(degree - 1) % scaleNotes.length]!;\n    \n    // Determine chord quality based on scale degree and mode\n    const chordQuality = this.getChordQuality(degree);\n    \n    let chordSymbol = rootNote;\n    \n    switch (voicing) {\n      case 'triad':\n        chordSymbol += chordQuality;\n        break;\n      case 'seventh':\n        chordSymbol += chordQuality;\n        chordSymbol += this.getSeventhQuality(degree);\n        break;\n      case 'extended':\n        chordSymbol += chordQuality;\n        chordSymbol += this.getSeventhQuality(degree);\n        if (Math.random() > 0.5) {\n          chordSymbol += this.getExtension();\n        }\n        break;\n    }\n    \n    return chordSymbol;\n  }\n\n  public computeCircle(steps = 8): ChordProgression {\n    // Circle of fifths progression\n    const chords: string[] = [];\n    let currentDegree = 1;\n    \n    for (let i = 0; i < steps; i++) {\n      const chord = this.generateChord(currentDegree, 'triad');\n      chords.push(chord);\n      \n      // Move by fifth (4 scale degrees up)\n      currentDegree = ((currentDegree + 3) % 7) + 1;\n    }\n    \n    return {\n      chords,\n      key: this.scale.tonic,\n      mode: this.scale.mode,\n    };\n  }\n\n  public getChordPitches(degree: number, octave = 4, voicing: 'triad' | 'seventh' = 'triad'): Pitch[] {\n    const intervals = voicing === 'triad' ? [0, 2, 4] : [0, 2, 4, 6];\n    \n    return intervals.map(interval => {\n      const scaleDegree = ((degree - 1 + interval) % 7) + 1;\n      return this.scale.getDegree(scaleDegree, octave);\n    });\n  }\n\n  private getChordQuality(degree: number): string {\n    const qualityMap: Record<ScaleMode, Record<number, string>> = {\n      major: { 1: '', 2: 'm', 3: 'm', 4: '', 5: '', 6: 'm', 7: 'dim' },\n      minor: { 1: 'm', 2: 'dim', 3: '', 4: 'm', 5: 'm', 6: '', 7: '' },\n      dorian: { 1: 'm', 2: 'm', 3: '', 4: '', 5: 'm', 6: 'dim', 7: '' },\n      phrygian: { 1: 'm', 2: '', 3: '', 4: 'm', 5: 'dim', 6: '', 7: 'm' },\n      lydian: { 1: '', 2: '', 3: 'm', 4: 'dim', 5: '', 6: 'm', 7: 'm' },\n      mixolydian: { 1: '', 2: 'm', 3: 'dim', 4: '', 5: 'm', 6: 'm', 7: '' },\n      locrian: { 1: 'dim', 2: '', 3: 'm', 4: 'm', 5: '', 6: '', 7: 'm' },\n    };\n\n    return qualityMap[this.scale.mode]?.[degree] || '';\n  }\n\n  private getSeventhQuality(degree: number): string {\n    // Simplified seventh quality logic\n    const quality = this.getChordQuality(degree);\n    if (quality === 'm') return '7';\n    if (quality === 'dim') return 'ø7';\n    if (degree === 5 || degree === 7) return '7';\n    return 'maj7';\n  }\n\n  private getExtension(): string {\n    const extensions = ['add9', 'sus2', 'sus4', '6'];\n    return extensions[Math.floor(Math.random() * extensions.length)]!;\n  }\n\n  public toJMonSequence(\n    options: {\n      length?: number;\n      octave?: number;\n      duration?: string;\n      velocity?: number;\n      label?: string;\n      voicing?: 'triad' | 'seventh';\n      strumPattern?: boolean;\n    } = {}\n  ): JMonSequence {\n    const {\n      length = 4,\n      octave = 4,\n      duration = '1n',\n      velocity = 0.8,\n      label = `${this.scale.tonic} ${this.scale.mode} progression`,\n      voicing = 'triad',\n      strumPattern = false\n    } = options;\n\n    const progression = this.generate({ length, voicing });\n    const notes: JMonNote[] = [];\n\n    progression.chords.forEach((_, chordIndex) => {\n      const chordDegree = ((chordIndex % 7) + 1);\n      const chordPitches = this.getChordPitches(chordDegree, octave, voicing);\n      \n      if (strumPattern) {\n        // Arpeggiate the chord\n        chordPitches.forEach((pitch, noteIndex) => {\n          notes.push({\n            note: JMonConverter.midiToNoteName(pitch),\n            time: JMonConverter.timeToMusicalTime(chordIndex + noteIndex * 0.1),\n            duration: '8n',\n            velocity: velocity * (noteIndex === 0 ? 1 : 0.8)\n          });\n        });\n      } else {\n        // Play chord as block\n        notes.push({\n          note: chordPitches.map(pitch => JMonConverter.midiToNoteName(pitch)),\n          time: JMonConverter.timeToMusicalTime(chordIndex),\n          duration,\n          velocity\n        });\n      }\n    });\n\n    return {\n      label,\n      notes,\n      synth: {\n        type: 'PolySynth',\n        options: {\n          oscillator: { type: 'sawtooth' },\n          envelope: { attack: 0.02, decay: 0.1, sustain: 0.5, release: 1.0 }\n        }\n      }\n    };\n  }\n}","import { Scale } from '../theory/Scale';\n\nexport interface VoicingOptions {\n  voiceCount?: number;\n  voiceRange?: [number, number];\n  intervalLimits?: [number, number];\n  doubling?: boolean;\n  inversion?: number;\n}\n\nexport interface ChordVoicing {\n  notes: number[];\n  root: number;\n  quality: string;\n  inversion: number;\n}\n\n/**\n * Voice leading and harmonization system\n * Based on the Python djalgo harmony module (Voice class)\n */\nexport class Voice {\n  private scale: Scale;\n  private options: Required<VoicingOptions>;\n\n  constructor(scale: Scale, options: VoicingOptions = {}) {\n    this.scale = scale;\n    this.options = {\n      voiceCount: options.voiceCount || 4,\n      voiceRange: options.voiceRange || [48, 84], // C3 to C6\n      intervalLimits: options.intervalLimits || [3, 12], // Minor 3rd to octave\n      doubling: options.doubling || true,\n      inversion: options.inversion || 0\n    };\n  }\n\n  /**\n   * Harmonize a melody with chords\n   */\n  public harmonizeMelody(melody: number[], chordProgression?: number[]): ChordVoicing[] {\n    const harmonizedChords: ChordVoicing[] = [];\n    \n    for (let i = 0; i < melody.length; i++) {\n      const melodyNote = melody[i];\n      const chordRoot = chordProgression ? chordProgression[i % chordProgression.length] : this.findBestChordRoot(melodyNote);\n      \n      const chord = this.buildChord(chordRoot, melodyNote);\n      harmonizedChords.push(chord);\n    }\n    \n    return harmonizedChords;\n  }\n\n  /**\n   * Find the best chord root for a given melody note\n   */\n  private findBestChordRoot(melodyNote: number): number {\n    const scaleDegrees = this.scale.getScaleDegrees();\n    const melodyPitchClass = ((melodyNote % 12) + 12) % 12;\n    \n    // Find scale degrees that contain the melody note\n    const possibleRoots: number[] = [];\n    \n    for (let i = 0; i < scaleDegrees.length; i++) {\n      const triad = this.getTriadForDegree(i);\n      if (triad.some(note => ((note % 12) + 12) % 12 === melodyPitchClass)) {\n        possibleRoots.push(scaleDegrees[i]);\n      }\n    }\n    \n    // Return the first valid root, or default to tonic\n    return possibleRoots.length > 0 ? possibleRoots[0] : scaleDegrees[0];\n  }\n\n  /**\n   * Get triad for a scale degree\n   */\n  private getTriadForDegree(degree: number): number[] {\n    const scaleDegrees = this.scale.getScaleDegrees();\n    const root = scaleDegrees[degree % scaleDegrees.length];\n    const third = scaleDegrees[(degree + 2) % scaleDegrees.length];\n    const fifth = scaleDegrees[(degree + 4) % scaleDegrees.length];\n    \n    return [root, third, fifth];\n  }\n\n  /**\n   * Build a chord with proper voicing\n   */\n  private buildChord(root: number, melodyNote: number): ChordVoicing {\n    const triad = this.getTriadFromRoot(root);\n    const chordTones = this.distributeVoices(triad, melodyNote);\n    \n    return {\n      notes: chordTones,\n      root: root,\n      quality: this.determineChordQuality(triad),\n      inversion: this.options.inversion\n    };\n  }\n\n  /**\n   * Get triad notes from a root\n   */\n  private getTriadFromRoot(root: number): number[] {\n    const scaleDegrees = this.scale.getScaleDegrees();\n    const rootIndex = scaleDegrees.indexOf(root % 12);\n    \n    if (rootIndex === -1) return [root, root + 4, root + 7]; // Default major triad\n    \n    return this.getTriadForDegree(rootIndex);\n  }\n\n  /**\n   * Distribute chord tones across voices\n   */\n  private distributeVoices(triad: number[], melodyNote: number): number[] {\n    const voices: number[] = [];\n    const [root, third, fifth] = triad;\n    const melodyOctave = Math.floor(melodyNote / 12);\n    \n    // Ensure melody note is the highest voice\n    voices.push(melodyNote);\n    \n    // Add lower voices\n    for (let i = 1; i < this.options.voiceCount; i++) {\n      const targetOctave = melodyOctave - Math.ceil(i / triad.length);\n      let chordTone: number;\n      \n      switch (i % 3) {\n        case 1:\n          chordTone = targetOctave * 12 + fifth;\n          break;\n        case 2:\n          chordTone = targetOctave * 12 + third;\n          break;\n        default:\n          chordTone = targetOctave * 12 + root;\n      }\n      \n      // Ensure voice is within range\n      chordTone = this.constrainToRange(chordTone);\n      voices.unshift(chordTone); // Add to beginning (lower voices first)\n    }\n    \n    return this.applyVoiceLeadingRules(voices);\n  }\n\n  /**\n   * Constrain note to voice range\n   */\n  private constrainToRange(note: number): number {\n    const [minNote, maxNote] = this.options.voiceRange;\n    \n    while (note < minNote) note += 12;\n    while (note > maxNote) note -= 12;\n    \n    return note;\n  }\n\n  /**\n   * Apply voice leading rules\n   */\n  private applyVoiceLeadingRules(voices: number[]): number[] {\n    const improvedVoices = [...voices];\n    \n    // Check and fix voice crossing\n    for (let i = 1; i < improvedVoices.length; i++) {\n      if (improvedVoices[i] <= improvedVoices[i - 1]) {\n        // Voice crossing detected, adjust upper voice\n        improvedVoices[i] = improvedVoices[i - 1] + this.options.intervalLimits[0];\n      }\n    }\n    \n    // Check interval limits\n    for (let i = 1; i < improvedVoices.length; i++) {\n      const interval = improvedVoices[i] - improvedVoices[i - 1];\n      const [minInterval, maxInterval] = this.options.intervalLimits;\n      \n      if (interval < minInterval) {\n        improvedVoices[i] = improvedVoices[i - 1] + minInterval;\n      } else if (interval > maxInterval) {\n        improvedVoices[i] = improvedVoices[i - 1] + maxInterval;\n      }\n    }\n    \n    return improvedVoices;\n  }\n\n  /**\n   * Determine chord quality from triad\n   */\n  private determineChordQuality(triad: number[]): string {\n    if (triad.length < 3) return 'unknown';\n    \n    const [root, third, fifth] = triad.map(note => note % 12);\n    const thirdInterval = ((third - root + 12) % 12);\n    const fifthInterval = ((fifth - root + 12) % 12);\n    \n    if (thirdInterval === 4 && fifthInterval === 7) return 'major';\n    if (thirdInterval === 3 && fifthInterval === 7) return 'minor';\n    if (thirdInterval === 4 && fifthInterval === 6) return 'augmented';\n    if (thirdInterval === 3 && fifthInterval === 6) return 'diminished';\n    \n    return 'unknown';\n  }\n\n  /**\n   * Create smooth voice leading between two chords\n   */\n  public smoothVoiceLeading(fromChord: ChordVoicing, toChord: ChordVoicing): ChordVoicing {\n    const improvedToChord = { ...toChord };\n    const fromNotes = fromChord.notes;\n    const toNotes = [...toChord.notes];\n    \n    // Find the best voice leading by minimizing total voice movement\n    const bestVoicing = this.findMinimalMovement(fromNotes, toNotes);\n    improvedToChord.notes = bestVoicing;\n    \n    return improvedToChord;\n  }\n\n  /**\n   * Find voicing with minimal voice movement\n   */\n  private findMinimalMovement(fromNotes: number[], toNotes: number[]): number[] {\n    const result = new Array(fromNotes.length);\n    const usedIndices = new Set<number>();\n    \n    // For each voice in the from chord, find the closest note in the to chord\n    for (let fromIndex = 0; fromIndex < fromNotes.length; fromIndex++) {\n      let minDistance = Infinity;\n      let bestToIndex = 0;\n      \n      for (let toIndex = 0; toIndex < toNotes.length; toIndex++) {\n        if (usedIndices.has(toIndex)) continue;\n        \n        const distance = Math.abs(fromNotes[fromIndex] - toNotes[toIndex]);\n        if (distance < minDistance) {\n          minDistance = distance;\n          bestToIndex = toIndex;\n        }\n      }\n      \n      result[fromIndex] = toNotes[bestToIndex];\n      usedIndices.add(bestToIndex);\n    }\n    \n    return result;\n  }\n\n  /**\n   * Add seventh to a chord\n   */\n  public addSeventh(chord: ChordVoicing): ChordVoicing {\n    const scaleDegrees = this.scale.getScaleDegrees();\n    const rootIndex = scaleDegrees.indexOf(chord.root % 12);\n    \n    if (rootIndex !== -1) {\n      const seventh = scaleDegrees[(rootIndex + 6) % scaleDegrees.length];\n      const seventhNote = Math.floor(chord.root / 12) * 12 + seventh;\n      \n      return {\n        ...chord,\n        notes: [...chord.notes, seventhNote],\n        quality: chord.quality + '7'\n      };\n    }\n    \n    return chord;\n  }\n\n  /**\n   * Create chord inversions\n   */\n  public invert(chord: ChordVoicing, inversion: number): ChordVoicing {\n    const notes = [...chord.notes].sort((a, b) => a - b);\n    const inversionCount = inversion % notes.length;\n    \n    for (let i = 0; i < inversionCount; i++) {\n      const lowestNote = notes.shift()!;\n      notes.push(lowestNote + 12);\n    }\n    \n    return {\n      ...chord,\n      notes: notes,\n      inversion: inversionCount\n    };\n  }\n\n  /**\n   * Generate four-part harmony for a melody\n   */\n  public fourPartHarmony(melody: number[]): ChordVoicing[] {\n    const oldVoiceCount = this.options.voiceCount;\n    this.options.voiceCount = 4;\n    \n    const harmony = this.harmonizeMelody(melody);\n    \n    // Apply smooth voice leading\n    for (let i = 1; i < harmony.length; i++) {\n      harmony[i] = this.smoothVoiceLeading(harmony[i - 1], harmony[i]);\n    }\n    \n    this.options.voiceCount = oldVoiceCount;\n    return harmony;\n  }\n}","export interface OrnamentOptions {\n  density?: number;        // Probability of ornamentation (0-1)\n  maxInterval?: number;    // Maximum interval for ornaments\n  rhythmicVariation?: boolean;\n  graceNoteDuration?: number;\n}\n\nexport interface OrnamentedNote {\n  originalNote: number;\n  ornamentedSequence: number[];\n  durations: number[];\n  type: string;\n}\n\n/**\n * Musical ornamentation system\n * Based on the Python djalgo harmony module (Ornament class)\n */\nexport class Ornament {\n  private options: Required<OrnamentOptions>;\n\n  constructor(options: OrnamentOptions = {}) {\n    this.options = {\n      density: options.density || 0.3,\n      maxInterval: options.maxInterval || 7,\n      rhythmicVariation: options.rhythmicVariation || true,\n      graceNoteDuration: options.graceNoteDuration || 0.125\n    };\n  }\n\n  /**\n   * Apply ornamentation to a melody\n   */\n  public ornament(melody: number[], durations?: number[]): OrnamentedNote[] {\n    const ornamentedMelody: OrnamentedNote[] = [];\n    \n    for (let i = 0; i < melody.length; i++) {\n      const note = melody[i];\n      const duration = durations?.[i] || 1;\n      \n      if (Math.random() < this.options.density) {\n        const ornamentType = this.selectOrnamentType(note, melody[i + 1], i === melody.length - 1);\n        const ornamented = this.applyOrnament(note, melody[i + 1], ornamentType, duration);\n        ornamentedMelody.push(ornamented);\n      } else {\n        // No ornamentation\n        ornamentedMelody.push({\n          originalNote: note,\n          ornamentedSequence: [note],\n          durations: [duration],\n          type: 'none'\n        });\n      }\n    }\n    \n    return ornamentedMelody;\n  }\n\n  /**\n   * Select appropriate ornament type based on context\n   */\n  private selectOrnamentType(currentNote: number, nextNote?: number, isLast: boolean = false): string {\n    const ornamentTypes = ['grace', 'trill', 'mordent', 'turn'];\n    \n    // Filter based on context\n    const availableTypes = ornamentTypes.filter(type => {\n      switch (type) {\n        case 'grace':\n          return !isLast && nextNote !== undefined;\n        case 'trill':\n        case 'mordent':\n        case 'turn':\n          return true;\n        default:\n          return false;\n      }\n    });\n    \n    return availableTypes[Math.floor(Math.random() * availableTypes.length)];\n  }\n\n  /**\n   * Apply specific ornament to a note\n   */\n  private applyOrnament(note: number, nextNote: number | undefined, type: string, duration: number): OrnamentedNote {\n    switch (type) {\n      case 'grace':\n        return this.addGraceNote(note, nextNote, duration);\n      case 'trill':\n        return this.addTrill(note, duration);\n      case 'mordent':\n        return this.addMordent(note, duration);\n      case 'turn':\n        return this.addTurn(note, duration);\n      case 'arpeggio':\n        return this.addArpeggio(note, duration);\n      case 'slide':\n        return this.addSlide(note, nextNote, duration);\n      default:\n        return {\n          originalNote: note,\n          ornamentedSequence: [note],\n          durations: [duration],\n          type: 'none'\n        };\n    }\n  }\n\n  /**\n   * Add grace note ornamentation\n   */\n  private addGraceNote(note: number, nextNote: number | undefined, duration: number): OrnamentedNote {\n    if (nextNote === undefined) {\n      return {\n        originalNote: note,\n        ornamentedSequence: [note],\n        durations: [duration],\n        type: 'none'\n      };\n    }\n    \n    const graceNote = this.getAuxiliaryNote(note, nextNote);\n    const graceDuration = this.options.graceNoteDuration;\n    const mainDuration = duration - graceDuration;\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: [graceNote, note],\n      durations: [graceDuration, Math.max(0.125, mainDuration)],\n      type: 'grace'\n    };\n  }\n\n  /**\n   * Add trill ornamentation\n   */\n  private addTrill(note: number, duration: number): OrnamentedNote {\n    const upperNote = note + this.getTrillInterval();\n    const trillDuration = duration / 8; // 8 alternations\n    const sequence: number[] = [];\n    const durations: number[] = [];\n    \n    for (let i = 0; i < 8; i++) {\n      sequence.push(i % 2 === 0 ? note : upperNote);\n      durations.push(trillDuration);\n    }\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: sequence,\n      durations: durations,\n      type: 'trill'\n    };\n  }\n\n  /**\n   * Add mordent ornamentation (quick alternation)\n   */\n  private addMordent(note: number, duration: number): OrnamentedNote {\n    const auxiliary = note + (Math.random() < 0.5 ? 1 : -1); // Upper or lower mordent\n    const ornamentDuration = Math.min(duration / 4, this.options.graceNoteDuration);\n    const mainDuration = duration - ornamentDuration * 2;\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: [note, auxiliary, note],\n      durations: [ornamentDuration, ornamentDuration, Math.max(0.125, mainDuration)],\n      type: 'mordent'\n    };\n  }\n\n  /**\n   * Add turn ornamentation (four-note figure)\n   */\n  private addTurn(note: number, duration: number): OrnamentedNote {\n    const upper = note + 1;\n    const lower = note - 1;\n    const noteDuration = duration / 4;\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: [upper, note, lower, note],\n      durations: [noteDuration, noteDuration, noteDuration, noteDuration],\n      type: 'turn'\n    };\n  }\n\n  /**\n   * Add arpeggio ornamentation (broken chord)\n   */\n  private addArpeggio(note: number, duration: number): OrnamentedNote {\n    const chord = this.buildArpeggioChord(note);\n    const noteDuration = duration / chord.length;\n    const durations = Array(chord.length).fill(noteDuration);\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: chord,\n      durations: durations,\n      type: 'arpeggio'\n    };\n  }\n\n  /**\n   * Add slide ornamentation (glissando effect)\n   */\n  private addSlide(note: number, nextNote: number | undefined, duration: number): OrnamentedNote {\n    if (nextNote === undefined || Math.abs(nextNote - note) <= 1) {\n      return {\n        originalNote: note,\n        ornamentedSequence: [note],\n        durations: [duration],\n        type: 'none'\n      };\n    }\n    \n    const steps = Math.min(Math.abs(nextNote - note), 5); // Limit slide length\n    const sequence: number[] = [];\n    const stepDuration = duration / (steps + 1);\n    const durations: number[] = [];\n    \n    const direction = nextNote > note ? 1 : -1;\n    \n    for (let i = 0; i <= steps; i++) {\n      sequence.push(note + i * direction);\n      durations.push(stepDuration);\n    }\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: sequence,\n      durations: durations,\n      type: 'slide'\n    };\n  }\n\n  /**\n   * Get auxiliary note for grace notes\n   */\n  private getAuxiliaryNote(note: number, nextNote: number): number {\n    const interval = nextNote - note;\n    \n    if (Math.abs(interval) <= 2) {\n      // Small interval - use step in opposite direction\n      return note + (interval > 0 ? -1 : 1);\n    } else {\n      // Large interval - use step towards target\n      return note + (interval > 0 ? 1 : -1);\n    }\n  }\n\n  /**\n   * Get trill interval (usually whole or half step)\n   */\n  private getTrillInterval(): number {\n    return Math.random() < 0.7 ? 1 : 2; // 70% half step, 30% whole step\n  }\n\n  /**\n   * Build arpeggio chord from root note\n   */\n  private buildArpeggioChord(root: number): number[] {\n    // Simple triad arpeggio\n    const chord = [root, root + 4, root + 7, root + 12]; // Root, third, fifth, octave\n    \n    // Randomize direction\n    if (Math.random() < 0.5) {\n      return chord.reverse();\n    }\n    \n    return chord;\n  }\n\n  /**\n   * Apply rhythmic ornamentation (syncopation, etc.)\n   */\n  public rhythmicOrnamentation(durations: number[]): number[] {\n    if (!this.options.rhythmicVariation) return durations;\n    \n    const ornamentedDurations = [...durations];\n    \n    for (let i = 0; i < ornamentedDurations.length - 1; i++) {\n      if (Math.random() < this.options.density / 2) {\n        // Create syncopation by borrowing time from next note\n        const borrowAmount = Math.min(ornamentedDurations[i + 1] * 0.25, 0.25);\n        ornamentedDurations[i] += borrowAmount;\n        ornamentedDurations[i + 1] -= borrowAmount;\n      }\n    }\n    \n    return ornamentedDurations;\n  }\n\n  /**\n   * Create compound ornamentation (multiple ornaments)\n   */\n  public compoundOrnamentation(melody: number[], durations?: number[]): OrnamentedNote[] {\n    let ornamentedMelody = this.ornament(melody, durations);\n    \n    // Apply second layer of ornamentation to some notes\n    for (let i = 0; i < ornamentedMelody.length; i++) {\n      if (Math.random() < this.options.density / 3 && ornamentedMelody[i].type === 'none') {\n        const secondOrnamentation = this.applyOrnament(\n          ornamentedMelody[i].originalNote,\n          melody[i + 1],\n          'grace',\n          ornamentedMelody[i].durations[0]\n        );\n        ornamentedMelody[i] = secondOrnamentation;\n      }\n    }\n    \n    return ornamentedMelody;\n  }\n\n  /**\n   * Get ornamentation statistics\n   */\n  public getStatistics(ornamentedMelody: OrnamentedNote[]): {\n    totalNotes: number;\n    ornamentedNotes: number;\n    ornamentationRate: number;\n    ornamentTypes: Record<string, number>;\n  } {\n    const stats = {\n      totalNotes: ornamentedMelody.length,\n      ornamentedNotes: 0,\n      ornamentationRate: 0,\n      ornamentTypes: {} as Record<string, number>\n    };\n    \n    for (const note of ornamentedMelody) {\n      if (note.type !== 'none') {\n        stats.ornamentedNotes++;\n      }\n      \n      stats.ornamentTypes[note.type] = (stats.ornamentTypes[note.type] || 0) + 1;\n    }\n    \n    stats.ornamentationRate = stats.ornamentedNotes / stats.totalNotes;\n    \n    return stats;\n  }\n}","import { Duration } from '../../types/common';\nimport { RhythmPattern } from '../../types/music';\n\nexport interface RhythmOptions {\n  measureLength?: number;\n  complexity?: number;\n  swing?: boolean;\n}\n\nexport class Rhythm {\n  public readonly measureLength: number;\n  public durations: Duration[];\n\n  constructor(measureLength = 4.0, durations: Duration[] = []) {\n    this.measureLength = measureLength;\n    this.durations = durations.length > 0 ? [...durations] : this.generateBasicPattern();\n  }\n\n  public random(options: RhythmOptions = {}): RhythmPattern {\n    const { measureLength = this.measureLength, complexity = 0.5 } = options;\n    \n    const possibleDurations = [0.25, 0.5, 1.0, 1.5, 2.0];\n    const durations: Duration[] = [];\n    let currentLength = 0;\n    \n    while (currentLength < measureLength) {\n      const remaining = measureLength - currentLength;\n      const validDurations = possibleDurations.filter(d => d <= remaining);\n      \n      if (validDurations.length === 0) {\n        // Fill remaining with rest\n        if (remaining > 0) {\n          durations.push(remaining);\n        }\n        break;\n      }\n      \n      // Choose duration based on complexity\n      let chosenDuration: Duration;\n      if (Math.random() < complexity) {\n        // More complex rhythms favor shorter durations\n        chosenDuration = validDurations[0]!;\n      } else {\n        // Simpler rhythms favor longer durations\n        chosenDuration = validDurations[validDurations.length - 1]!;\n      }\n      \n      durations.push(chosenDuration);\n      currentLength += chosenDuration;\n    }\n    \n    return {\n      durations,\n      measureLength,\n      accents: this.generateAccents(durations),\n    };\n  }\n\n  public static beatcycle(cycles: number[], measures = 4): RhythmPattern[] {\n    const patterns: RhythmPattern[] = [];\n    \n    for (let m = 0; m < measures; m++) {\n      const durations: Duration[] = [];\n      let totalLength = 0;\n      \n      for (const cycle of cycles) {\n        const beatLength = 4.0 / cycle; // Assuming 4/4 time\n        \n        for (let i = 0; i < cycle; i++) {\n          durations.push(beatLength);\n          totalLength += beatLength;\n        }\n        \n        if (totalLength >= 4.0) break; // Don't exceed measure length\n      }\n      \n      patterns.push({\n        durations,\n        measureLength: 4.0,\n        accents: durations.map((_, i) => i % cycles[0]! === 0),\n      });\n    }\n    \n    return patterns;\n  }\n\n  public static isorhythm(talea: Duration[], color: number[], repetitions = 4): RhythmPattern {\n    const durations: Duration[] = [];\n    let colorIndex = 0;\n    \n    for (let rep = 0; rep < repetitions; rep++) {\n      for (const duration of talea) {\n        durations.push(duration);\n        colorIndex = (colorIndex + 1) % color.length;\n      }\n    }\n    \n    const totalLength = durations.reduce((sum, dur) => sum + dur, 0);\n    \n    return {\n      durations,\n      measureLength: totalLength,\n      accents: durations.map((_, i) => color[i % color.length] === 1),\n    };\n  }\n\n  public darwin(options: RhythmOptions = {}): RhythmPattern {\n    // Simplified genetic algorithm for rhythm evolution\n    const { measureLength = this.measureLength } = options;\n    \n    // Start with current rhythm or random\n    let bestRhythm = this.durations.length > 0 ? \n      { durations: [...this.durations], measureLength, accents: this.generateAccents(this.durations) } :\n      this.random(options);\n    \n    let bestFitness = this.calculateFitness(bestRhythm);\n    \n    // Evolve for several generations\n    for (let gen = 0; gen < 10; gen++) {\n      // Create variations\n      const variations = Array.from({ length: 5 }, () => this.mutateRhythm(bestRhythm));\n      \n      for (const variation of variations) {\n        const fitness = this.calculateFitness(variation);\n        if (fitness > bestFitness) {\n          bestRhythm = variation;\n          bestFitness = fitness;\n        }\n      }\n    }\n    \n    return bestRhythm;\n  }\n\n  private generateBasicPattern(): Duration[] {\n    return [1.0, 1.0, 1.0, 1.0]; // Four quarter notes\n  }\n\n  private generateAccents(durations: Duration[]): boolean[] {\n    return durations.map((_, i) => i === 0 || (i % 4 === 0)); // Accent first beat and strong beats\n  }\n\n  private calculateFitness(rhythm: RhythmPattern): number {\n    let fitness = 0;\n    \n    // Prefer rhythms that fill the measure completely\n    const totalDuration = rhythm.durations.reduce((sum, dur) => sum + dur, 0);\n    if (Math.abs(totalDuration - rhythm.measureLength) < 0.01) {\n      fitness += 10;\n    }\n    \n    // Prefer some variation in duration\n    const uniqueDurations = new Set(rhythm.durations).size;\n    fitness += uniqueDurations * 2;\n    \n    // Prefer reasonable number of notes (not too sparse, not too dense)\n    const noteCount = rhythm.durations.length;\n    if (noteCount >= 2 && noteCount <= 16) {\n      fitness += 5;\n    }\n    \n    return fitness;\n  }\n\n  private mutateRhythm(rhythm: RhythmPattern): RhythmPattern {\n    const durations = [...rhythm.durations];\n    const possibleDurations = [0.25, 0.5, 1.0, 1.5, 2.0];\n    \n    // Randomly modify one duration\n    if (durations.length > 0) {\n      const index = Math.floor(Math.random() * durations.length);\n      durations[index] = possibleDurations[Math.floor(Math.random() * possibleDurations.length)]!;\n    }\n    \n    // Normalize to fit measure\n    const total = durations.reduce((sum, dur) => sum + dur, 0);\n    if (total !== rhythm.measureLength && total > 0) {\n      const factor = rhythm.measureLength / total;\n      for (let i = 0; i < durations.length; i++) {\n        durations[i] *= factor;\n      }\n    }\n    \n    return {\n      durations,\n      measureLength: rhythm.measureLength,\n      accents: this.generateAccents(durations),\n    };\n  }\n}","import { MusicalNote } from '../../types/music';\n\nexport interface RhythmNote {\n  duration: number;\n  offset: number;\n}\n\n/**\n * Advanced rhythm algorithms matching the Python djalgo implementation\n */\nexport class AdvancedRhythm {\n  \n  /**\n   * Isorhythm implementation - merges durations and pitches cyclically\n   */\n  public static isorhythm(pitches: (number | null)[], durations: number[]): MusicalNote[] {\n    // Calculate LCM to find the cycle length\n    const lcm = this.lcm(pitches.length, durations.length);\n    \n    // Repeat patterns to match LCM\n    const pRepeated = this.repeatToLength(pitches, lcm);\n    const dRepeated = this.repeatToLength(durations, lcm);\n    \n    // Create notes with proper offsets\n    const notes: MusicalNote[] = [];\n    let currentOffset = 0;\n    \n    for (let i = 0; i < lcm; i++) {\n      notes.push({\n        pitch: pRepeated[i] || undefined,\n        duration: dRepeated[i]!,\n        offset: currentOffset,\n        velocity: 0.8\n      });\n      currentOffset += dRepeated[i]!;\n    }\n    \n    return notes;\n  }\n\n  /**\n   * Beat cycle implementation - maps pitches to durations cyclically\n   */\n  public static beatcycle(pitches: (number | null)[], durations: number[]): MusicalNote[] {\n    const notes: MusicalNote[] = [];\n    let currentOffset = 0;\n    let durationIndex = 0;\n    \n    for (const pitch of pitches) {\n      const duration = durations[durationIndex % durations.length]!;\n      \n      notes.push({\n        pitch: pitch || undefined,\n        duration,\n        offset: currentOffset,\n        velocity: 0.8\n      });\n      \n      currentOffset += duration;\n      durationIndex++;\n    }\n    \n    return notes;\n  }\n\n  /**\n   * Simple LCM calculation\n   */\n  private static lcm(a: number, b: number): number {\n    return Math.abs(a * b) / this.gcd(a, b);\n  }\n\n  /**\n   * Simple GCD calculation\n   */\n  private static gcd(a: number, b: number): number {\n    while (b !== 0) {\n      const temp = b;\n      b = a % b;\n      a = temp;\n    }\n    return a;\n  }\n\n  /**\n   * Repeat array to specific length\n   */\n  private static repeatToLength<T>(array: T[], length: number): T[] {\n    const result: T[] = [];\n    for (let i = 0; i < length; i++) {\n      result.push(array[i % array.length]!);\n    }\n    return result;\n  }\n}\n\n/**\n * Enhanced Rhythm class with genetic algorithm support\n */\nexport class Rhythm {\n  public measureLength: number;\n  public durations: number[];\n\n  constructor(measureLength: number, durations: number[]) {\n    this.measureLength = measureLength;\n    this.durations = durations;\n  }\n\n  /**\n   * Generate random rhythm with constraints\n   */\n  public random(\n    seed?: number, \n    restProbability: number = 0, \n    maxIter: number = 100\n  ): RhythmNote[] {\n    if (seed !== undefined) {\n      // Simple seed-based random (for reproducibility)\n      Math.random = this.seededRandom(seed);\n    }\n\n    const rhythm: RhythmNote[] = [];\n    let totalLength = 0;\n    let nIter = 0;\n\n    while (totalLength < this.measureLength) {\n      if (nIter >= maxIter) {\n        console.warn('Max iterations reached. The sum of the durations is not equal to the measure length.');\n        break;\n      }\n\n      const duration = this.durations[Math.floor(Math.random() * this.durations.length)]!;\n      \n      if (totalLength + duration > this.measureLength) {\n        continue;\n      }\n      \n      if (Math.random() < restProbability) {\n        continue;\n      }\n\n      rhythm.push({\n        duration,\n        offset: totalLength\n      });\n      \n      totalLength += duration;\n      nIter++;\n    }\n\n    return rhythm;\n  }\n\n  /**\n   * Genetic algorithm for rhythm evolution\n   */\n  public darwin(\n    seed?: number,\n    populationSize: number = 10,\n    maxGenerations: number = 50,\n    mutationRate: number = 0.1\n  ): RhythmNote[] {\n    const ga = new GeneticRhythm(\n      seed,\n      populationSize,\n      this.measureLength,\n      maxGenerations,\n      mutationRate,\n      this.durations\n    );\n    return ga.generate();\n  }\n\n  /**\n   * Simple seeded random number generator\n   */\n  private seededRandom(seed: number): () => number {\n    let m = 0x80000000; // 2**31\n    let a = 1103515245;\n    let c = 12345;\n    let state = seed;\n    \n    return function() {\n      state = (a * state + c) % m;\n      return state / (m - 1);\n    };\n  }\n}\n\n/**\n * Genetic algorithm for rhythm generation\n */\nexport class GeneticRhythm {\n  private populationSize: number;\n  private measureLength: number;\n  private maxGenerations: number;\n  private mutationRate: number;\n  private durations: number[];\n  private population: RhythmNote[][];\n\n  constructor(\n    seed: number | undefined,\n    populationSize: number,\n    measureLength: number,\n    maxGenerations: number,\n    mutationRate: number,\n    durations: number[]\n  ) {\n    if (seed !== undefined) {\n      // Set up seeded random\n      Math.random = this.seededRandom(seed);\n    }\n\n    this.populationSize = populationSize;\n    this.measureLength = measureLength;\n    this.maxGenerations = maxGenerations;\n    this.mutationRate = mutationRate;\n    this.durations = durations;\n    this.population = this.initializePopulation();\n  }\n\n  /**\n   * Initialize random population\n   */\n  private initializePopulation(): RhythmNote[][] {\n    const population: RhythmNote[][] = [];\n    \n    for (let i = 0; i < this.populationSize; i++) {\n      population.push(this.createRandomRhythm());\n    }\n    \n    return population;\n  }\n\n  /**\n   * Create a single random rhythm\n   */\n  private createRandomRhythm(): RhythmNote[] {\n    const rhythm: RhythmNote[] = [];\n    let totalLength = 0;\n\n    while (totalLength < this.measureLength) {\n      const remaining = this.measureLength - totalLength;\n      const noteLength = this.durations[Math.floor(Math.random() * this.durations.length)]!;\n      \n      if (noteLength <= remaining) {\n        rhythm.push({\n          duration: noteLength,\n          offset: totalLength\n        });\n        totalLength += noteLength;\n      } else {\n        break;\n      }\n    }\n\n    return rhythm;\n  }\n\n  /**\n   * Evaluate fitness of a rhythm\n   */\n  private evaluateFitness(rhythm: RhythmNote[]): number {\n    const totalLength = rhythm.reduce((sum, note) => sum + note.duration, 0);\n    return Math.abs(this.measureLength - totalLength);\n  }\n\n  /**\n   * Select parent for reproduction\n   */\n  private selectParent(): RhythmNote[] {\n    const parent1 = this.population[Math.floor(Math.random() * this.population.length)]!;\n    const parent2 = this.population[Math.floor(Math.random() * this.population.length)]!;\n    \n    return this.evaluateFitness(parent1) < this.evaluateFitness(parent2) ? parent1 : parent2;\n  }\n\n  /**\n   * Crossover two parent rhythms\n   */\n  private crossover(parent1: RhythmNote[], parent2: RhythmNote[]): RhythmNote[] {\n    if (parent1.length === 0 || parent2.length === 0) {\n      return parent1.length > parent2.length ? [...parent1] : [...parent2];\n    }\n\n    const crossoverPoint = Math.floor(Math.random() * Math.min(parent1.length, parent2.length));\n    const child = [\n      ...parent1.slice(0, crossoverPoint),\n      ...parent2.slice(crossoverPoint)\n    ];\n\n    return this.ensureMeasureLength(child);\n  }\n\n  /**\n   * Ensure rhythm fits within measure length\n   */\n  private ensureMeasureLength(rhythm: RhythmNote[]): RhythmNote[] {\n    let totalLength = 0;\n    const adjustedRhythm: RhythmNote[] = [];\n\n    for (let i = 0; i < rhythm.length; i++) {\n      const note = rhythm[i]!;\n      if (totalLength + note.duration <= this.measureLength) {\n        adjustedRhythm.push({\n          duration: note.duration,\n          offset: totalLength\n        });\n        totalLength += note.duration;\n      } else {\n        break;\n      }\n    }\n\n    return adjustedRhythm;\n  }\n\n  /**\n   * Mutate a rhythm\n   */\n  private mutate(rhythm: RhythmNote[]): RhythmNote[] {\n    if (Math.random() > this.mutationRate || rhythm.length === 0) {\n      return [...rhythm];\n    }\n\n    const mutatedRhythm = [...rhythm];\n    const index = Math.floor(Math.random() * mutatedRhythm.length);\n    const note = mutatedRhythm[index]!;\n    \n    // Calculate maximum possible duration for this position\n    const nextOffset = index < mutatedRhythm.length - 1 \n      ? mutatedRhythm[index + 1]!.offset \n      : this.measureLength;\n    const maxNewDuration = nextOffset - note.offset;\n    \n    // Find valid durations\n    const validDurations = this.durations.filter(d => d <= maxNewDuration);\n    \n    if (validDurations.length > 0) {\n      const newDuration = validDurations[Math.floor(Math.random() * validDurations.length)]!;\n      mutatedRhythm[index] = {\n        duration: newDuration,\n        offset: note.offset\n      };\n    }\n\n    return mutatedRhythm;\n  }\n\n  /**\n   * Run the genetic algorithm\n   */\n  public generate(): RhythmNote[] {\n    for (let generation = 0; generation < this.maxGenerations; generation++) {\n      const newPopulation: RhythmNote[][] = [];\n      \n      for (let i = 0; i < this.populationSize; i++) {\n        const parent1 = this.selectParent();\n        const parent2 = this.selectParent();\n        let child = this.crossover(parent1, parent2);\n        child = this.mutate(child);\n        \n        // Sort by offset\n        child.sort((a, b) => a.offset - b.offset);\n        newPopulation.push(child);\n      }\n      \n      this.population = newPopulation;\n    }\n\n    // Return best rhythm\n    const bestRhythm = this.population.reduce((best, current) =>\n      this.evaluateFitness(current) < this.evaluateFitness(best) ? current : best\n    );\n\n    return bestRhythm.sort((a, b) => a.offset - b.offset);\n  }\n\n  /**\n   * Simple seeded random number generator\n   */\n  private seededRandom(seed: number): () => number {\n    let m = 0x80000000;\n    let a = 1103515245;\n    let c = 12345;\n    let state = seed;\n    \n    return function() {\n      state = (a * state + c) % m;\n      return state / (m - 1);\n    };\n  }\n}","import { MusicalNote } from '../../types/music';\n\nexport interface Motif {\n  id: string;\n  name: string;\n  artist?: string;\n  instrument: string;\n  scale: string;\n  tags: string[];\n  measures: number;\n  notes: MusicalNote[];\n  metadata?: Record<string, any>;\n}\n\nexport interface MotifSearchOptions {\n  artist?: string;\n  instrument?: string;\n  scale?: string;\n  tag?: string;\n  minMeasures?: number;\n  maxMeasures?: number;\n}\n\n/**\n * Motif bank system for storing and searching musical patterns\n * Based on the Python djalgo MotifBank implementation\n */\nexport class MotifBank {\n  private motifs: Motif[];\n\n  constructor(motifs: Motif[] = []) {\n    this.motifs = motifs;\n  }\n\n  /**\n   * Load motifs from JSON data\n   */\n  public static fromJSON(jsonData: any[]): MotifBank {\n    const motifs: Motif[] = jsonData.map(data => ({\n      id: data.id || Math.random().toString(36).substr(2, 9),\n      name: data.name || 'Untitled',\n      artist: data.artist,\n      instrument: data.instrument || 'piano',\n      scale: data.scale || 'major',\n      tags: data.tags || [],\n      measures: data.measures || 1,\n      notes: data.notes || [],\n      metadata: data.metadata\n    }));\n\n    return new MotifBank(motifs);\n  }\n\n  /**\n   * Get total number of motifs\n   */\n  public get length(): number {\n    return this.motifs.length;\n  }\n\n  /**\n   * Get motif by index\n   */\n  public get(index: number): Motif | undefined {\n    return this.motifs[index];\n  }\n\n  /**\n   * Get motif by ID\n   */\n  public getById(id: string): Motif | undefined {\n    return this.motifs.find(motif => motif.id === id);\n  }\n\n  /**\n   * Get all motifs\n   */\n  public all(): Motif[] {\n    return [...this.motifs];\n  }\n\n  /**\n   * Add a new motif\n   */\n  public add(motif: Motif): void {\n    // Ensure unique ID\n    if (this.motifs.some(m => m.id === motif.id)) {\n      motif.id = Math.random().toString(36).substr(2, 9);\n    }\n    this.motifs.push(motif);\n  }\n\n  /**\n   * Remove motif by ID\n   */\n  public remove(id: string): boolean {\n    const index = this.motifs.findIndex(motif => motif.id === id);\n    if (index !== -1) {\n      this.motifs.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Update existing motif\n   */\n  public update(id: string, updates: Partial<Motif>): boolean {\n    const motif = this.getById(id);\n    if (motif) {\n      Object.assign(motif, updates);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Find motifs by artist\n   */\n  public byArtist(artist: string): Motif[] {\n    const artistLower = artist.toLowerCase();\n    return this.motifs.filter(motif => \n      motif.artist?.toLowerCase() === artistLower\n    );\n  }\n\n  /**\n   * Find motifs by instrument\n   */\n  public byInstrument(instrument: string): Motif[] {\n    const instrumentLower = instrument.toLowerCase();\n    return this.motifs.filter(motif =>\n      motif.instrument.toLowerCase().includes(instrumentLower)\n    );\n  }\n\n  /**\n   * Find motifs by scale\n   */\n  public byScale(scale: string): Motif[] {\n    const scaleLower = scale.toLowerCase();\n    return this.motifs.filter(motif =>\n      motif.scale.toLowerCase() === scaleLower\n    );\n  }\n\n  /**\n   * Find motifs by tag\n   */\n  public byTag(tag: string): Motif[] {\n    const tagLower = tag.toLowerCase();\n    return this.motifs.filter(motif =>\n      motif.tags.some(t => t.toLowerCase().includes(tagLower))\n    );\n  }\n\n  /**\n   * Find motifs by measure range\n   */\n  public byMeasureRange(minMeasures?: number, maxMeasures?: number): Motif[] {\n    return this.motifs.filter(motif => {\n      if (minMeasures !== undefined && motif.measures < minMeasures) {\n        return false;\n      }\n      if (maxMeasures !== undefined && motif.measures > maxMeasures) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  /**\n   * Comprehensive search with multiple criteria\n   */\n  public search(options: MotifSearchOptions): Motif[] {\n    let results = [...this.motifs];\n\n    if (options.artist) {\n      const artistLower = options.artist.toLowerCase();\n      results = results.filter(motif =>\n        motif.artist?.toLowerCase() === artistLower\n      );\n    }\n\n    if (options.instrument) {\n      const instrumentLower = options.instrument.toLowerCase();\n      results = results.filter(motif =>\n        motif.instrument.toLowerCase().includes(instrumentLower)\n      );\n    }\n\n    if (options.scale) {\n      const scaleLower = options.scale.toLowerCase();\n      results = results.filter(motif =>\n        motif.scale.toLowerCase() === scaleLower\n      );\n    }\n\n    if (options.tag) {\n      const tagLower = options.tag.toLowerCase();\n      results = results.filter(motif =>\n        motif.tags.some(t => t.toLowerCase().includes(tagLower))\n      );\n    }\n\n    if (options.minMeasures !== undefined) {\n      results = results.filter(motif => motif.measures >= options.minMeasures!);\n    }\n\n    if (options.maxMeasures !== undefined) {\n      results = results.filter(motif => motif.measures <= options.maxMeasures!);\n    }\n\n    return results;\n  }\n\n  /**\n   * Get random motif\n   */\n  public random(): Motif | undefined {\n    if (this.motifs.length === 0) return undefined;\n    const index = Math.floor(Math.random() * this.motifs.length);\n    return this.motifs[index];\n  }\n\n  /**\n   * Get random motifs matching criteria\n   */\n  public randomSearch(options: MotifSearchOptions, count: number = 1): Motif[] {\n    const candidates = this.search(options);\n    if (candidates.length === 0) return [];\n\n    const results: Motif[] = [];\n    const used = new Set<string>();\n\n    for (let i = 0; i < Math.min(count, candidates.length); i++) {\n      let motif: Motif;\n      do {\n        motif = candidates[Math.floor(Math.random() * candidates.length)]!;\n      } while (used.has(motif.id) && used.size < candidates.length);\n\n      if (!used.has(motif.id)) {\n        results.push(motif);\n        used.add(motif.id);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Find similar motifs based on musical characteristics\n   */\n  public findSimilar(targetMotif: Motif, threshold: number = 0.7): Motif[] {\n    return this.motifs.filter(motif => {\n      if (motif.id === targetMotif.id) return false;\n\n      let similarity = 0;\n      let factors = 0;\n\n      // Scale similarity\n      if (motif.scale === targetMotif.scale) {\n        similarity += 0.3;\n      }\n      factors += 0.3;\n\n      // Instrument similarity\n      if (motif.instrument === targetMotif.instrument) {\n        similarity += 0.2;\n      }\n      factors += 0.2;\n\n      // Measure similarity\n      const measureDiff = Math.abs(motif.measures - targetMotif.measures);\n      const measureSimilarity = Math.max(0, 1 - measureDiff / Math.max(motif.measures, targetMotif.measures));\n      similarity += measureSimilarity * 0.2;\n      factors += 0.2;\n\n      // Tag similarity\n      const commonTags = motif.tags.filter(tag => targetMotif.tags.includes(tag));\n      const tagSimilarity = commonTags.length / Math.max(motif.tags.length, targetMotif.tags.length, 1);\n      similarity += tagSimilarity * 0.3;\n      factors += 0.3;\n\n      return (similarity / factors) >= threshold;\n    });\n  }\n\n  /**\n   * Group motifs by a specific property\n   */\n  public groupBy(property: keyof Motif): Record<string, Motif[]> {\n    const groups: Record<string, Motif[]> = {};\n\n    for (const motif of this.motifs) {\n      const key = String(motif[property] || 'unknown');\n      if (!groups[key]) {\n        groups[key] = [];\n      }\n      groups[key]!.push(motif);\n    }\n\n    return groups;\n  }\n\n  /**\n   * Get statistics about the motif collection\n   */\n  public getStats(): {\n    total: number;\n    byInstrument: Record<string, number>;\n    byScale: Record<string, number>;\n    byArtist: Record<string, number>;\n    averageMeasures: number;\n    mostCommonTags: Array<{ tag: string; count: number }>;\n  } {\n    const byInstrument: Record<string, number> = {};\n    const byScale: Record<string, number> = {};\n    const byArtist: Record<string, number> = {};\n    const tagCounts: Record<string, number> = {};\n    let totalMeasures = 0;\n\n    for (const motif of this.motifs) {\n      // Instrument stats\n      byInstrument[motif.instrument] = (byInstrument[motif.instrument] || 0) + 1;\n\n      // Scale stats\n      byScale[motif.scale] = (byScale[motif.scale] || 0) + 1;\n\n      // Artist stats\n      if (motif.artist) {\n        byArtist[motif.artist] = (byArtist[motif.artist] || 0) + 1;\n      }\n\n      // Tag stats\n      for (const tag of motif.tags) {\n        tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n      }\n\n      totalMeasures += motif.measures;\n    }\n\n    const mostCommonTags = Object.entries(tagCounts)\n      .map(([tag, count]) => ({ tag, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    return {\n      total: this.motifs.length,\n      byInstrument,\n      byScale,\n      byArtist,\n      averageMeasures: this.motifs.length > 0 ? totalMeasures / this.motifs.length : 0,\n      mostCommonTags\n    };\n  }\n\n  /**\n   * Export motifs to JSON\n   */\n  public toJSON(): any[] {\n    return this.motifs.map(motif => ({ ...motif }));\n  }\n\n  /**\n   * Clear all motifs\n   */\n  public clear(): void {\n    this.motifs = [];\n  }\n\n  /**\n   * Clone the motif bank\n   */\n  public clone(): MotifBank {\n    const clonedMotifs = this.motifs.map(motif => ({\n      ...motif,\n      notes: motif.notes.map(note => ({ ...note })),\n      tags: [...motif.tags],\n      metadata: motif.metadata ? { ...motif.metadata } : undefined\n    }));\n    return new MotifBank(clonedMotifs);\n  }\n}","export class Matrix {\n  private data: number[][];\n  public readonly rows: number;\n  public readonly columns: number;\n\n  constructor(data: number[][] | number, columns?: number) {\n    if (typeof data === 'number') {\n      if (columns === undefined) {\n        throw new Error('Columns parameter required when creating matrix from dimensions');\n      }\n      this.rows = data;\n      this.columns = columns;\n      this.data = Array(this.rows).fill(0).map(() => Array(this.columns).fill(0));\n    } else {\n      this.data = data.map(row => [...row]);\n      this.rows = this.data.length;\n      this.columns = this.data[0]?.length || 0;\n    }\n  }\n\n  static zeros(rows: number, columns: number): Matrix {\n    return new Matrix(rows, columns);\n  }\n\n  static from2DArray(data: number[][]): Matrix {\n    return new Matrix(data);\n  }\n\n  get(row: number, column: number): number {\n    if (row < 0 || row >= this.rows || column < 0 || column >= this.columns) {\n      throw new Error(`Index out of bounds: (${row}, ${column})`);\n    }\n    return this.data[row][column];\n  }\n\n  set(row: number, column: number, value: number): void {\n    if (row < 0 || row >= this.rows || column < 0 || column >= this.columns) {\n      throw new Error(`Index out of bounds: (${row}, ${column})`);\n    }\n    this.data[row][column] = value;\n  }\n\n  getRow(row: number): number[] {\n    if (row < 0 || row >= this.rows) {\n      throw new Error(`Row index out of bounds: ${row}`);\n    }\n    return [...this.data[row]];\n  }\n\n  getColumn(column: number): number[] {\n    if (column < 0 || column >= this.columns) {\n      throw new Error(`Column index out of bounds: ${column}`);\n    }\n    return this.data.map(row => row[column]);\n  }\n\n  transpose(): Matrix {\n    const transposed = Array(this.columns).fill(0).map(() => Array(this.rows).fill(0));\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        transposed[j][i] = this.data[i][j];\n      }\n    }\n    return new Matrix(transposed);\n  }\n\n  clone(): Matrix {\n    return new Matrix(this.data);\n  }\n\n  toArray(): number[][] {\n    return this.data.map(row => [...row]);\n  }\n}\n\nexport function ensure2D(X: number[] | number[][]): Matrix {\n  if (Array.isArray(X[0])) {\n    return Matrix.from2DArray(X as number[][]);\n  } else {\n    return Matrix.from2DArray([(X as number[])]);\n  }\n}\n\nexport function choleskyDecomposition(matrix: Matrix): Matrix {\n  if (matrix.rows !== matrix.columns) {\n    throw new Error('Matrix must be square for Cholesky decomposition');\n  }\n\n  const n = matrix.rows;\n  const L = Matrix.zeros(n, n);\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <= i; j++) {\n      if (i === j) {\n        let sum = 0;\n        for (let k = 0; k < j; k++) {\n          sum += L.get(j, k) * L.get(j, k);\n        }\n        const diagonal = matrix.get(j, j) - sum;\n        if (diagonal <= 0) {\n          throw new Error(`Matrix is not positive definite at position (${j}, ${j})`);\n        }\n        L.set(j, j, Math.sqrt(diagonal));\n      } else {\n        let sum = 0;\n        for (let k = 0; k < j; k++) {\n          sum += L.get(i, k) * L.get(j, k);\n        }\n        L.set(i, j, (matrix.get(i, j) - sum) / L.get(j, j));\n      }\n    }\n  }\n\n  return L;\n}","import { Matrix, choleskyDecomposition, ensure2D } from '../../utils/matrix';\nimport { Kernel } from './kernels/base';\nimport { GaussianProcessOptions, PredictionResult } from '../../types/algorithms';\n\nexport class GaussianProcessRegressor {\n  private kernel: Kernel;\n  private alpha: number;\n  private XTrain?: Matrix;\n  private yTrain?: number[];\n  private L?: Matrix;\n  private alphaVector?: number[];\n\n  constructor(kernel: Kernel, options: GaussianProcessOptions = {}) {\n    this.kernel = kernel;\n    this.alpha = options.alpha || 1e-10;\n  }\n\n  public fit(X: number[] | number[][], y: number[]): void {\n    this.XTrain = ensure2D(X);\n    this.yTrain = [...y];\n\n    const K = this.kernel.call(this.XTrain);\n    \n    // Add noise to diagonal\n    for (let i = 0; i < K.rows; i++) {\n      K.set(i, i, K.get(i, i) + this.alpha);\n    }\n\n    try {\n      this.L = choleskyDecomposition(K);\n    } catch (error) {\n      throw new Error(`Failed to compute Cholesky decomposition: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    // Solve L * L^T * alpha = y using forward and back substitution\n    this.alphaVector = this.solveCholesky(this.L, this.yTrain);\n  }\n\n  public predict(X: number[] | number[][], returnStd = false): PredictionResult {\n    if (!this.XTrain || !this.yTrain || !this.L || !this.alphaVector) {\n      throw new Error('Model must be fitted before prediction');\n    }\n\n    const XTest = ensure2D(X);\n    const KStar = this.kernel.call(this.XTrain!, XTest);\n    \n    // Compute mean prediction\n    const mean = new Array(XTest.rows);\n    for (let i = 0; i < XTest.rows; i++) {\n      mean[i] = 0;\n      for (let j = 0; j < this.XTrain!.rows; j++) {\n        mean[i] += KStar.get(j, i) * this.alphaVector![j]!;\n      }\n    }\n\n    const result: PredictionResult = { mean };\n\n    if (returnStd) {\n      const std = this.computeStd(XTest, KStar);\n      result.std = std;\n    }\n\n    return result;\n  }\n\n  public sampleY(X: number[] | number[][], nSamples = 1): number[][] {\n    if (!this.XTrain || !this.yTrain || !this.L || !this.alphaVector) {\n      throw new Error('Model must be fitted before sampling');\n    }\n\n    const XTest = ensure2D(X);\n    const prediction = this.predict(X, true);\n    \n    if (!prediction.std) {\n      throw new Error('Standard deviation computation failed');\n    }\n\n    const samples: number[][] = [];\n    for (let i = 0; i < nSamples; i++) {\n      const sample = new Array(XTest.rows);\n      for (let j = 0; j < XTest.rows; j++) {\n        const mean = prediction.mean[j]!;\n        const std = prediction.std[j]!;\n        sample[j] = mean + std * this.sampleStandardNormal();\n      }\n      samples.push(sample);\n    }\n\n    return samples;\n  }\n\n  public logMarginalLikelihood(): number {\n    if (!this.XTrain || !this.yTrain || !this.L || !this.alphaVector) {\n      throw new Error('Model must be fitted before computing log marginal likelihood');\n    }\n\n    let logLikelihood = 0;\n    \n    // -0.5 * y^T * K^{-1} * y\n    for (let i = 0; i < this.yTrain!.length; i++) {\n      logLikelihood -= 0.5 * this.yTrain![i]! * this.alphaVector![i]!;\n    }\n    \n    // -0.5 * log|K|\n    for (let i = 0; i < this.L!.rows; i++) {\n      logLikelihood -= Math.log(this.L!.get(i, i));\n    }\n    \n    // -n/2 * log(2π)\n    logLikelihood -= 0.5 * this.yTrain.length * Math.log(2 * Math.PI);\n    \n    return logLikelihood;\n  }\n\n  private computeStd(XTest: Matrix, KStar: Matrix): number[] {\n    if (!this.L) {\n      throw new Error('Cholesky decomposition not available');\n    }\n\n    const std = new Array(XTest.rows);\n    \n    for (let i = 0; i < XTest.rows; i++) {\n      // K_** diagonal element\n      const kStarStar = this.kernel.compute(XTest.getRow(i), XTest.getRow(i));\n      \n      // Solve L * v = k_*\n      const kStarColumn = KStar.getColumn(i);\n      const v = this.forwardSubstitution(this.L, kStarColumn);\n      \n      // Compute v^T * v\n      let vTv = 0;\n      for (let j = 0; j < v.length; j++) {\n        vTv += v[j]! * v[j]!;\n      }\n      \n      const variance = kStarStar - vTv;\n      std[i] = Math.sqrt(Math.max(0, variance));\n    }\n    \n    return std;\n  }\n\n  private solveCholesky(L: Matrix, y: number[]): number[] {\n    // Forward substitution: L * z = y\n    const z = this.forwardSubstitution(L, y);\n    \n    // Back substitution: L^T * alpha = z\n    return this.backSubstitution(L, z);\n  }\n\n  private forwardSubstitution(L: Matrix, b: number[]): number[] {\n    const n = L.rows;\n    const x = new Array(n);\n    \n    for (let i = 0; i < n; i++) {\n      x[i] = b[i];\n      for (let j = 0; j < i; j++) {\n        x[i] -= L.get(i, j) * x[j];\n      }\n      x[i] /= L.get(i, i);\n    }\n    \n    return x;\n  }\n\n  private backSubstitution(L: Matrix, b: number[]): number[] {\n    const n = L.rows;\n    const x = new Array(n);\n    \n    for (let i = n - 1; i >= 0; i--) {\n      x[i] = b[i];\n      for (let j = i + 1; j < n; j++) {\n        x[i] -= L.get(j, i) * x[j];\n      }\n      x[i] /= L.get(i, i);\n    }\n    \n    return x;\n  }\n\n  private sampleStandardNormal(): number {\n    const u1 = Math.random();\n    const u2 = Math.random();\n    return Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n  }\n}","import { Matrix } from '../../../utils/matrix';\nimport { KernelParams } from '../../../types/algorithms';\n\nexport abstract class Kernel {\n  protected params: KernelParams;\n\n  constructor(params: KernelParams = {}) {\n    this.params = { ...params };\n  }\n\n  public call(X1: Matrix, X2?: Matrix): Matrix {\n    const X2_actual = X2 || X1;\n    const K = Matrix.zeros(X1.rows, X2_actual.rows);\n    \n    for (let i = 0; i < X1.rows; i++) {\n      for (let j = 0; j < X2_actual.rows; j++) {\n        K.set(i, j, this.compute(X1.getRow(i), X2_actual.getRow(j)));\n      }\n    }\n    \n    return K;\n  }\n\n  public abstract compute(x1: number[], x2: number[]): number;\n\n  public getParams(): KernelParams {\n    return { ...this.params };\n  }\n\n  public setParams(newParams: Partial<KernelParams>): void {\n    Object.assign(this.params, newParams);\n  }\n\n  protected euclideanDistance(x1: number[], x2: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < x1.length; i++) {\n      sum += Math.pow(x1[i]! - x2[i]!, 2);\n    }\n    return Math.sqrt(sum);\n  }\n\n  protected squaredEuclideanDistance(x1: number[], x2: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < x1.length; i++) {\n      sum += Math.pow(x1[i]! - x2[i]!, 2);\n    }\n    return sum;\n  }\n}","import { Kernel } from './base';\n\nexport class RBF extends Kernel {\n  public readonly lengthScale: number;\n  public readonly variance: number;\n\n  constructor(lengthScale = 1.0, variance = 1.0) {\n    super({ length_scale: lengthScale, variance });\n    this.lengthScale = lengthScale;\n    this.variance = variance;\n  }\n\n  public override compute(x1: number[], x2: number[]): number {\n    const distance = this.euclideanDistance(x1, x2);\n    return this.variance * Math.exp(-0.5 * Math.pow(distance / this.lengthScale, 2));\n  }\n\n  public override getParams(): { length_scale: number; variance: number } {\n    return {\n      length_scale: this.lengthScale,\n      variance: this.variance,\n    };\n  }\n}","import { Matrix, choleskyDecomposition } from '../../utils/matrix';\n\nexport function sampleNormal(mean = 0, std = 1): number {\n  const u1 = Math.random();\n  const u2 = Math.random();\n  const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n  return mean + std * z0;\n}\n\nexport function sampleMultivariateNormal(mean: number[], covariance: Matrix): number[] {\n  const n = mean.length;\n  const L = choleskyDecomposition(covariance);\n  const z = Array.from({ length: n }, () => sampleNormal());\n  \n  const sample = new Array(n);\n  for (let i = 0; i < n; i++) {\n    sample[i] = mean[i]!;\n    for (let j = 0; j <= i; j++) {\n      sample[i] += L.get(i, j) * z[j]!;\n    }\n  }\n  \n  return sample;\n}","import { Matrix } from '../../utils/matrix';\nimport { RBF } from './kernels/rbf';\nimport { sampleMultivariateNormal } from './utils';\n\nexport interface KernelGenerationOptions {\n  walkAround?: boolean;\n  length?: number;\n  lengthScale?: number;\n  amplitude?: number;\n  noiseLevel?: number;\n}\n\nexport class KernelGenerator {\n  private data: number[];\n  private lengthScale: number;\n  private amplitude: number;\n  private noiseLevel: number;\n  private walkAround: boolean;\n\n  constructor(\n    data: number[] = [],\n    lengthScale = 1.0,\n    amplitude = 1.0,\n    noiseLevel = 0.1,\n    walkAround = false\n  ) {\n    this.data = [...data];\n    this.lengthScale = lengthScale;\n    this.amplitude = amplitude;\n    this.noiseLevel = noiseLevel;\n    this.walkAround = walkAround;\n  }\n\n  public generate(options: KernelGenerationOptions = {}): number[] {\n    const length = options.length || 100;\n    const lengthScale = options.lengthScale || this.lengthScale;\n    const amplitude = options.amplitude || this.amplitude;\n    const noiseLevel = options.noiseLevel || this.noiseLevel;\n\n    // Create input points\n    const X = Array.from({ length }, (_, i) => [i]);\n    const XMatrix = new Matrix(X);\n\n    // Create RBF kernel\n    const kernel = new RBF(lengthScale, amplitude);\n    const K = kernel.call(XMatrix);\n\n    // Add noise to diagonal\n    for (let i = 0; i < K.rows; i++) {\n      K.set(i, i, K.get(i, i) + noiseLevel);\n    }\n\n    // Sample from multivariate normal\n    const mean = new Array(length).fill(0);\n    const sample = sampleMultivariateNormal(mean, K);\n\n    if (this.walkAround && this.data.length > 0) {\n      // Modify sample to walk around existing data\n      const dataLength = this.data.length;\n      for (let i = 0; i < Math.min(length, dataLength); i++) {\n        sample[i] = this.data[i]! + sample[i]! * 0.1;\n      }\n    }\n\n    return sample;\n  }\n\n  public rbfKernel(x1: number[], x2: number[]): number {\n    let distanceSquared = 0;\n    for (let i = 0; i < x1.length; i++) {\n      distanceSquared += Math.pow(x1[i]! - x2[i]!, 2);\n    }\n    return this.amplitude * Math.exp(-distanceSquared / (2 * Math.pow(this.lengthScale, 2)));\n  }\n\n  public setData(data: number[]): void {\n    this.data = [...data];\n  }\n\n  public getData(): number[] {\n    return [...this.data];\n  }\n\n  public setLengthScale(lengthScale: number): void {\n    this.lengthScale = lengthScale;\n  }\n\n  public setAmplitude(amplitude: number): void {\n    this.amplitude = amplitude;\n  }\n\n  public setNoiseLevel(noiseLevel: number): void {\n    this.noiseLevel = noiseLevel;\n  }\n}","import { Kernel } from './base';\n\nexport class RationalQuadratic extends Kernel {\n  public readonly lengthScale: number;\n  public readonly alpha: number;\n  public readonly variance: number;\n\n  constructor(lengthScale = 1.0, alpha = 1.0, variance = 1.0) {\n    super({ length_scale: lengthScale, alpha, variance });\n    this.lengthScale = lengthScale;\n    this.alpha = alpha;\n    this.variance = variance;\n  }\n\n  public override compute(x1: number[], x2: number[]): number {\n    const distanceSquared = this.squaredEuclideanDistance(x1, x2);\n    const term = 1 + distanceSquared / (2 * this.alpha * Math.pow(this.lengthScale, 2));\n    return this.variance * Math.pow(term, -this.alpha);\n  }\n\n  public override getParams(): { length_scale: number; alpha: number; variance: number } {\n    return {\n      length_scale: this.lengthScale,\n      alpha: this.alpha,\n      variance: this.variance,\n    };\n  }\n}","import { Kernel } from './base';\n\nexport class Periodic extends Kernel {\n  public readonly lengthScale: number;\n  public readonly periodicity: number;\n  public readonly variance: number;\n\n  constructor(lengthScale = 1.0, periodicity = 1.0, variance = 1.0) {\n    super({ length_scale: lengthScale, periodicity, variance });\n    this.lengthScale = lengthScale;\n    this.periodicity = periodicity;\n    this.variance = variance;\n  }\n\n  public override compute(x1: number[], x2: number[]): number {\n    const distance = this.euclideanDistance(x1, x2);\n    const sinTerm = Math.sin(Math.PI * distance / this.periodicity);\n    return this.variance * Math.exp(-2 * Math.pow(sinTerm / this.lengthScale, 2));\n  }\n\n  public override getParams(): { length_scale: number; periodicity: number; variance: number } {\n    return {\n      length_scale: this.lengthScale,\n      periodicity: this.periodicity,\n      variance: this.variance,\n    };\n  }\n}","import { CellularAutomataRule } from '../../types/algorithms';\nimport { Matrix2D } from '../../types/common';\n\nexport interface CellularAutomataOptions {\n  width?: number;\n  ruleNumber?: number;\n  initialState?: number[];\n}\n\nexport class CellularAutomata {\n  public readonly width: number;\n  public ruleNumber: number;\n  public initialState: number[];\n  public state: number[];\n  public rules: CellularAutomataRule;\n  private history: Matrix2D = [];\n\n  constructor(options: CellularAutomataOptions = {}) {\n    this.width = options.width || 51;\n    this.ruleNumber = options.ruleNumber || 30;\n    this.initialState = options.initialState || this.generateRandomInitialState();\n    this.state = [...this.initialState];\n    this.rules = this.loadRules(this.ruleNumber);\n  }\n\n  public generate(steps: number): Matrix2D {\n    this.history = [];\n    this.state = [...this.initialState];\n    \n    this.history.push([...this.state]);\n    \n    for (let step = 0; step < steps; step++) {\n      this.updateState();\n      this.history.push([...this.state]);\n    }\n    \n    return this.history;\n  }\n\n  public generate01(steps: number): Matrix2D {\n    const result = this.generate(steps);\n    return result.map(row => row.map(cell => cell > 0 ? 1 : 0));\n  }\n\n  public loadRules(ruleNumber: number): CellularAutomataRule {\n    const binary = ruleNumber.toString(2).padStart(8, '0');\n    const rules: CellularAutomataRule = {};\n    \n    // Map binary neighborhoods to rule outputs\n    const neighborhoods = ['111', '110', '101', '100', '011', '010', '001', '000'];\n    \n    for (let i = 0; i < 8; i++) {\n      rules[neighborhoods[i]!] = parseInt(binary[i]!, 10);\n    }\n    \n    return rules;\n  }\n\n  public updateState(): void {\n    const newState = new Array(this.width);\n    \n    for (let i = 0; i < this.width; i++) {\n      const left = this.state[(i - 1 + this.width) % this.width]!;\n      const center = this.state[i]!;\n      const right = this.state[(i + 1) % this.width]!;\n      \n      const neighborhood = `${left}${center}${right}`;\n      newState[i] = this.rules[neighborhood] || 0;\n    }\n    \n    this.state = newState;\n  }\n\n  public validateStrips(strips: Matrix2D): boolean {\n    if (!Array.isArray(strips) || strips.length === 0) {\n      return false;\n    }\n    \n    const width = strips[0]?.length;\n    if (!width) return false;\n    \n    return strips.every(strip => \n      Array.isArray(strip) && \n      strip.length === width &&\n      strip.every(cell => typeof cell === 'number' && (cell === 0 || cell === 1))\n    );\n  }\n\n  public validateValues(values: number[]): boolean {\n    return Array.isArray(values) && \n           values.length === this.width &&\n           values.every(val => typeof val === 'number' && (val === 0 || val === 1));\n  }\n\n  public setInitialState(state: number[]): void {\n    if (this.validateValues(state)) {\n      this.initialState = [...state];\n      this.state = [...state];\n    } else {\n      throw new Error('Invalid initial state');\n    }\n  }\n\n  public setRuleNumber(ruleNumber: number): void {\n    if (ruleNumber >= 0 && ruleNumber <= 255) {\n      (this as { ruleNumber: number }).ruleNumber = ruleNumber;\n      this.rules = this.loadRules(ruleNumber);\n    } else {\n      throw new Error('Rule number must be between 0 and 255');\n    }\n  }\n\n  public getHistory(): Matrix2D {\n    return this.history.map(row => [...row]);\n  }\n\n  public getCurrentState(): number[] {\n    return [...this.state];\n  }\n\n  private generateRandomInitialState(): number[] {\n    const state = new Array(this.width).fill(0);\n    // Single cell in center\n    state[Math.floor(this.width / 2)] = 1;\n    return state;\n  }\n\n  public generateRandomState(): number[] {\n    return Array.from({ length: this.width }, () => Math.random() > 0.5 ? 1 : 0);\n  }\n\n  public plot(): { data: Matrix2D; width: number; height: number } {\n    return {\n      data: this.getHistory(),\n      width: this.width,\n      height: this.history.length,\n    };\n  }\n\n  /**\n   * Create Observable Plot visualization of CA evolution\n   */\n  public plotEvolution(options?: any): ReturnType<typeof import('../../visualization/cellular-automata/CAVisualizer').CAVisualizer.plotEvolution> {\n    const { CAVisualizer } = require('../../visualization/cellular-automata/CAVisualizer');\n    return CAVisualizer.plotEvolution(this.getHistory(), options);\n  }\n\n  /**\n   * Create Observable Plot visualization of current generation\n   */\n  public plotGeneration(options?: any): ReturnType<typeof import('../../visualization/cellular-automata/CAVisualizer').CAVisualizer.plotGeneration> {\n    const { CAVisualizer } = require('../../visualization/cellular-automata/CAVisualizer');\n    return CAVisualizer.plotGeneration(this.getCurrentState(), options);\n  }\n\n  /**\n   * Create Observable Plot density visualization\n   */\n  public plotDensity(options?: any): ReturnType<typeof import('../../visualization/cellular-automata/CAVisualizer').CAVisualizer.plotDensity> {\n    const { CAVisualizer } = require('../../visualization/cellular-automata/CAVisualizer');\n    return CAVisualizer.plotDensity(this.getHistory(), options);\n  }\n}","import { PolyloopPoint, PolyloopLayer, PolyloopConfig, PolyloopTrigger } from '../../types/polyloop';\nimport { JMonSequence, JMonNote } from '../../types/jmon';\nimport { JMonConverter } from '../../io/jmon/conversion';\n\nexport class Polyloop {\n  private config: PolyloopConfig;\n  private currentTime: number = 0;\n  private rotationAngles: Map<string, number> = new Map();\n\n  constructor(config: PolyloopConfig) {\n    this.config = config;\n    // Initialize rotation angles for each layer\n    this.config.layers.forEach(layer => {\n      this.rotationAngles.set(layer.label, 0);\n    });\n  }\n\n  /**\n   * Create a simple polyloop layer from rhythmic pattern\n   */\n  public static fromRhythm(\n    durations: number[],\n    pitches: number[] = [60],\n    options: {\n      instrument?: string;\n      color?: string;\n      label?: string;\n      speed?: number;\n      radius?: number;\n    } = {}\n  ): PolyloopLayer {\n    const {\n      instrument = 'synth',\n      color = 'steelblue',\n      label = 'Polyloop',\n      speed = 1,\n      radius = 0.8\n    } = options;\n\n    const totalDuration = durations.reduce((sum, dur) => sum + dur, 0);\n    const points: PolyloopPoint[] = [];\n    \n    let currentAngle = 0;\n    durations.forEach((duration, index) => {\n      const angleStep = (duration / totalDuration) * 360;\n      \n      points.push({\n        angle: currentAngle,\n        radius,\n        active: duration > 0,\n        pitch: duration > 0 ? pitches[index % pitches.length] : undefined,\n        velocity: 0.8,\n        instrument\n      });\n      \n      currentAngle += angleStep;\n    });\n\n    return {\n      points,\n      color,\n      label,\n      instrument,\n      divisions: durations.length,\n      speed\n    };\n  }\n\n  /**\n   * Create polyloop layer from Euclidean rhythm\n   */\n  public static euclidean(\n    beats: number,\n    pulses: number,\n    pitches: number[] = [60],\n    options: {\n      instrument?: string;\n      color?: string;\n      label?: string;\n      speed?: number;\n      radius?: number;\n    } = {}\n  ): PolyloopLayer {\n    const {\n      instrument = 'synth',\n      color = 'steelblue', \n      label = `Euclidean ${pulses}/${beats}`,\n      speed = 1,\n      radius = 0.8\n    } = options;\n\n    // Generate Euclidean rhythm\n    const pattern = this.generateEuclideanRhythm(beats, pulses);\n    const points: PolyloopPoint[] = [];\n    \n    pattern.forEach((active, index) => {\n      const angle = (index / beats) * 360;\n      \n      points.push({\n        angle,\n        radius,\n        active,\n        pitch: active ? pitches[index % pitches.length] : undefined,\n        velocity: 0.8,\n        instrument\n      });\n    });\n\n    return {\n      points,\n      color,\n      label,\n      instrument,\n      divisions: beats,\n      speed\n    };\n  }\n\n  /**\n   * Generate Euclidean rhythm pattern\n   */\n  private static generateEuclideanRhythm(beats: number, pulses: number): boolean[] {\n    if (pulses >= beats) {\n      return Array(beats).fill(true);\n    }\n    \n    const pattern: boolean[] = Array(beats).fill(false);\n    const interval = beats / pulses;\n    \n    for (let i = 0; i < pulses; i++) {\n      const index = Math.round(i * interval) % beats;\n      pattern[index] = true;\n    }\n    \n    return pattern;\n  }\n\n  /**\n   * Create polyloop with mathematical function\n   */\n  public static fromFunction(\n    func: (angle: number) => number,\n    divisions: number = 16,\n    pitchRange: [number, number] = [60, 72],\n    options: {\n      instrument?: string;\n      color?: string;\n      label?: string;\n      speed?: number;\n      activeThreshold?: number;\n    } = {}\n  ): PolyloopLayer {\n    const {\n      instrument = 'synth',\n      color = 'purple',\n      label = 'Function Polyloop',\n      speed = 1,\n      activeThreshold = 0.5\n    } = options;\n\n    const points: PolyloopPoint[] = [];\n    const [minPitch, maxPitch] = pitchRange;\n    \n    for (let i = 0; i < divisions; i++) {\n      const angle = (i / divisions) * 360;\n      const angleRad = (angle * Math.PI) / 180;\n      const value = func(angleRad);\n      const normalizedValue = Math.abs(value) % 1;\n      \n      points.push({\n        angle,\n        radius: 0.3 + normalizedValue * 0.5, // Vary radius based on function\n        active: normalizedValue > activeThreshold,\n        pitch: Math.round(minPitch + normalizedValue * (maxPitch - minPitch)),\n        velocity: 0.5 + normalizedValue * 0.5,\n        instrument\n      });\n    }\n\n    return {\n      points,\n      color,\n      label,\n      instrument,\n      divisions,\n      speed\n    };\n  }\n\n  /**\n   * Advance time and calculate triggers\n   */\n  public step(deltaTime: number): PolyloopTrigger[] {\n    this.currentTime += deltaTime;\n    const triggers: PolyloopTrigger[] = [];\n    \n    this.config.layers.forEach(layer => {\n      const currentAngle = this.rotationAngles.get(layer.label) || 0;\n      const newAngle = (currentAngle + (deltaTime * layer.speed * 360)) % 360;\n      this.rotationAngles.set(layer.label, newAngle);\n      \n      // Check for triggers when the rotation line crosses points\n      layer.points.forEach(point => {\n        if (!point.active) return;\n        \n        const angleDiff = Math.abs(newAngle - point.angle);\n        const crossedPoint = angleDiff < (layer.speed * 360 * deltaTime) + 1; // Small tolerance\n        \n        if (crossedPoint) {\n          triggers.push({\n            time: this.currentTime,\n            layer: layer.label,\n            point,\n            angle: newAngle\n          });\n        }\n      });\n    });\n    \n    return triggers;\n  }\n\n  /**\n   * Generate a sequence of triggers for a given duration\n   */\n  public generateSequence(duration: number, stepsPerBeat: number = 16): PolyloopTrigger[] {\n    const stepSize = 1 / stepsPerBeat; // Duration of each step in beats\n    const totalSteps = Math.floor(duration / stepSize);\n    const allTriggers: PolyloopTrigger[] = [];\n    \n    this.currentTime = 0;\n    this.resetRotations();\n    \n    for (let step = 0; step < totalSteps; step++) {\n      const triggers = this.step(stepSize);\n      allTriggers.push(...triggers);\n    }\n    \n    return allTriggers;\n  }\n\n  /**\n   * Reset all rotation angles\n   */\n  public resetRotations(): void {\n    this.config.layers.forEach(layer => {\n      this.rotationAngles.set(layer.label, 0);\n    });\n    this.currentTime = 0;\n  }\n\n  /**\n   * Convert triggers to JMON sequences\n   */\n  public toJMonSequences(duration: number = 4): JMonSequence[] {\n    const triggers = this.generateSequence(duration);\n    const sequencesByLayer = new Map<string, PolyloopTrigger[]>();\n    \n    // Group triggers by layer\n    triggers.forEach(trigger => {\n      if (!sequencesByLayer.has(trigger.layer)) {\n        sequencesByLayer.set(trigger.layer, []);\n      }\n      sequencesByLayer.get(trigger.layer)!.push(trigger);\n    });\n    \n    // Convert each layer to JMON sequence\n    const sequences: JMonSequence[] = [];\n    \n    sequencesByLayer.forEach((layerTriggers, layerName) => {\n      const notes: JMonNote[] = layerTriggers.map(trigger => ({\n        note: JMonConverter.midiToNoteName(trigger.point.pitch || 60),\n        time: JMonConverter.timeToMusicalTime(trigger.time),\n        duration: '8n', // Default duration\n        velocity: trigger.point.velocity || 0.8\n      }));\n      \n      sequences.push({\n        label: layerName,\n        notes,\n        synth: {\n          type: 'Synth',\n          options: {\n            oscillator: { type: 'sine' },\n            envelope: { attack: 0.01, decay: 0.1, sustain: 0.3, release: 0.5 }\n          }\n        }\n      });\n    });\n    \n    return sequences;\n  }\n\n  /**\n   * Get current state for visualization\n   */\n  public getVisualizationState(): {\n    layers: PolyloopLayer[];\n    rotationAngles: Map<string, number>;\n    currentTime: number;\n  } {\n    return {\n      layers: this.config.layers,\n      rotationAngles: new Map(this.rotationAngles),\n      currentTime: this.currentTime\n    };\n  }\n\n  /**\n   * Add a new layer to the polyloop\n   */\n  public addLayer(layer: PolyloopLayer): void {\n    this.config.layers.push(layer);\n    this.rotationAngles.set(layer.label, 0);\n  }\n\n  /**\n   * Remove a layer from the polyloop\n   */\n  public removeLayer(label: string): boolean {\n    const index = this.config.layers.findIndex(layer => layer.label === label);\n    if (index !== -1) {\n      this.config.layers.splice(index, 1);\n      this.rotationAngles.delete(label);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Create Observable Plot visualization of the polyloop\n   */\n  public plot(options?: any): ReturnType<typeof import('../../visualization/polyloops/PolyloopVisualizer').PolyloopVisualizer.plotPolyloop> {\n    const { PolyloopVisualizer } = require('../../visualization/polyloops/PolyloopVisualizer');\n    return PolyloopVisualizer.plotPolyloop(this.config.layers, options);\n  }\n\n  /**\n   * Create Observable Plot timeline visualization\n   */\n  public plotTimeline(duration: number = 8, options?: any): ReturnType<typeof import('../../visualization/polyloops/PolyloopVisualizer').PolyloopVisualizer.plotTimeline> {\n    const { PolyloopVisualizer } = require('../../visualization/polyloops/PolyloopVisualizer');\n    return PolyloopVisualizer.plotTimeline(this.config.layers, duration, options);\n  }\n\n  /**\n   * Create animated visualization frames\n   */\n  public plotAnimated(numFrames: number = 12, options?: any): Array<ReturnType<typeof import('../../visualization/polyloops/PolyloopVisualizer').PolyloopVisualizer.plotPolyloop>> {\n    const { PolyloopVisualizer } = require('../../visualization/polyloops/PolyloopVisualizer');\n    return PolyloopVisualizer.plotAnimated(this.config.layers, numFrames, options);\n  }\n}","import { JMonNote } from '../types/jmon';\n\nexport interface AnalysisOptions {\n  scale?: number[];\n  weights?: number[];\n  sampleRate?: number;\n}\n\nexport interface AnalysisResult {\n  [metric: string]: number;\n}\n\n/**\n * Musical analysis tools inspired by the Python djalgo analysis module\n * Provides statistical and musical evaluation metrics for sequences\n */\nexport class MusicalAnalysis {\n\n  /**\n   * Calculate Gini coefficient for inequality measurement\n   */\n  public static gini(values: number[], weights?: number[]): number {\n    if (values.length === 0) return 0;\n    \n    const n = values.length;\n    const w = weights || Array(n).fill(1);\n    \n    // Sort values with corresponding weights\n    const pairs = values.map((v, i) => ({ value: v, weight: w[i] }))\n                        .sort((a, b) => a.value - b.value);\n    \n    const sortedValues = pairs.map(p => p.value);\n    const sortedWeights = pairs.map(p => p.weight);\n    \n    const totalWeight = sortedWeights.reduce((sum, w) => sum + w, 0);\n    let numerator = 0;\n    let denominator = 0;\n    \n    for (let i = 0; i < n; i++) {\n      const cumWeight = sortedWeights.slice(0, i + 1).reduce((sum, w) => sum + w, 0);\n      numerator += sortedWeights[i] * (2 * cumWeight - sortedWeights[i] - totalWeight) * sortedValues[i];\n      denominator += sortedWeights[i] * sortedValues[i] * totalWeight;\n    }\n    \n    return denominator === 0 ? 0 : numerator / denominator;\n  }\n\n  /**\n   * Calculate center of mass (balance point) of a sequence\n   */\n  public static balance(values: number[], weights?: number[]): number {\n    if (values.length === 0) return 0;\n    \n    const w = weights || Array(values.length).fill(1);\n    const weightedSum = values.reduce((sum, val, i) => sum + val * w[i], 0);\n    const totalWeight = w.reduce((sum, weight) => sum + weight, 0);\n    \n    return totalWeight === 0 ? 0 : weightedSum / totalWeight;\n  }\n\n  /**\n   * Calculate autocorrelation for pattern detection\n   */\n  public static autocorrelation(values: number[], maxLag?: number): number[] {\n    const n = values.length;\n    const lag = maxLag || Math.floor(n / 2);\n    const result: number[] = [];\n    \n    const mean = values.reduce((sum, val) => sum + val, 0) / n;\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / n;\n    \n    for (let k = 0; k <= lag; k++) {\n      let covariance = 0;\n      for (let i = 0; i < n - k; i++) {\n        covariance += (values[i] - mean) * (values[i + k] - mean);\n      }\n      covariance /= (n - k);\n      result.push(variance === 0 ? 0 : covariance / variance);\n    }\n    \n    return result;\n  }\n\n  /**\n   * Detect and score musical motifs\n   */\n  public static motif(values: number[], patternLength: number = 3): number {\n    if (values.length < patternLength * 2) return 0;\n    \n    const patterns = new Map<string, number>();\n    \n    for (let i = 0; i <= values.length - patternLength; i++) {\n      const pattern = values.slice(i, i + patternLength).join(',');\n      patterns.set(pattern, (patterns.get(pattern) || 0) + 1);\n    }\n    \n    const maxOccurrences = Math.max(...patterns.values());\n    const totalPatterns = patterns.size;\n    \n    return totalPatterns === 0 ? 0 : maxOccurrences / totalPatterns;\n  }\n\n  /**\n   * Calculate dissonance/scale conformity\n   */\n  public static dissonance(pitches: number[], scale: number[] = [0, 2, 4, 5, 7, 9, 11]): number {\n    if (pitches.length === 0) return 0;\n    \n    let conformingNotes = 0;\n    \n    for (const pitch of pitches) {\n      const pitchClass = ((pitch % 12) + 12) % 12;\n      if (scale.includes(pitchClass)) {\n        conformingNotes++;\n      }\n    }\n    \n    return 1 - (conformingNotes / pitches.length);\n  }\n\n  /**\n   * Calculate rhythmic fit to a grid\n   */\n  public static rhythmic(onsets: number[], gridDivision: number = 16): number {\n    if (onsets.length === 0) return 0;\n    \n    let gridAlignedCount = 0;\n    const tolerance = 0.1; // Allow slight timing variations\n    \n    for (const onset of onsets) {\n      const gridPosition = onset * gridDivision;\n      const nearestGrid = Math.round(gridPosition);\n      const deviation = Math.abs(gridPosition - nearestGrid);\n      \n      if (deviation <= tolerance) {\n        gridAlignedCount++;\n      }\n    }\n    \n    return gridAlignedCount / onsets.length;\n  }\n\n  /**\n   * Calculate Fibonacci/golden ratio index\n   */\n  public static fibonacciIndex(values: number[]): number {\n    if (values.length < 2) return 0;\n    \n    const goldenRatio = (1 + Math.sqrt(5)) / 2;\n    let fibonacciScore = 0;\n    \n    for (let i = 1; i < values.length; i++) {\n      if (values[i - 1] !== 0) {\n        const ratio = values[i] / values[i - 1];\n        const deviation = Math.abs(ratio - goldenRatio);\n        fibonacciScore += 1 / (1 + deviation);\n      }\n    }\n    \n    return fibonacciScore / (values.length - 1);\n  }\n\n  /**\n   * Calculate syncopation (off-beat emphasis)\n   */\n  public static syncopation(onsets: number[], beatDivision: number = 4): number {\n    if (onsets.length === 0) return 0;\n    \n    let syncopatedCount = 0;\n    \n    for (const onset of onsets) {\n      const beatPosition = (onset * beatDivision) % 1;\n      // Strong beats are at 0, 0.5; weak beats are at 0.25, 0.75\n      const isOffBeat = beatPosition > 0.2 && beatPosition < 0.8 && \n                       Math.abs(beatPosition - 0.5) > 0.2;\n      \n      if (isOffBeat) {\n        syncopatedCount++;\n      }\n    }\n    \n    return syncopatedCount / onsets.length;\n  }\n\n  /**\n   * Calculate contour entropy (melodic direction randomness)\n   */\n  public static contourEntropy(pitches: number[]): number {\n    if (pitches.length < 2) return 0;\n    \n    const directions: number[] = [];\n    \n    for (let i = 1; i < pitches.length; i++) {\n      const diff = pitches[i] - pitches[i - 1];\n      if (diff > 0) directions.push(1);      // Up\n      else if (diff < 0) directions.push(-1); // Down\n      else directions.push(0);                 // Same\n    }\n    \n    const counts = { up: 0, down: 0, same: 0 };\n    for (const dir of directions) {\n      if (dir > 0) counts.up++;\n      else if (dir < 0) counts.down++;\n      else counts.same++;\n    }\n    \n    const total = directions.length;\n    const probabilities = [counts.up / total, counts.down / total, counts.same / total]\n                         .filter(p => p > 0);\n    \n    return -probabilities.reduce((entropy, p) => entropy + p * Math.log2(p), 0);\n  }\n\n  /**\n   * Calculate interval variance (pitch stability)\n   */\n  public static intervalVariance(pitches: number[]): number {\n    if (pitches.length < 2) return 0;\n    \n    const intervals: number[] = [];\n    for (let i = 1; i < pitches.length; i++) {\n      intervals.push(Math.abs(pitches[i] - pitches[i - 1]));\n    }\n    \n    const mean = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;\n    const variance = intervals.reduce((sum, interval) => sum + Math.pow(interval - mean, 2), 0) / intervals.length;\n    \n    return variance;\n  }\n\n  /**\n   * Calculate note density (notes per unit time)\n   */\n  public static density(notes: JMonNote[], timeWindow: number = 1): number {\n    if (notes.length === 0) return 0;\n    \n    // Convert time to numeric for calculation\n    const numericTimes = notes.map(note => {\n      if (typeof note.time === 'string') {\n        // Simple conversion for demonstration - would need proper time parsing\n        return parseFloat(note.time) || 0;\n      }\n      return note.time as number;\n    });\n    \n    const minTime = Math.min(...numericTimes);\n    const maxTime = Math.max(...numericTimes);\n    const totalTime = maxTime - minTime || 1;\n    \n    return notes.length / (totalTime / timeWindow);\n  }\n\n  /**\n   * Calculate gap variance (timing consistency)\n   */\n  public static gapVariance(onsets: number[]): number {\n    if (onsets.length < 2) return 0;\n    \n    const gaps: number[] = [];\n    for (let i = 1; i < onsets.length; i++) {\n      gaps.push(onsets[i] - onsets[i - 1]);\n    }\n    \n    const mean = gaps.reduce((sum, gap) => sum + gap, 0) / gaps.length;\n    const variance = gaps.reduce((sum, gap) => sum + Math.pow(gap - mean, 2), 0) / gaps.length;\n    \n    return variance;\n  }\n\n  /**\n   * Comprehensive analysis of a musical sequence\n   */\n  public static analyze(notes: JMonNote[], options: AnalysisOptions = {}): AnalysisResult {\n    const { scale = [0, 2, 4, 5, 7, 9, 11] } = options;\n    \n    // Extract pitch and timing data\n    const pitches = notes.map(note => {\n      if (typeof note.note === 'number') return note.note;\n      if (typeof note.note === 'string') {\n        // Simple MIDI note conversion - would need proper note parsing\n        return 60; // Default to middle C\n      }\n      return Array.isArray(note.note) ? (note.note[0] as number) : 60;\n    });\n    \n    const onsets = notes.map(note => {\n      if (typeof note.time === 'number') return note.time;\n      return parseFloat(note.time as string) || 0;\n    });\n    \n    return {\n      gini: this.gini(pitches),\n      balance: this.balance(pitches),\n      motif: this.motif(pitches),\n      dissonance: this.dissonance(pitches, scale),\n      rhythmic: this.rhythmic(onsets),\n      fibonacciIndex: this.fibonacciIndex(pitches),\n      syncopation: this.syncopation(onsets),\n      contourEntropy: this.contourEntropy(pitches),\n      intervalVariance: this.intervalVariance(pitches),\n      density: this.density(notes),\n      gapVariance: this.gapVariance(onsets)\n    };\n  }\n}","import { JMonNote } from '../../types/jmon';\nimport { MusicalAnalysis } from '../../analysis/MusicalAnalysis';\n\nexport interface GeneticOptions {\n  populationSize?: number;\n  generations?: number;\n  mutationRate?: number;\n  crossoverRate?: number;\n  elitismRate?: number;\n  fitnessWeights?: FitnessWeights;\n  scale?: number[];\n  durations?: string[];\n  lengthRange?: [number, number];\n}\n\nexport interface FitnessWeights {\n  gini?: number;\n  balance?: number;\n  motif?: number;\n  dissonance?: number;\n  rhythmic?: number;\n  [key: string]: number | undefined;\n}\n\nexport interface Individual {\n  genes: JMonNote[];\n  fitness: number;\n  age: number;\n}\n\n/**\n * Genetic Algorithm for evolving musical phrases\n * Based on the Python djalgo genetic module (Darwin class)\n */\nexport class GeneticAlgorithm {\n  private options: Required<GeneticOptions>;\n  private population: Individual[];\n  private generation: number;\n  private bestFitness: number;\n  private bestIndividual: Individual | null;\n\n  constructor(options: GeneticOptions = {}) {\n    this.options = {\n      populationSize: options.populationSize || 50,\n      generations: options.generations || 100,\n      mutationRate: options.mutationRate || 0.1,\n      crossoverRate: options.crossoverRate || 0.8,\n      elitismRate: options.elitismRate || 0.1,\n      fitnessWeights: {\n        gini: 0.2,\n        balance: 0.15,\n        motif: 0.25,\n        dissonance: 0.2,\n        rhythmic: 0.2,\n        ...options.fitnessWeights\n      },\n      scale: options.scale || [0, 2, 4, 5, 7, 9, 11], // C major\n      durations: options.durations || ['4n', '8n', '2n', '16n'],\n      lengthRange: options.lengthRange || [8, 16]\n    };\n\n    this.population = [];\n    this.generation = 0;\n    this.bestFitness = -Infinity;\n    this.bestIndividual = null;\n  }\n\n  /**\n   * Initialize random population\n   */\n  public initializePopulation(): void {\n    this.population = [];\n    \n    for (let i = 0; i < this.options.populationSize; i++) {\n      const individual = this.createRandomIndividual();\n      this.population.push(individual);\n    }\n    \n    this.evaluatePopulation();\n  }\n\n  /**\n   * Run the genetic algorithm\n   */\n  public evolve(): Individual {\n    this.initializePopulation();\n    \n    for (let gen = 0; gen < this.options.generations; gen++) {\n      this.generation = gen;\n      \n      // Selection and reproduction\n      const newPopulation = this.createNextGeneration();\n      \n      // Replace population\n      this.population = newPopulation;\n      \n      // Evaluate new population\n      this.evaluatePopulation();\n      \n      // Track best individual\n      const currentBest = this.getBestIndividual();\n      if (currentBest.fitness > this.bestFitness) {\n        this.bestFitness = currentBest.fitness;\n        this.bestIndividual = { ...currentBest };\n      }\n    }\n    \n    return this.getBestIndividual();\n  }\n\n  /**\n   * Create a random individual\n   */\n  private createRandomIndividual(): Individual {\n    const length = Math.floor(Math.random() * (this.options.lengthRange[1] - this.options.lengthRange[0] + 1)) + this.options.lengthRange[0];\n    const genes: JMonNote[] = [];\n    \n    let currentTime = 0;\n    \n    for (let i = 0; i < length; i++) {\n      const pitch = this.randomPitch();\n      const duration = this.randomDuration();\n      \n      genes.push({\n        note: pitch,\n        time: `${Math.floor(currentTime)}:${Math.floor((currentTime % 1) * 4)}:0`, // Simple time format\n        duration: duration,\n        velocity: Math.random() * 0.5 + 0.5 // 0.5 to 1.0\n      });\n      \n      // Advance time (simplified duration parsing)\n      currentTime += this.parseDuration(duration);\n    }\n    \n    return {\n      genes,\n      fitness: 0,\n      age: 0\n    };\n  }\n\n  /**\n   * Generate random pitch from scale\n   */\n  private randomPitch(): number {\n    const octave = Math.floor(Math.random() * 3) + 4; // Octaves 4-6\n    const scaleNote = this.options.scale[Math.floor(Math.random() * this.options.scale.length)];\n    return 12 * octave + scaleNote;\n  }\n\n  /**\n   * Generate random duration\n   */\n  private randomDuration(): string {\n    return this.options.durations[Math.floor(Math.random() * this.options.durations.length)];\n  }\n\n  /**\n   * Parse duration to numeric value (simplified)\n   */\n  private parseDuration(duration: string): number {\n    const durationMap: Record<string, number> = {\n      '1n': 4,\n      '2n': 2,\n      '4n': 1,\n      '8n': 0.5,\n      '16n': 0.25,\n      '32n': 0.125\n    };\n    return durationMap[duration] || 1;\n  }\n\n  /**\n   * Evaluate fitness for all individuals\n   */\n  private evaluatePopulation(): void {\n    for (const individual of this.population) {\n      individual.fitness = this.calculateFitness(individual.genes);\n    }\n    \n    // Sort by fitness (descending)\n    this.population.sort((a, b) => b.fitness - a.fitness);\n  }\n\n  /**\n   * Calculate fitness using weighted musical analysis metrics\n   */\n  private calculateFitness(genes: JMonNote[]): number {\n    const analysis = MusicalAnalysis.analyze(genes, { scale: this.options.scale });\n    let fitness = 0;\n    \n    const weights = this.options.fitnessWeights;\n    \n    // Combine weighted metrics\n    fitness += (weights.gini || 0) * (1 - analysis.gini); // Lower gini is better (more equal)\n    fitness += (weights.balance || 0) * (1 - Math.abs(analysis.balance - 60) / 60); // Closer to middle C\n    fitness += (weights.motif || 0) * analysis.motif;\n    fitness += (weights.dissonance || 0) * (1 - analysis.dissonance); // Lower dissonance is better\n    fitness += (weights.rhythmic || 0) * analysis.rhythmic;\n    \n    // Additional penalties/bonuses\n    const length = genes.length;\n    if (length < this.options.lengthRange[0] || length > this.options.lengthRange[1]) {\n      fitness *= 0.5; // Penalty for wrong length\n    }\n    \n    return Math.max(0, fitness); // Ensure non-negative\n  }\n\n  /**\n   * Create next generation through selection, crossover, and mutation\n   */\n  private createNextGeneration(): Individual[] {\n    const newPopulation: Individual[] = [];\n    const eliteCount = Math.floor(this.options.populationSize * this.options.elitismRate);\n    \n    // Elitism - keep best individuals\n    for (let i = 0; i < eliteCount; i++) {\n      const elite = { ...this.population[i] };\n      elite.age++;\n      newPopulation.push(elite);\n    }\n    \n    // Generate offspring\n    while (newPopulation.length < this.options.populationSize) {\n      const parent1 = this.selectParent();\n      const parent2 = this.selectParent();\n      \n      let offspring1, offspring2;\n      \n      if (Math.random() < this.options.crossoverRate) {\n        [offspring1, offspring2] = this.crossover(parent1, parent2);\n      } else {\n        offspring1 = { ...parent1 };\n        offspring2 = { ...parent2 };\n      }\n      \n      // Mutation\n      if (Math.random() < this.options.mutationRate) {\n        this.mutate(offspring1);\n      }\n      if (Math.random() < this.options.mutationRate) {\n        this.mutate(offspring2);\n      }\n      \n      offspring1.age = 0;\n      offspring2.age = 0;\n      \n      newPopulation.push(offspring1);\n      if (newPopulation.length < this.options.populationSize) {\n        newPopulation.push(offspring2);\n      }\n    }\n    \n    return newPopulation;\n  }\n\n  /**\n   * Tournament selection\n   */\n  private selectParent(): Individual {\n    const tournamentSize = 3;\n    const tournament: Individual[] = [];\n    \n    for (let i = 0; i < tournamentSize; i++) {\n      const randomIndex = Math.floor(Math.random() * this.population.length);\n      tournament.push(this.population[randomIndex]);\n    }\n    \n    tournament.sort((a, b) => b.fitness - a.fitness);\n    return { ...tournament[0] };\n  }\n\n  /**\n   * Single-point crossover\n   */\n  private crossover(parent1: Individual, parent2: Individual): [Individual, Individual] {\n    const minLength = Math.min(parent1.genes.length, parent2.genes.length);\n    const crossoverPoint = Math.floor(Math.random() * minLength);\n    \n    const offspring1: Individual = {\n      genes: [\n        ...parent1.genes.slice(0, crossoverPoint),\n        ...parent2.genes.slice(crossoverPoint)\n      ],\n      fitness: 0,\n      age: 0\n    };\n    \n    const offspring2: Individual = {\n      genes: [\n        ...parent2.genes.slice(0, crossoverPoint),\n        ...parent1.genes.slice(crossoverPoint)\n      ],\n      fitness: 0,\n      age: 0\n    };\n    \n    return [offspring1, offspring2];\n  }\n\n  /**\n   * Mutate an individual\n   */\n  private mutate(individual: Individual): void {\n    const genes = individual.genes;\n    const mutationType = Math.random();\n    \n    if (mutationType < 0.3) {\n      // Pitch mutation\n      const index = Math.floor(Math.random() * genes.length);\n      genes[index].note = this.randomPitch();\n    } else if (mutationType < 0.6) {\n      // Duration mutation\n      const index = Math.floor(Math.random() * genes.length);\n      genes[index].duration = this.randomDuration();\n    } else if (mutationType < 0.8) {\n      // Velocity mutation\n      const index = Math.floor(Math.random() * genes.length);\n      genes[index].velocity = Math.random() * 0.5 + 0.5;\n    } else {\n      // Structure mutation (add/remove note)\n      if (Math.random() < 0.5 && genes.length < this.options.lengthRange[1]) {\n        // Add note\n        const insertIndex = Math.floor(Math.random() * (genes.length + 1));\n        const newNote: JMonNote = {\n          note: this.randomPitch(),\n          time: '0:0:0', // Will be recalculated\n          duration: this.randomDuration(),\n          velocity: Math.random() * 0.5 + 0.5\n        };\n        genes.splice(insertIndex, 0, newNote);\n      } else if (genes.length > this.options.lengthRange[0]) {\n        // Remove note\n        const removeIndex = Math.floor(Math.random() * genes.length);\n        genes.splice(removeIndex, 1);\n      }\n    }\n    \n    // Recalculate timing\n    this.recalculateTiming(individual);\n  }\n\n  /**\n   * Recalculate note timing after mutations\n   */\n  private recalculateTiming(individual: Individual): void {\n    let currentTime = 0;\n    \n    for (const note of individual.genes) {\n      note.time = `${Math.floor(currentTime)}:${Math.floor((currentTime % 1) * 4)}:0`;\n      currentTime += this.parseDuration(note.duration as string);\n    }\n  }\n\n  /**\n   * Get the best individual from current population\n   */\n  public getBestIndividual(): Individual {\n    return { ...this.population[0] };\n  }\n\n  /**\n   * Get population statistics\n   */\n  public getStatistics() {\n    const fitnesses = this.population.map(ind => ind.fitness);\n    const avgFitness = fitnesses.reduce((sum, f) => sum + f, 0) / fitnesses.length;\n    const maxFitness = Math.max(...fitnesses);\n    const minFitness = Math.min(...fitnesses);\n    \n    return {\n      generation: this.generation,\n      avgFitness,\n      maxFitness,\n      minFitness,\n      bestAllTime: this.bestFitness,\n      populationSize: this.population.length\n    };\n  }\n\n  /**\n   * Set custom fitness function\n   */\n  public setCustomFitness(fitnessFunction: (genes: JMonNote[]) => number): void {\n    this.calculateFitness = fitnessFunction;\n  }\n}","export interface WalkOptions {\n  length?: number;\n  dimensions?: number;\n  stepSize?: number;\n  bounds?: [number, number];\n  branchProbability?: number;\n  mergeProbability?: number;\n  attractorStrength?: number;\n  attractorPosition?: number[];\n}\n\nexport interface WalkState {\n  position: number[];\n  velocity: number[];\n  branches: WalkState[];\n  age: number;\n  active: boolean;\n}\n\n/**\n * Multi-dimensional random walk generator with branching and merging\n * Based on the Python djalgo walk module (Chain class)\n */\nexport class RandomWalk {\n  private options: Required<WalkOptions>;\n  private walkers: WalkState[];\n  private history: number[][];\n\n  constructor(options: WalkOptions = {}) {\n    this.options = {\n      length: options.length || 100,\n      dimensions: options.dimensions || 1,\n      stepSize: options.stepSize || 1,\n      bounds: options.bounds || [-100, 100],\n      branchProbability: options.branchProbability || 0.05,\n      mergeProbability: options.mergeProbability || 0.02,\n      attractorStrength: options.attractorStrength || 0,\n      attractorPosition: options.attractorPosition || Array(options.dimensions || 1).fill(0)\n    };\n\n    this.walkers = [];\n    this.history = [];\n  }\n\n  /**\n   * Generate random walk sequence\n   */\n  public generate(startPosition?: number[]): number[][] {\n    this.initialize(startPosition);\n    this.history = [];\n\n    for (let step = 0; step < this.options.length; step++) {\n      this.updateWalkers();\n      this.recordState();\n      this.handleBranching();\n      this.handleMerging();\n    }\n\n    return this.history;\n  }\n\n  /**\n   * Initialize walker(s)\n   */\n  private initialize(startPosition?: number[]): void {\n    const initialPosition = startPosition || Array(this.options.dimensions).fill(0);\n    \n    this.walkers = [{\n      position: [...initialPosition],\n      velocity: Array(this.options.dimensions).fill(0),\n      branches: [],\n      age: 0,\n      active: true\n    }];\n  }\n\n  /**\n   * Update all active walkers\n   */\n  private updateWalkers(): void {\n    for (const walker of this.walkers) {\n      if (!walker.active) continue;\n\n      // Random step in each dimension\n      for (let dim = 0; dim < this.options.dimensions; dim++) {\n        const randomStep = (Math.random() - 0.5) * 2 * this.options.stepSize;\n        \n        // Apply attractor force if enabled\n        let attractorForce = 0;\n        if (this.options.attractorStrength > 0) {\n          const distance = walker.position[dim] - this.options.attractorPosition[dim];\n          attractorForce = -this.options.attractorStrength * distance;\n        }\n        \n        // Update velocity and position\n        walker.velocity[dim] = walker.velocity[dim] * 0.9 + randomStep + attractorForce;\n        walker.position[dim] += walker.velocity[dim];\n        \n        // Apply bounds\n        if (walker.position[dim] < this.options.bounds[0]) {\n          walker.position[dim] = this.options.bounds[0];\n          walker.velocity[dim] *= -0.5; // Bounce with damping\n        } else if (walker.position[dim] > this.options.bounds[1]) {\n          walker.position[dim] = this.options.bounds[1];\n          walker.velocity[dim] *= -0.5;\n        }\n      }\n\n      walker.age++;\n    }\n  }\n\n  /**\n   * Record current state of all walkers\n   */\n  private recordState(): void {\n    const activeWalkers = this.walkers.filter(w => w.active);\n    \n    if (activeWalkers.length > 0) {\n      // Average position if multiple walkers, or just use the primary walker\n      const avgPosition: number[] = Array(this.options.dimensions).fill(0);\n      \n      for (const walker of activeWalkers) {\n        for (let dim = 0; dim < this.options.dimensions; dim++) {\n          avgPosition[dim] += walker.position[dim];\n        }\n      }\n      \n      for (let dim = 0; dim < this.options.dimensions; dim++) {\n        avgPosition[dim] /= activeWalkers.length;\n      }\n      \n      this.history.push([...avgPosition]);\n    }\n  }\n\n  /**\n   * Handle branching (walker splitting)\n   */\n  private handleBranching(): void {\n    const newBranches: WalkState[] = [];\n    \n    for (const walker of this.walkers) {\n      if (!walker.active) continue;\n      \n      if (Math.random() < this.options.branchProbability) {\n        // Create a new branch\n        const branch: WalkState = {\n          position: [...walker.position],\n          velocity: walker.velocity.map(v => v + (Math.random() - 0.5) * this.options.stepSize),\n          branches: [],\n          age: 0,\n          active: true\n        };\n        \n        newBranches.push(branch);\n        walker.branches.push(branch);\n      }\n    }\n    \n    this.walkers.push(...newBranches);\n  }\n\n  /**\n   * Handle merging (walker combining)\n   */\n  private handleMerging(): void {\n    if (this.walkers.length <= 1) return;\n    \n    const activeWalkers = this.walkers.filter(w => w.active);\n    const mergeThreshold = this.options.stepSize * 2;\n    \n    for (let i = 0; i < activeWalkers.length; i++) {\n      for (let j = i + 1; j < activeWalkers.length; j++) {\n        if (Math.random() < this.options.mergeProbability) {\n          const distance = this.calculateDistance(activeWalkers[i].position, activeWalkers[j].position);\n          \n          if (distance < mergeThreshold) {\n            // Merge walkers - average their properties\n            for (let dim = 0; dim < this.options.dimensions; dim++) {\n              activeWalkers[i].position[dim] = (activeWalkers[i].position[dim] + activeWalkers[j].position[dim]) / 2;\n              activeWalkers[i].velocity[dim] = (activeWalkers[i].velocity[dim] + activeWalkers[j].velocity[dim]) / 2;\n            }\n            \n            activeWalkers[j].active = false;\n          }\n        }\n      }\n    }\n    \n    // Remove inactive walkers\n    this.walkers = this.walkers.filter(w => w.active);\n  }\n\n  /**\n   * Calculate Euclidean distance between two positions\n   */\n  private calculateDistance(pos1: number[], pos2: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < pos1.length; i++) {\n      sum += Math.pow(pos1[i] - pos2[i], 2);\n    }\n    return Math.sqrt(sum);\n  }\n\n  /**\n   * Get 1D projection of multi-dimensional walk\n   */\n  public getProjection(dimension: number = 0): number[] {\n    return this.history.map(state => state[dimension] || 0);\n  }\n\n  /**\n   * Map walk to musical scale\n   */\n  public mapToScale(dimension: number = 0, scale: number[] = [0, 2, 4, 5, 7, 9, 11], octaveRange: number = 3): number[] {\n    const projection = this.getProjection(dimension);\n    if (projection.length === 0) return [];\n    \n    const minVal = Math.min(...projection);\n    const maxVal = Math.max(...projection);\n    const range = maxVal - minVal || 1;\n    \n    return projection.map(value => {\n      const normalized = (value - minVal) / range;\n      const scaleIndex = Math.floor(normalized * scale.length * octaveRange);\n      const octave = Math.floor(scaleIndex / scale.length);\n      const noteIndex = scaleIndex % scale.length;\n      \n      return 60 + octave * 12 + scale[noteIndex];\n    });\n  }\n\n  /**\n   * Map walk to rhythmic durations\n   */\n  public mapToRhythm(dimension: number = 0, durations: number[] = [0.25, 0.5, 1, 2]): number[] {\n    const projection = this.getProjection(dimension);\n    if (projection.length === 0) return [];\n    \n    const minVal = Math.min(...projection);\n    const maxVal = Math.max(...projection);\n    const range = maxVal - minVal || 1;\n    \n    return projection.map(value => {\n      const normalized = (value - minVal) / range;\n      const durationIndex = Math.floor(normalized * durations.length);\n      const clampedIndex = Math.max(0, Math.min(durationIndex, durations.length - 1));\n      return durations[clampedIndex];\n    });\n  }\n\n  /**\n   * Map walk to velocities\n   */\n  public mapToVelocity(dimension: number = 0, minVel: number = 0.3, maxVel: number = 1.0): number[] {\n    const projection = this.getProjection(dimension);\n    if (projection.length === 0) return [];\n    \n    const minVal = Math.min(...projection);\n    const maxVal = Math.max(...projection);\n    const range = maxVal - minVal || 1;\n    \n    return projection.map(value => {\n      const normalized = (value - minVal) / range;\n      return minVel + normalized * (maxVel - minVel);\n    });\n  }\n\n  /**\n   * Generate correlated walk (walk that follows another walk with some correlation)\n   */\n  public generateCorrelated(targetWalk: number[], correlation: number = 0.5, dimension: number = 0): number[] {\n    if (targetWalk.length === 0) return [];\n    \n    const correlatedWalk: number[] = [];\n    let position = 0;\n    \n    for (let i = 0; i < targetWalk.length; i++) {\n      const randomStep = (Math.random() - 0.5) * 2 * this.options.stepSize;\n      const correlatedStep = correlation * (targetWalk[i] - position);\n      \n      position += randomStep + correlatedStep;\n      \n      // Apply bounds\n      position = Math.max(this.options.bounds[0], Math.min(this.options.bounds[1], position));\n      \n      correlatedWalk.push(position);\n    }\n    \n    return correlatedWalk;\n  }\n\n  /**\n   * Analyze walk properties\n   */\n  public analyze(): {\n    meanDisplacement: number;\n    meanSquaredDisplacement: number;\n    totalDistance: number;\n    fractalDimension: number;\n  } {\n    if (this.history.length < 2) {\n      return {\n        meanDisplacement: 0,\n        meanSquaredDisplacement: 0,\n        totalDistance: 0,\n        fractalDimension: 0\n      };\n    }\n    \n    const projection = this.getProjection(0);\n    const startPos = projection[0];\n    const endPos = projection[projection.length - 1];\n    \n    // Mean displacement\n    const meanDisplacement = Math.abs(endPos - startPos);\n    \n    // Mean squared displacement\n    const squaredDisplacements = projection.map(pos => Math.pow(pos - startPos, 2));\n    const meanSquaredDisplacement = squaredDisplacements.reduce((sum, sq) => sum + sq, 0) / squaredDisplacements.length;\n    \n    // Total distance traveled\n    let totalDistance = 0;\n    for (let i = 1; i < projection.length; i++) {\n      totalDistance += Math.abs(projection[i] - projection[i - 1]);\n    }\n    \n    // Rough fractal dimension estimate (box-counting approximation)\n    const fractalDimension = totalDistance > 0 ? Math.log(totalDistance) / Math.log(projection.length) : 0;\n    \n    return {\n      meanDisplacement,\n      meanSquaredDisplacement,\n      totalDistance,\n      fractalDimension\n    };\n  }\n\n  /**\n   * Get current walker states\n   */\n  public getWalkerStates(): WalkState[] {\n    return this.walkers.map(walker => ({ ...walker }));\n  }\n\n  /**\n   * Reset the walk generator\n   */\n  public reset(): void {\n    this.walkers = [];\n    this.history = [];\n  }\n}","export interface MandelbrotOptions {\n  width?: number;\n  height?: number;\n  maxIterations?: number;\n  xMin?: number;\n  xMax?: number;\n  yMin?: number;\n  yMax?: number;\n}\n\nexport interface ComplexPoint {\n  real: number;\n  imaginary: number;\n}\n\n/**\n * Mandelbrot set fractal generator for musical composition\n * Based on the Python djalgo fractal module\n */\nexport class Mandelbrot {\n  private width: number;\n  private height: number;\n  private maxIterations: number;\n  private xMin: number;\n  private xMax: number;\n  private yMin: number;\n  private yMax: number;\n\n  constructor(options: MandelbrotOptions = {}) {\n    this.width = options.width || 100;\n    this.height = options.height || 100;\n    this.maxIterations = options.maxIterations || 100;\n    this.xMin = options.xMin || -2.5;\n    this.xMax = options.xMax || 1.5;\n    this.yMin = options.yMin || -2.0;\n    this.yMax = options.yMax || 2.0;\n  }\n\n  /**\n   * Generate Mandelbrot set data\n   */\n  public generate(): number[][] {\n    const data: number[][] = [];\n    \n    for (let y = 0; y < this.height; y++) {\n      const row: number[] = [];\n      for (let x = 0; x < this.width; x++) {\n        const real = this.xMin + (x / this.width) * (this.xMax - this.xMin);\n        const imaginary = this.yMin + (y / this.height) * (this.yMax - this.yMin);\n        \n        const iterations = this.mandelbrotIterations({ real, imaginary });\n        row.push(iterations);\n      }\n      data.push(row);\n    }\n    \n    return data;\n  }\n\n  /**\n   * Extract sequence from Mandelbrot data using various methods\n   */\n  public extractSequence(method: 'diagonal' | 'border' | 'spiral' | 'column' | 'row' = 'diagonal', index: number = 0): number[] {\n    const data = this.generate();\n    \n    switch (method) {\n      case 'diagonal':\n        return this.extractDiagonal(data);\n      \n      case 'border':\n        return this.extractBorder(data);\n      \n      case 'spiral':\n        return this.extractSpiral(data);\n      \n      case 'column':\n        return this.extractColumn(data, index);\n      \n      case 'row':\n        return this.extractRow(data, index);\n      \n      default:\n        return this.extractDiagonal(data);\n    }\n  }\n\n  /**\n   * Calculate Mandelbrot iterations for a complex point\n   */\n  private mandelbrotIterations(c: ComplexPoint): number {\n    let z: ComplexPoint = { real: 0, imaginary: 0 };\n    \n    for (let i = 0; i < this.maxIterations; i++) {\n      // z = z^2 + c\n      const zReal = z.real * z.real - z.imaginary * z.imaginary + c.real;\n      const zImaginary = 2 * z.real * z.imaginary + c.imaginary;\n      \n      z.real = zReal;\n      z.imaginary = zImaginary;\n      \n      // Check if point escapes\n      if (z.real * z.real + z.imaginary * z.imaginary > 4) {\n        return i;\n      }\n    }\n    \n    return this.maxIterations;\n  }\n\n  /**\n   * Extract diagonal sequence\n   */\n  private extractDiagonal(data: number[][]): number[] {\n    const sequence: number[] = [];\n    const minDimension = Math.min(data.length, data[0]?.length || 0);\n    \n    for (let i = 0; i < minDimension; i++) {\n      sequence.push(data[i][i]);\n    }\n    \n    return sequence;\n  }\n\n  /**\n   * Extract border sequence (clockwise)\n   */\n  private extractBorder(data: number[][]): number[] {\n    const sequence: number[] = [];\n    const height = data.length;\n    const width = data[0]?.length || 0;\n    \n    if (height === 0 || width === 0) return sequence;\n    \n    // Top row\n    for (let x = 0; x < width; x++) {\n      sequence.push(data[0][x]);\n    }\n    \n    // Right column (excluding top corner)\n    for (let y = 1; y < height; y++) {\n      sequence.push(data[y][width - 1]);\n    }\n    \n    // Bottom row (excluding right corner, reverse order)\n    if (height > 1) {\n      for (let x = width - 2; x >= 0; x--) {\n        sequence.push(data[height - 1][x]);\n      }\n    }\n    \n    // Left column (excluding corners, reverse order)\n    if (width > 1) {\n      for (let y = height - 2; y > 0; y--) {\n        sequence.push(data[y][0]);\n      }\n    }\n    \n    return sequence;\n  }\n\n  /**\n   * Extract spiral sequence (from outside to inside)\n   */\n  private extractSpiral(data: number[][]): number[] {\n    const sequence: number[] = [];\n    const height = data.length;\n    const width = data[0]?.length || 0;\n    \n    if (height === 0 || width === 0) return sequence;\n    \n    let top = 0, bottom = height - 1;\n    let left = 0, right = width - 1;\n    \n    while (top <= bottom && left <= right) {\n      // Top row\n      for (let x = left; x <= right; x++) {\n        sequence.push(data[top][x]);\n      }\n      top++;\n      \n      // Right column\n      for (let y = top; y <= bottom; y++) {\n        sequence.push(data[y][right]);\n      }\n      right--;\n      \n      // Bottom row\n      if (top <= bottom) {\n        for (let x = right; x >= left; x--) {\n          sequence.push(data[bottom][x]);\n        }\n        bottom--;\n      }\n      \n      // Left column\n      if (left <= right) {\n        for (let y = bottom; y >= top; y--) {\n          sequence.push(data[y][left]);\n        }\n        left++;\n      }\n    }\n    \n    return sequence;\n  }\n\n  /**\n   * Extract specific column\n   */\n  private extractColumn(data: number[][], columnIndex: number): number[] {\n    const sequence: number[] = [];\n    const width = data[0]?.length || 0;\n    const clampedIndex = Math.max(0, Math.min(columnIndex, width - 1));\n    \n    for (const row of data) {\n      if (row[clampedIndex] !== undefined) {\n        sequence.push(row[clampedIndex]);\n      }\n    }\n    \n    return sequence;\n  }\n\n  /**\n   * Extract specific row\n   */\n  private extractRow(data: number[][], rowIndex: number): number[] {\n    const clampedIndex = Math.max(0, Math.min(rowIndex, data.length - 1));\n    return data[clampedIndex] ? [...data[clampedIndex]] : [];\n  }\n\n  /**\n   * Map fractal values to musical scale\n   */\n  public mapToScale(sequence: number[], scale: number[] = [0, 2, 4, 5, 7, 9, 11], octaveRange: number = 3): number[] {\n    if (sequence.length === 0) return [];\n    \n    const minVal = Math.min(...sequence);\n    const maxVal = Math.max(...sequence);\n    const range = maxVal - minVal || 1;\n    \n    return sequence.map(value => {\n      // Normalize to 0-1\n      const normalized = (value - minVal) / range;\n      \n      // Map to scale indices\n      const scaleIndex = Math.floor(normalized * scale.length * octaveRange);\n      const octave = Math.floor(scaleIndex / scale.length);\n      const noteIndex = scaleIndex % scale.length;\n      \n      // Convert to MIDI note (C4 = 60)\n      return 60 + octave * 12 + scale[noteIndex];\n    });\n  }\n\n  /**\n   * Generate rhythmic pattern from fractal data\n   */\n  public mapToRhythm(sequence: number[], subdivisions: number[] = [1, 2, 4, 8, 16]): number[] {\n    if (sequence.length === 0) return [];\n    \n    const minVal = Math.min(...sequence);\n    const maxVal = Math.max(...sequence);\n    const range = maxVal - minVal || 1;\n    \n    return sequence.map(value => {\n      const normalized = (value - minVal) / range;\n      const subdivisionIndex = Math.floor(normalized * subdivisions.length);\n      const clampedIndex = Math.max(0, Math.min(subdivisionIndex, subdivisions.length - 1));\n      return 1 / subdivisions[clampedIndex];\n    });\n  }\n}","export interface LogisticMapOptions {\n  r?: number;          // Growth parameter (0-4)\n  x0?: number;         // Initial value (0-1)\n  iterations?: number; // Number of iterations\n  skipTransient?: number; // Skip initial chaotic transients\n}\n\n/**\n * Logistic Map chaotic sequence generator\n * Based on the equation: x(n+1) = r * x(n) * (1 - x(n))\n */\nexport class LogisticMap {\n  private r: number;\n  private x0: number;\n  private iterations: number;\n  private skipTransient: number;\n\n  constructor(options: LogisticMapOptions = {}) {\n    this.r = options.r || 3.8;                    // Chaotic regime\n    this.x0 = options.x0 || 0.5;                  // Initial condition\n    this.iterations = options.iterations || 1000;  // Total iterations\n    this.skipTransient = options.skipTransient || 100; // Skip initial settling\n  }\n\n  /**\n   * Generate logistic map sequence\n   */\n  public generate(): number[] {\n    const sequence: number[] = [];\n    let x = this.x0;\n\n    // Generate iterations including transients\n    for (let i = 0; i < this.iterations + this.skipTransient; i++) {\n      x = this.r * x * (1 - x);\n      \n      // Only collect after transient period\n      if (i >= this.skipTransient) {\n        sequence.push(x);\n      }\n    }\n\n    return sequence;\n  }\n\n  /**\n   * Generate bifurcation data for different r values\n   */\n  public bifurcationDiagram(rMin: number = 2.5, rMax: number = 4.0, rSteps: number = 1000): { r: number[], x: number[] } {\n    const rValues: number[] = [];\n    const xValues: number[] = [];\n    \n    const rStep = (rMax - rMin) / rSteps;\n    \n    for (let i = 0; i < rSteps; i++) {\n      const r = rMin + i * rStep;\n      \n      // Generate sequence for this r value\n      const originalR = this.r;\n      this.r = r;\n      const sequence = this.generate();\n      this.r = originalR;\n      \n      // Take last few values (settled state)\n      const settledValues = sequence.slice(-50);\n      \n      for (const x of settledValues) {\n        rValues.push(r);\n        xValues.push(x);\n      }\n    }\n    \n    return { r: rValues, x: xValues };\n  }\n\n  /**\n   * Map chaotic values to musical scale\n   */\n  public mapToScale(sequence: number[], scale: number[] = [0, 2, 4, 5, 7, 9, 11], octaveRange: number = 3): number[] {\n    if (sequence.length === 0) return [];\n    \n    return sequence.map(value => {\n      // value is already in range [0, 1]\n      const scaleIndex = Math.floor(value * scale.length * octaveRange);\n      const octave = Math.floor(scaleIndex / scale.length);\n      const noteIndex = scaleIndex % scale.length;\n      \n      // Convert to MIDI note (C4 = 60)\n      return 60 + octave * 12 + scale[noteIndex];\n    });\n  }\n\n  /**\n   * Map to rhythmic durations\n   */\n  public mapToRhythm(sequence: number[], durations: number[] = [0.25, 0.5, 1, 2]): number[] {\n    if (sequence.length === 0) return [];\n    \n    return sequence.map(value => {\n      const durationIndex = Math.floor(value * durations.length);\n      const clampedIndex = Math.max(0, Math.min(durationIndex, durations.length - 1));\n      return durations[clampedIndex];\n    });\n  }\n\n  /**\n   * Map to velocities\n   */\n  public mapToVelocity(sequence: number[], minVel: number = 0.3, maxVel: number = 1.0): number[] {\n    if (sequence.length === 0) return [];\n    \n    const range = maxVel - minVel;\n    return sequence.map(value => minVel + value * range);\n  }\n\n  /**\n   * Detect periodic cycles in the sequence\n   */\n  public detectCycles(sequence: number[], tolerance: number = 0.01): number[] {\n    const cycles: number[] = [];\n    \n    for (let period = 1; period <= Math.floor(sequence.length / 2); period++) {\n      let isPeriodic = true;\n      \n      for (let i = period; i < Math.min(sequence.length, period * 3); i++) {\n        if (Math.abs(sequence[i] - sequence[i - period]) > tolerance) {\n          isPeriodic = false;\n          break;\n        }\n      }\n      \n      if (isPeriodic) {\n        cycles.push(period);\n      }\n    }\n    \n    return cycles;\n  }\n\n  /**\n   * Calculate Lyapunov exponent (measure of chaos)\n   */\n  public lyapunovExponent(iterations: number = 10000): number {\n    let x = this.x0;\n    let sum = 0;\n    \n    for (let i = 0; i < iterations; i++) {\n      // Derivative of logistic map: r * (1 - 2*x)\n      const derivative = this.r * (1 - 2 * x);\n      sum += Math.log(Math.abs(derivative));\n      x = this.r * x * (1 - x);\n    }\n    \n    return sum / iterations;\n  }\n\n  /**\n   * Generate multiple correlated sequences\n   */\n  public generateCoupled(numSequences: number = 2, coupling: number = 0.1): number[][] {\n    const sequences: number[][] = Array(numSequences).fill(null).map(() => []);\n    const states: number[] = Array(numSequences).fill(this.x0);\n    \n    for (let i = 0; i < this.iterations + this.skipTransient; i++) {\n      const newStates: number[] = [...states];\n      \n      // Update each sequence with coupling\n      for (let j = 0; j < numSequences; j++) {\n        let coupledTerm = 0;\n        \n        // Calculate coupling influence from other sequences\n        for (let k = 0; k < numSequences; k++) {\n          if (k !== j) {\n            coupledTerm += coupling * (states[k] - states[j]);\n          }\n        }\n        \n        // Standard logistic map update with coupling\n        newStates[j] = this.r * states[j] * (1 - states[j]) + coupledTerm;\n        \n        // Keep values in valid range\n        newStates[j] = Math.max(0, Math.min(1, newStates[j]));\n      }\n      \n      states.splice(0, numSequences, ...newStates);\n      \n      // Collect after transient period\n      if (i >= this.skipTransient) {\n        for (let j = 0; j < numSequences; j++) {\n          sequences[j].push(states[j]);\n        }\n      }\n    }\n    \n    return sequences;\n  }\n\n  /**\n   * Apply different chaotic regimes\n   */\n  public setRegime(regime: 'periodic' | 'chaotic' | 'edge' | 'custom', customR?: number): void {\n    switch (regime) {\n      case 'periodic':\n        this.r = 3.2; // Period-2 cycle\n        break;\n      case 'chaotic':\n        this.r = 3.9; // Full chaos\n        break;\n      case 'edge':\n        this.r = 3.57; // Edge of chaos\n        break;\n      case 'custom':\n        if (customR !== undefined) {\n          this.r = Math.max(0, Math.min(4, customR));\n        }\n        break;\n    }\n  }\n\n  /**\n   * Get current parameters\n   */\n  public getParameters(): LogisticMapOptions {\n    return {\n      r: this.r,\n      x0: this.x0,\n      iterations: this.iterations,\n      skipTransient: this.skipTransient\n    };\n  }\n}","import { MusicalNote } from '../../types/music';\n\nexport type MinimalismOperation = 'additive' | 'subtractive';\nexport type MinimalismDirection = 'forward' | 'backward' | 'inward' | 'outward';\n\nexport interface MinimalismOptions {\n  operation: MinimalismOperation;\n  direction: MinimalismDirection;\n  repetition: number;\n}\n\n/**\n * Implementation of musical minimalism processes based on the Python djalgo library\n * Supports additive and subtractive operations in four directions\n */\nexport class MinimalismProcess {\n  private operation: MinimalismOperation;\n  private direction: MinimalismDirection;\n  private repetition: number;\n  private sequence: MusicalNote[] = [];\n\n  constructor(options: MinimalismOptions) {\n    const { operation, direction, repetition } = options;\n    \n    if (!['additive', 'subtractive'].includes(operation)) {\n      throw new Error(\"Invalid operation. Choose 'additive' or 'subtractive'.\");\n    }\n    \n    if (!['forward', 'backward', 'inward', 'outward'].includes(direction)) {\n      throw new Error(\"Invalid direction. Choose 'forward', 'backward', 'inward' or 'outward'.\");\n    }\n    \n    if (repetition < 0 || !Number.isInteger(repetition)) {\n      throw new Error(\"Invalid repetition value. Must be an integer greater than or equal to 0.\");\n    }\n    \n    this.operation = operation;\n    this.direction = direction;\n    this.repetition = repetition;\n  }\n\n  /**\n   * Generate processed sequence based on operation and direction\n   */\n  public generate(sequence: MusicalNote[]): MusicalNote[] {\n    this.sequence = sequence;\n    \n    let processed: MusicalNote[];\n    \n    if (this.operation === 'additive' && this.direction === 'forward') {\n      processed = this.additiveForward();\n    } else if (this.operation === 'additive' && this.direction === 'backward') {\n      processed = this.additiveBackward();\n    } else if (this.operation === 'additive' && this.direction === 'inward') {\n      processed = this.additiveInward();\n    } else if (this.operation === 'additive' && this.direction === 'outward') {\n      processed = this.additiveOutward();\n    } else if (this.operation === 'subtractive' && this.direction === 'forward') {\n      processed = this.subtractiveForward();\n    } else if (this.operation === 'subtractive' && this.direction === 'backward') {\n      processed = this.subtractiveBackward();\n    } else if (this.operation === 'subtractive' && this.direction === 'inward') {\n      processed = this.subtractiveInward();\n    } else if (this.operation === 'subtractive' && this.direction === 'outward') {\n      processed = this.subtractiveOutward();\n    } else {\n      throw new Error('Invalid operation/direction combination');\n    }\n\n    // Adjust offsets based on durations\n    return this.adjustOffsets(processed);\n  }\n\n  private additiveForward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    \n    for (let i = 0; i < this.sequence.length; i++) {\n      const segment = this.sequence.slice(0, i + 1);\n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private additiveBackward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    \n    for (let i = this.sequence.length; i > 0; i--) {\n      const segment = this.sequence.slice(i - 1);\n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private additiveInward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    const n = this.sequence.length;\n    \n    for (let i = 0; i < Math.ceil(n / 2); i++) {\n      let segment: MusicalNote[];\n      \n      if (i < n - i - 1) {\n        // Combine from start and end\n        const leftPart = this.sequence.slice(0, i + 1);\n        const rightPart = this.sequence.slice(n - i - 1);\n        segment = [...leftPart, ...rightPart];\n      } else {\n        // Middle element(s)\n        segment = [...this.sequence];\n      }\n      \n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private additiveOutward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    const n = this.sequence.length;\n    \n    if (n % 2 === 0) {\n      // Even length\n      const midLeft = Math.floor(n / 2) - 1;\n      const midRight = Math.floor(n / 2);\n      \n      for (let i = 0; i < n / 2; i++) {\n        const segment = this.sequence.slice(midLeft - i, midRight + i + 1);\n        for (let rep = 0; rep <= this.repetition; rep++) {\n          processed.push(...segment);\n        }\n      }\n    } else {\n      // Odd length\n      const mid = Math.floor(n / 2);\n      \n      for (let i = 0; i <= mid; i++) {\n        const segment = this.sequence.slice(mid - i, mid + i + 1);\n        for (let rep = 0; rep <= this.repetition; rep++) {\n          processed.push(...segment);\n        }\n      }\n    }\n    \n    return processed;\n  }\n\n  private subtractiveForward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    \n    for (let i = 0; i < this.sequence.length; i++) {\n      const segment = this.sequence.slice(i);\n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private subtractiveBackward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    \n    for (let i = this.sequence.length; i > 0; i--) {\n      const segment = this.sequence.slice(0, i);\n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private subtractiveInward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    const n = this.sequence.length;\n    const steps = Math.floor(n / 2);\n    \n    // Start with full sequence\n    for (let rep = 0; rep <= this.repetition; rep++) {\n      processed.push(...this.sequence);\n    }\n    \n    // Remove elements from both ends\n    for (let i = 1; i <= steps; i++) {\n      const segment = this.sequence.slice(i, n - i);\n      if (segment.length > 0) {\n        for (let rep = 0; rep <= this.repetition; rep++) {\n          processed.push(...segment);\n        }\n      }\n    }\n    \n    return processed;\n  }\n\n  private subtractiveOutward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    let segment = [...this.sequence];\n    \n    // Start with full sequence\n    for (let rep = 0; rep <= this.repetition; rep++) {\n      processed.push(...segment);\n    }\n    \n    // Remove first and last elements iteratively\n    while (segment.length > 2) {\n      segment = segment.slice(1, -1);\n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private adjustOffsets(processed: MusicalNote[]): MusicalNote[] {\n    let currentOffset = 0;\n    \n    return processed.map(note => {\n      const newNote: MusicalNote = {\n        ...note,\n        offset: currentOffset\n      };\n      currentOffset += note.duration;\n      return newNote;\n    });\n  }\n}\n\n/**\n * Tintinnabuli style implementation for modal composition\n */\nexport class Tintinnabuli {\n  private tChord: number[];\n  private direction: 'up' | 'down' | 'any' | 'alternate';\n  private rank: number;\n  private isAlternate: boolean;\n  private currentDirection: 'up' | 'down';\n\n  constructor(\n    tChord: number[],\n    direction: 'up' | 'down' | 'any' | 'alternate' = 'down',\n    rank: number = 0\n  ) {\n    if (!['up', 'down', 'any', 'alternate'].includes(direction)) {\n      throw new Error(\"Invalid direction. Choose 'up', 'down', 'any' or 'alternate'.\");\n    }\n    \n    this.tChord = tChord;\n    this.isAlternate = direction === 'alternate';\n    this.currentDirection = this.isAlternate ? 'up' : direction as 'up' | 'down';\n    this.direction = direction;\n    \n    if (!Number.isInteger(rank) || rank < 0) {\n      throw new Error(\"Rank must be a non-negative integer.\");\n    }\n    \n    this.rank = Math.min(rank, tChord.length - 1);\n    \n    if (this.rank >= tChord.length) {\n      console.warn(\"Rank exceeds the length of the t-chord. Using last note of the t-chord.\");\n    }\n  }\n\n  /**\n   * Generate t-voice from m-voice sequence\n   */\n  public generate(sequence: MusicalNote[]): MusicalNote[] {\n    const tVoice: MusicalNote[] = [];\n    \n    for (const note of sequence) {\n      if (note.pitch === undefined) {\n        // Rest note\n        tVoice.push({\n          ...note,\n          pitch: undefined\n        });\n        continue;\n      }\n      \n      const mPitch = note.pitch;\n      const differences = this.tChord.map(t => t - mPitch);\n      const sortedDifferences = differences\n        .map((diff, index) => ({ index, value: diff }))\n        .sort((a, b) => Math.abs(a.value) - Math.abs(b.value));\n      \n      let effectiveRank = this.rank;\n      let tVoicePitch: number;\n      \n      if (this.currentDirection === 'up' || this.currentDirection === 'down') {\n        const filteredDifferences = sortedDifferences.filter(({ value }) =>\n          this.currentDirection === 'up' ? value >= 0 : value <= 0\n        );\n        \n        if (filteredDifferences.length === 0) {\n          // No notes in desired direction, use extreme note\n          tVoicePitch = this.currentDirection === 'up' \n            ? Math.max(...this.tChord) \n            : Math.min(...this.tChord);\n        } else {\n          if (effectiveRank >= filteredDifferences.length) {\n            effectiveRank = filteredDifferences.length - 1;\n          }\n          const chosenIndex = filteredDifferences[effectiveRank].index;\n          tVoicePitch = this.tChord[chosenIndex];\n        }\n      } else { // 'any'\n        if (effectiveRank >= sortedDifferences.length) {\n          effectiveRank = sortedDifferences.length - 1;\n        }\n        const chosenIndex = sortedDifferences[effectiveRank].index;\n        tVoicePitch = this.tChord[chosenIndex];\n      }\n      \n      // Change direction if alternate\n      if (this.isAlternate) {\n        this.currentDirection = this.currentDirection === 'up' ? 'down' : 'up';\n      }\n      \n      tVoice.push({\n        ...note,\n        pitch: tVoicePitch\n      });\n    }\n    \n    return tVoice;\n  }\n}","import { MusicalNote } from '../types/music';\n\n/**\n * Musical utility functions matching the Python djalgo utils module\n */\nexport class MusicUtils {\n\n  /**\n   * Check input type of a sequence\n   */\n  public static checkInput(sequence: any): 'list of tuples' | 'list' | 'unknown' {\n    if (!Array.isArray(sequence)) return 'unknown';\n    if (sequence.length === 0) return 'list';\n    \n    const firstItem = sequence[0];\n    if (Array.isArray(firstItem) || (typeof firstItem === 'object' && 'pitch' in firstItem)) {\n      return 'list of tuples';\n    }\n    \n    return 'list';\n  }\n\n  /**\n   * Fill gaps with rests in a musical sequence\n   */\n  public static fillGapsWithRests(notes: MusicalNote[], tolerance: number = 0.01): MusicalNote[] {\n    if (notes.length === 0) return [];\n    \n    // Sort notes by offset\n    const sortedNotes = [...notes].sort((a, b) => a.offset - b.offset);\n    const result: MusicalNote[] = [];\n    \n    let currentTime = 0;\n    \n    for (const note of sortedNotes) {\n      // Check if there's a gap before this note\n      if (note.offset > currentTime + tolerance) {\n        // Add a rest to fill the gap\n        result.push({\n          pitch: undefined, // Rest\n          duration: note.offset - currentTime,\n          offset: currentTime,\n          velocity: 0\n        });\n      }\n      \n      result.push(note);\n      currentTime = Math.max(currentTime, note.offset + note.duration);\n    }\n    \n    return result;\n  }\n\n  /**\n   * Set offsets according to durations (sequential timing)\n   */\n  public static setOffsetsAccordingToDurations(notes: MusicalNote[]): MusicalNote[] {\n    let currentOffset = 0;\n    \n    return notes.map(note => {\n      const newNote: MusicalNote = {\n        ...note,\n        offset: currentOffset\n      };\n      currentOffset += note.duration;\n      return newNote;\n    });\n  }\n\n  /**\n   * Convert CDE notation to MIDI (e.g., \"C4\" -> 60)\n   */\n  public static cdeToMidi(note: string): number {\n    const noteRegex = /^([A-G][#b]?)(-?\\d+)$/;\n    const match = note.match(noteRegex);\n    \n    if (!match) {\n      throw new Error(`Invalid note format: ${note}`);\n    }\n    \n    const noteName = match[1]!;\n    const octave = parseInt(match[2]!);\n    \n    const noteToSemitone: Record<string, number> = {\n      'C': 0, 'C#': 1, 'Db': 1, 'D': 2, 'D#': 3, 'Eb': 3,\n      'E': 4, 'F': 5, 'F#': 6, 'Gb': 6, 'G': 7, 'G#': 8,\n      'Ab': 8, 'A': 9, 'A#': 10, 'Bb': 10, 'B': 11\n    };\n    \n    const semitone = noteToSemitone[noteName];\n    if (semitone === undefined) {\n      throw new Error(`Unknown note name: ${noteName}`);\n    }\n    \n    return (octave + 1) * 12 + semitone;\n  }\n\n  /**\n   * Convert MIDI to CDE notation (e.g., 60 -> \"C4\")\n   */\n  public static midiToCde(midi: number): string {\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const octave = Math.floor(midi / 12) - 1;\n    const noteIndex = midi % 12;\n    \n    return noteNames[noteIndex] + octave;\n  }\n\n  /**\n   * Get octave from MIDI note number\n   */\n  public static getOctave(midi: number): number {\n    return Math.floor(midi / 12) - 1;\n  }\n\n  /**\n   * Get degree from pitch in a scale\n   */\n  public static getDegreeFromPitch(pitch: number, scaleList: number[], tonicPitch: number): number {\n    // Convert to pitch classes\n    const pitchClass = ((pitch % 12) + 12) % 12;\n    const tonicClass = ((tonicPitch % 12) + 12) % 12;\n    \n    // Find the closest scale degree\n    let minDistance = Infinity;\n    let closestDegree = 1;\n    \n    for (let i = 0; i < scaleList.length; i++) {\n      const scaleNoteClass = ((scaleList[i]! % 12) + 12) % 12;\n      const scaleDegreeClass = ((scaleNoteClass - tonicClass + 12) % 12);\n      const distance = Math.abs(pitchClass - scaleDegreeClass);\n      \n      if (distance < minDistance) {\n        minDistance = distance;\n        closestDegree = i + 1; // Scale degrees start from 1\n      }\n    }\n    \n    // Adjust for octave\n    const octaveOffset = Math.floor((pitch - tonicPitch) / 12) * scaleList.length;\n    return closestDegree + octaveOffset;\n  }\n\n  /**\n   * Quantize timing to a grid\n   */\n  public static quantize(notes: MusicalNote[], gridDivision: number = 16): MusicalNote[] {\n    const gridSize = 1 / gridDivision;\n    \n    return notes.map(note => ({\n      ...note,\n      offset: Math.round(note.offset / gridSize) * gridSize\n    }));\n  }\n\n  /**\n   * Transpose a sequence by semitones\n   */\n  public static transpose(notes: MusicalNote[], semitones: number): MusicalNote[] {\n    return notes.map(note => ({\n      ...note,\n      pitch: note.pitch !== undefined ? note.pitch + semitones : undefined\n    }));\n  }\n\n  /**\n   * Invert a melody around a pivot point\n   */\n  public static invert(notes: MusicalNote[], pivot?: number): MusicalNote[] {\n    const pitches = notes.map(n => n.pitch).filter(p => p !== undefined) as number[];\n    if (pitches.length === 0) return notes;\n    \n    const actualPivot = pivot !== undefined ? pivot : \n      (Math.max(...pitches) + Math.min(...pitches)) / 2;\n    \n    return notes.map(note => ({\n      ...note,\n      pitch: note.pitch !== undefined ? 2 * actualPivot - note.pitch : undefined\n    }));\n  }\n\n  /**\n   * Retrograde (reverse) a sequence\n   */\n  public static retrograde(notes: MusicalNote[]): MusicalNote[] {\n    const reversed = [...notes].reverse();\n    const totalDuration = notes.reduce((sum, note) => Math.max(sum, note.offset + note.duration), 0);\n    \n    return this.setOffsetsAccordingToDurations(reversed.map(note => ({\n      ...note,\n      offset: 0 // Will be recalculated\n    })));\n  }\n\n  /**\n   * Create augmentation (stretch) or diminution (compress) of durations\n   */\n  public static augment(notes: MusicalNote[], factor: number): MusicalNote[] {\n    let currentOffset = 0;\n    \n    return notes.map(note => {\n      const newNote: MusicalNote = {\n        ...note,\n        duration: note.duration * factor,\n        offset: currentOffset\n      };\n      currentOffset += newNote.duration;\n      return newNote;\n    });\n  }\n\n  /**\n   * Remove duplicate consecutive notes\n   */\n  public static removeDuplicates(notes: MusicalNote[]): MusicalNote[] {\n    if (notes.length <= 1) return notes;\n    \n    const result: MusicalNote[] = [notes[0]!];\n    \n    for (let i = 1; i < notes.length; i++) {\n      const current = notes[i]!;\n      const previous = result[result.length - 1]!;\n      \n      if (current.pitch !== previous.pitch || \n          Math.abs(current.offset - (previous.offset + previous.duration)) > 0.01) {\n        result.push(current);\n      } else {\n        // Extend duration of previous note instead of adding duplicate\n        previous.duration += current.duration;\n      }\n    }\n    \n    return result;\n  }\n\n  /**\n   * Split long notes into smaller ones\n   */\n  public static splitLongNotes(notes: MusicalNote[], maxDuration: number): MusicalNote[] {\n    const result: MusicalNote[] = [];\n    \n    for (const note of notes) {\n      if (note.duration <= maxDuration) {\n        result.push(note);\n      } else {\n        // Split into multiple notes\n        const numSplits = Math.ceil(note.duration / maxDuration);\n        const splitDuration = note.duration / numSplits;\n        \n        for (let i = 0; i < numSplits; i++) {\n          result.push({\n            ...note,\n            duration: splitDuration,\n            offset: note.offset + i * splitDuration\n          });\n        }\n      }\n    }\n    \n    return result;\n  }\n\n  /**\n   * Calculate the total duration of a sequence\n   */\n  public static getTotalDuration(notes: MusicalNote[]): number {\n    if (notes.length === 0) return 0;\n    return Math.max(...notes.map(note => note.offset + note.duration));\n  }\n\n  /**\n   * Get pitch range (lowest and highest pitches)\n   */\n  public static getPitchRange(notes: MusicalNote[]): { min: number; max: number } | null {\n    const pitches = notes.map(n => n.pitch).filter(p => p !== undefined) as number[];\n    if (pitches.length === 0) return null;\n    \n    return {\n      min: Math.min(...pitches),\n      max: Math.max(...pitches)\n    };\n  }\n\n  /**\n   * Normalize velocities to a range\n   */\n  public static normalizeVelocities(notes: MusicalNote[], min: number = 0.1, max: number = 1.0): MusicalNote[] {\n    const velocities = notes.map(n => n.velocity || 0.8);\n    const currentMin = Math.min(...velocities);\n    const currentMax = Math.max(...velocities);\n    const range = currentMax - currentMin;\n    \n    if (range === 0) {\n      return notes.map(note => ({ ...note, velocity: (min + max) / 2 }));\n    }\n    \n    return notes.map(note => {\n      const normalizedVelocity = ((note.velocity || 0.8) - currentMin) / range;\n      return {\n        ...note,\n        velocity: min + normalizedVelocity * (max - min)\n      };\n    });\n  }\n\n  /**\n   * Create a rhythmic pattern from note onsets\n   */\n  public static extractRhythm(notes: MusicalNote[]): number[] {\n    return notes.map(note => note.offset).sort((a, b) => a - b);\n  }\n\n  /**\n   * Apply swing timing to notes\n   */\n  public static applySwing(notes: MusicalNote[], swingRatio: number = 0.67): MusicalNote[] {\n    const beatDuration = 1; // Assuming quarter note beat\n    const subdivisionDuration = beatDuration / 2;\n    \n    return notes.map(note => {\n      const beatPosition = note.offset % beatDuration;\n      const isOffBeat = Math.abs(beatPosition - subdivisionDuration) < 0.01;\n      \n      if (isOffBeat) {\n        const swingOffset = subdivisionDuration * swingRatio;\n        const beatStart = note.offset - beatPosition;\n        return {\n          ...note,\n          offset: beatStart + swingOffset\n        };\n      }\n      \n      return note;\n    });\n  }\n}"],"names":[],"mappings":"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"}