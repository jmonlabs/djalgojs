{"version":3,"file":"djalgojs.umd.js","sources":["../src/music/theory/MusicTheoryConstants.ts","../src/io/jmon/conversion.ts","../src/music/theory/Scale.ts","../src/music/theory/Progression.ts","../src/music/harmony/Voice.ts","../src/music/harmony/Ornament.ts","../src/music/rhythm/Rhythm.ts","../src/music/rhythm/AdvancedRhythm.ts","../src/music/motifs/MotifBank.ts","../src/utils/matrix.ts","../src/algorithms/gaussian-processes/GaussianProcessRegressor.ts","../src/algorithms/gaussian-processes/kernels/base.ts","../src/algorithms/gaussian-processes/kernels/rbf.ts","../src/algorithms/gaussian-processes/utils.ts","../src/algorithms/gaussian-processes/Kernel.ts","../src/algorithms/gaussian-processes/kernels/rational-quadratic.ts","../src/algorithms/gaussian-processes/kernels/periodic.ts","../src/algorithms/cellular-automata/CellularAutomata.ts","../src/algorithms/polyloops/Polyloop.ts","../src/analysis/MusicalAnalysis.ts","../src/algorithms/genetic/GeneticAlgorithm.ts","../src/algorithms/walks/RandomWalk.ts","../src/algorithms/fractals/Mandelbrot.ts","../src/algorithms/fractals/LogisticMap.ts","../src/algorithms/minimalism/MinimalismProcess.ts","../src/utils/music.ts","../src/visualization/plots/PlotRenderer.ts","../src/visualization/cellular-automata/CAVisualizer.ts","../src/visualization/polyloops/PolyloopVisualizer.ts","../src/visualization/fractals/FractalVisualizer.ts"],"sourcesContent":["import { ChromaticNote, ScaleMode, Interval } from '../../types/music';\n\nexport class MusicTheoryConstants {\n  public static readonly chromaticScale: ChromaticNote[] = [\n    'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'\n  ];\n\n  public static readonly intervals: Record<Interval, number> = {\n    unison: 0,\n    minor2nd: 1,\n    major2nd: 2,\n    minor3rd: 3,\n    major3rd: 4,\n    perfect4th: 5,\n    tritone: 6,\n    perfect5th: 7,\n    minor6th: 8,\n    major6th: 9,\n    minor7th: 10,\n    major7th: 11,\n    octave: 12,\n  };\n\n  public static readonly scaleIntervals: Record<ScaleMode, number[]> = {\n    major: [0, 2, 4, 5, 7, 9, 11],\n    minor: [0, 2, 3, 5, 7, 8, 10],\n    dorian: [0, 2, 3, 5, 7, 9, 10],\n    phrygian: [0, 1, 3, 5, 7, 8, 10],\n    lydian: [0, 2, 4, 6, 7, 9, 11],\n    mixolydian: [0, 2, 4, 5, 7, 9, 10],\n    locrian: [0, 1, 3, 5, 6, 8, 10],\n  };\n\n  public static convertFlatToSharp(note: string): ChromaticNote {\n    const flatToSharp: Record<string, ChromaticNote> = {\n      'Db': 'C#',\n      'Eb': 'D#',\n      'Gb': 'F#',\n      'Ab': 'G#',\n      'Bb': 'A#',\n    };\n\n    return flatToSharp[note] || (note as ChromaticNote);\n  }\n\n  public static scaleToTriad(mode: ScaleMode): number[] {\n    const intervals = this.scaleIntervals[mode];\n    return [intervals[0]!, intervals[2]!, intervals[4]!]; // 1st, 3rd, 5th degrees\n  }\n\n  public static getChromaticIndex(note: ChromaticNote): number {\n    return this.chromaticScale.indexOf(note);\n  }\n\n  public static getNoteFromIndex(index: number): ChromaticNote {\n    const normalizedIndex = ((index % 12) + 12) % 12;\n    return this.chromaticScale[normalizedIndex]!;\n  }\n\n  public static transposeNote(note: ChromaticNote, semitones: number): ChromaticNote {\n    const currentIndex = this.getChromaticIndex(note);\n    const newIndex = currentIndex + semitones;\n    return this.getNoteFromIndex(newIndex);\n  }\n\n  public static getInterval(note1: ChromaticNote, note2: ChromaticNote): number {\n    const index1 = this.getChromaticIndex(note1);\n    const index2 = this.getChromaticIndex(note2);\n    return ((index2 - index1) + 12) % 12;\n  }\n}","import { Note, Sequence, Pitch, Duration } from '../../types/common';\nimport { RhythmPattern } from '../../types/music';\nimport { \n  JMonNote, \n  JMonSequence, \n  JMonComposition, \n  BasicJMonComposition,\n  MusicalTime,\n  NoteDuration,\n  AudioNode\n} from '../../types/jmon';\n\nexport class JMonConverter {\n  \n  /**\n   * Convert a numeric time (in beats) to JMON bars:beats:ticks format\n   * Assumes 4/4 time signature and 480 ticks per beat\n   */\n  public static timeToMusicalTime(time: number, timeSignature: [number, number] = [4, 4]): MusicalTime {\n    const [beatsPerBar] = timeSignature;\n    const ticksPerBeat = 480; // Standard MIDI resolution\n    \n    const bars = Math.floor(time / beatsPerBar);\n    const beats = Math.floor(time % beatsPerBar);\n    const ticks = Math.round((time % 1) * ticksPerBeat);\n    \n    return `${bars}:${beats}:${ticks}`;\n  }\n\n  /**\n   * Convert a duration in beats to note value format\n   */\n  public static durationToNoteValue(duration: Duration): NoteDuration {\n    // Common duration mappings (assuming 4/4 time)\n    const durationsMap: Record<number, string> = {\n      4: '1n',    // whole note\n      3: '2n.',   // dotted half\n      2: '2n',    // half note\n      1.5: '4n.', // dotted quarter\n      1: '4n',    // quarter note\n      0.75: '8n.', // dotted eighth\n      0.5: '8n',   // eighth note\n      0.25: '16n', // sixteenth note\n      0.125: '32n', // thirty-second note\n    };\n\n    // Find closest match\n    const closest = Object.keys(durationsMap)\n      .map(Number)\n      .reduce((prev, curr) => \n        Math.abs(curr - duration) < Math.abs(prev - duration) ? curr : prev\n      );\n\n    return durationsMap[closest] || `${duration}n`;\n  }\n\n  /**\n   * Convert a simple Note to JMonNote\n   */\n  public static noteToJMonNote(note: Note, timeSignature: [number, number] = [4, 4]): JMonNote {\n    return {\n      note: note.pitch,\n      time: note.time !== undefined ? this.timeToMusicalTime(note.time, timeSignature) : '0:0:0',\n      duration: this.durationToNoteValue(note.duration),\n      velocity: note.velocity || 0.8,\n    };\n  }\n\n  /**\n   * Convert a Sequence to JMonSequence\n   */\n  public static sequenceToJMonSequence(\n    sequence: Sequence, \n    label: string = 'Generated Sequence',\n    timeSignature: [number, number] = [4, 4]\n  ): JMonSequence {\n    return {\n      label,\n      notes: sequence.notes.map(note => this.noteToJMonNote(note, timeSignature)),\n      synth: {\n        type: 'Synth',\n        options: {\n          oscillator: { type: 'triangle' },\n          envelope: { attack: 0.02, decay: 0.1, sustain: 0.3, release: 1 }\n        }\n      }\n    };\n  }\n\n  /**\n   * Convert a RhythmPattern to JMonSequence\n   */\n  public static rhythmPatternToJMonSequence(\n    pattern: RhythmPattern,\n    pitches: Pitch[] = [60], // Default to middle C\n    label: string = 'Rhythm Pattern'\n  ): JMonSequence {\n    const notes: JMonNote[] = [];\n    let currentTime = 0;\n    \n    pattern.durations.forEach((duration, index) => {\n      const pitch = pitches[index % pitches.length] || 60;\n      const isAccented = pattern.accents?.[index] || false;\n      \n      if (duration > 0) { // Only add notes for non-zero durations\n        notes.push({\n          note: pitch,\n          time: this.timeToMusicalTime(currentTime),\n          duration: this.durationToNoteValue(duration),\n          velocity: isAccented ? 0.9 : 0.7,\n        });\n      }\n      \n      currentTime += duration;\n    });\n\n    return {\n      label,\n      notes,\n      synth: {\n        type: 'Synth',\n        options: {\n          oscillator: { type: 'sawtooth' },\n          envelope: { attack: 0.01, decay: 0.1, sustain: 0.5, release: 0.3 }\n        }\n      }\n    };\n  }\n\n  /**\n   * Create a basic JMON composition from sequences\n   */\n  public static createBasicComposition(\n    sequences: JMonSequence[],\n    bpm: number = 120,\n    metadata?: { name?: string; author?: string; description?: string }\n  ): BasicJMonComposition {\n    return {\n      format: 'jmonTone',\n      version: '1.0',\n      bpm,\n      audioGraph: [\n        {\n          id: 'master',\n          type: 'Destination',\n          options: {}\n        }\n      ],\n      connections: [], // Direct to master for now\n      sequences,\n      ...(metadata && { metadata })\n    };\n  }\n\n  /**\n   * Create a complete JMON composition with effects\n   */\n  public static createComposition(\n    sequences: JMonSequence[],\n    options: {\n      bpm?: number;\n      keySignature?: string;\n      timeSignature?: string;\n      effects?: Array<{ type: string; options: Record<string, any> }>;\n      metadata?: { name?: string; author?: string; description?: string };\n    } = {}\n  ): JMonComposition {\n    const {\n      bpm = 120,\n      keySignature = 'C',\n      timeSignature = '4/4',\n      effects = [],\n      metadata\n    } = options;\n\n    const audioGraph: AudioNode[] = [\n      {\n        id: 'master',\n        type: 'Destination',\n        options: {}\n      }\n    ];\n\n    const connections: [string, string][] = [];\n\n    // Add global effects\n    effects.forEach((effect, index) => {\n      const effectId = `effect${index}`;\n      audioGraph.push({\n        id: effectId,\n        type: effect.type as any,\n        options: effect.options\n      });\n      connections.push([effectId, 'master']);\n    });\n\n    return {\n      format: 'jmonTone',\n      version: '1.0',\n      bpm,\n      keySignature,\n      timeSignature,\n      audioGraph,\n      connections,\n      sequences,\n      ...(metadata && { metadata })\n    };\n  }\n\n  /**\n   * Convert MIDI note number to note name\n   */\n  public static midiToNoteName(midiNote: number): string {\n    const notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const octave = Math.floor(midiNote / 12) - 1;\n    const noteIndex = midiNote % 12;\n    return `${notes[noteIndex]}${octave}`;\n  }\n\n  /**\n   * Convert note name to MIDI note number\n   */\n  public static noteNameToMidi(noteName: string): number {\n    const noteRegex = /^([A-G])(#|b)?(-?\\d+)$/;\n    const match = noteName.match(noteRegex);\n    \n    if (!match) {\n      throw new Error(`Invalid note name: ${noteName}`);\n    }\n\n    const [, note, accidental, octaveStr] = match;\n    if (!note || !octaveStr) {\n      throw new Error(`Invalid note name: ${noteName}`);\n    }\n    const octave = parseInt(octaveStr, 10);\n    \n    const noteValues: Record<string, number> = {\n      'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11\n    };\n    \n    let midiNote = noteValues[note]! + (octave + 1) * 12;\n    \n    if (accidental === '#') {\n      midiNote += 1;\n    } else if (accidental === 'b') {\n      midiNote -= 1;\n    }\n    \n    return midiNote;\n  }\n\n  /**\n   * Convert a musical time string back to numeric time\n   */\n  public static musicalTimeToTime(musicalTime: MusicalTime, timeSignature: [number, number] = [4, 4]): number {\n    const [beatsPerBar] = timeSignature;\n    const ticksPerBeat = 480;\n    \n    const parts = musicalTime.split(':');\n    if (parts.length !== 3) {\n      throw new Error(`Invalid musical time format: ${musicalTime}`);\n    }\n    \n    const bars = parseInt(parts[0]!, 10);\n    const beats = parseFloat(parts[1]!);\n    const ticks = parseInt(parts[2]!, 10);\n    \n    return bars * beatsPerBar + beats + (ticks / ticksPerBeat);\n  }\n\n  /**\n   * Validate JMON composition\n   */\n  public static validateComposition(composition: JMonComposition): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n    \n    if (composition.format !== 'jmonTone') {\n      errors.push('Format must be \"jmonTone\"');\n    }\n    \n    if (composition.bpm < 20 || composition.bpm > 400) {\n      errors.push('BPM must be between 20 and 400');\n    }\n    \n    if (!composition.sequences || composition.sequences.length === 0) {\n      errors.push('At least one sequence is required');\n    }\n    \n    composition.sequences.forEach((seq, index) => {\n      if (!seq.label) {\n        errors.push(`Sequence ${index} missing label`);\n      }\n      \n      if (!seq.notes || seq.notes.length === 0) {\n        errors.push(`Sequence ${index} has no notes`);\n      }\n    });\n    \n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n}","import { ChromaticNote, ScaleMode, MusicalScale } from '../../types/music';\nimport { Pitch } from '../../types/common';\nimport { MusicTheoryConstants } from './MusicTheoryConstants';\nimport { JMonSequence, JMonNote } from '../../types/jmon';\nimport { JMonConverter } from '../../io/jmon/conversion';\n\nexport class Scale {\n  public readonly tonic: ChromaticNote;\n  public readonly mode: ScaleMode;\n\n  constructor(tonic: ChromaticNote, mode: ScaleMode) {\n    this.tonic = tonic;\n    this.mode = mode;\n  }\n\n  public generate(octave = 4, length?: number): Pitch[] {\n    const intervals = MusicTheoryConstants.scaleIntervals[this.mode];\n    const tonicIndex = MusicTheoryConstants.getChromaticIndex(this.tonic);\n    \n    const basePitches = intervals.map(interval => {\n      const noteIndex = (tonicIndex + interval) % 12;\n      return 60 + (octave - 4) * 12 + noteIndex; // MIDI note number\n    });\n\n    if (length === undefined) {\n      return basePitches;\n    }\n\n    const result: Pitch[] = [];\n    let currentOctave = octave;\n    \n    for (let i = 0; i < length; i++) {\n      const scaleIndex = i % intervals.length;\n      if (scaleIndex === 0 && i > 0) {\n        currentOctave++;\n      }\n      \n      const interval = intervals[scaleIndex]!;\n      const noteIndex = (tonicIndex + interval) % 12;\n      const pitch = 60 + (currentOctave - 4) * 12 + noteIndex;\n      result.push(pitch);\n    }\n\n    return result;\n  }\n\n  public getMusicalScale(): MusicalScale {\n    const pitches = this.generate();\n    return {\n      tonic: this.tonic,\n      mode: this.mode,\n      pitches,\n    };\n  }\n\n  public getDegree(degree: number, octave = 4): Pitch {\n    const intervals = MusicTheoryConstants.scaleIntervals[this.mode];\n    const normalizedDegree = ((degree - 1) % intervals.length);\n    const octaveOffset = Math.floor((degree - 1) / intervals.length);\n    \n    const interval = intervals[normalizedDegree]!;\n    const tonicIndex = MusicTheoryConstants.getChromaticIndex(this.tonic);\n    const noteIndex = (tonicIndex + interval) % 12;\n    \n    return 60 + (octave + octaveOffset - 4) * 12 + noteIndex;\n  }\n\n  public getNoteNames(): ChromaticNote[] {\n    const intervals = MusicTheoryConstants.scaleIntervals[this.mode];\n    const tonicIndex = MusicTheoryConstants.getChromaticIndex(this.tonic);\n    \n    return intervals.map(interval => {\n      const noteIndex = (tonicIndex + interval) % 12;\n      return MusicTheoryConstants.chromaticScale[noteIndex]!;\n    });\n  }\n\n  public isInScale(pitch: Pitch): boolean {\n    const pitchClass = pitch % 12;\n    const scalePitches = this.generate().map(p => p % 12);\n    return scalePitches.includes(pitchClass);\n  }\n\n  /**\n   * Get the scale degrees as MIDI note numbers\n   * Returns the pitches of the scale in the default octave\n   */\n  public getScaleDegrees(octave: number = 4): Pitch[] {\n    return this.generate(octave);\n  }\n\n  public getClosestScalePitch(pitch: Pitch): Pitch {\n    const scalePitches = this.generate(Math.floor(pitch / 12), 8); // Generate enough pitches\n    \n    let closest = scalePitches[0]!;\n    let minDistance = Math.abs(pitch - closest);\n    \n    for (const scalePitch of scalePitches) {\n      const distance = Math.abs(pitch - scalePitch);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closest = scalePitch;\n      }\n    }\n    \n    return closest;\n  }\n\n  public toJMonSequence(\n    options: {\n      length?: number;\n      octave?: number;\n      duration?: string;\n      velocity?: number;\n      label?: string;\n    } = {}\n  ): JMonSequence {\n    const {\n      length = 8,\n      octave = 4,\n      duration = '4n',\n      velocity = 0.8,\n      label = `${this.tonic} ${this.mode} scale`\n    } = options;\n\n    const pitches = this.generate(octave, length);\n    const notes: JMonNote[] = pitches.map((pitch, index) => ({\n      note: JMonConverter.midiToNoteName(pitch),\n      time: JMonConverter.timeToMusicalTime(index),\n      duration,\n      velocity\n    }));\n\n    return {\n      label,\n      notes,\n      synth: {\n        type: 'Synth',\n        options: {\n          oscillator: { type: 'sine' },\n          envelope: { attack: 0.02, decay: 0.1, sustain: 0.3, release: 0.5 }\n        }\n      }\n    };\n  }\n\n  /**\n   * Create Observable Plot visualization of scale pitches\n   */\n  public plotScale(octave: number = 4, length: number = 8, options?: any): ReturnType<typeof import('../../visualization/plots/PlotRenderer').PlotRenderer.bar> {\n    const { PlotRenderer } = require('../../visualization/plots/PlotRenderer');\n    const pitches = this.generate(octave, length);\n    const noteNames = this.getNoteNames();\n    \n    const data = {\n      x: pitches.map((_, i) => noteNames[i % noteNames.length] || `${i + 1}`),\n      y: pitches,\n      color: pitches.map(() => 'steelblue')\n    };\n\n    return PlotRenderer.bar(data, {\n      title: `${this.tonic} ${this.mode} Scale`,\n      width: 600,\n      height: 300,\n      showAxis: true,\n      ...options\n    });\n  }\n\n  /**\n   * Create Observable Plot radar chart of scale intervals\n   */\n  public plotIntervals(options?: any): ReturnType<typeof import('../../visualization/plots/PlotRenderer').PlotRenderer.radar> {\n    const { PlotRenderer } = require('../../visualization/plots/PlotRenderer');\n    const intervals = MusicTheoryConstants.scaleIntervals[this.mode];\n    const noteNames = this.getNoteNames();\n    \n    const data = {\n      x: intervals.map((_, i) => i * (360 / intervals.length)), // Convert to angles\n      y: intervals.map(() => 1), // All points at same radius\n      color: noteNames.map(() => 'steelblue')\n    };\n\n    return PlotRenderer.radar(data, {\n      title: `${this.tonic} ${this.mode} Scale Intervals`,\n      width: 400,\n      height: 400,\n      ...options\n    });\n  }\n}","import { ChromaticNote, ScaleMode, ChordProgression } from '../../types/music';\nimport { Pitch } from '../../types/common';\n// import { MusicTheoryConstants } from './MusicTheoryConstants';\nimport { Scale } from './Scale';\nimport { JMonSequence, JMonNote } from '../../types/jmon';\nimport { JMonConverter } from '../../io/jmon/conversion';\n\nexport interface ProgressionOptions {\n  length?: number;\n  octave?: number;\n  voicing?: 'triad' | 'seventh' | 'extended';\n}\n\nexport class Progression {\n  private scale: Scale;\n\n  constructor(tonic: ChromaticNote, mode: ScaleMode = 'major') {\n    this.scale = new Scale(tonic, mode);\n  }\n\n  public generate(options: ProgressionOptions = {}): ChordProgression {\n    const { length = 4, voicing = 'triad' } = options;\n    \n    // Common chord progressions by mode\n    const progressionPatterns: Record<ScaleMode, number[][]> = {\n      major: [[1, 4, 5, 1], [1, 6, 4, 5], [1, 5, 6, 4], [2, 5, 1, 1]],\n      minor: [[1, 4, 5, 1], [1, 6, 4, 5], [1, 7, 6, 7], [1, 3, 7, 1]],\n      dorian: [[1, 4, 1, 4], [1, 7, 4, 1], [1, 2, 7, 1]],\n      phrygian: [[1, 2, 1, 2], [1, 7, 6, 1]],\n      lydian: [[1, 2, 1, 2], [1, 5, 4, 1]],\n      mixolydian: [[1, 7, 4, 1], [1, 4, 7, 1]],\n      locrian: [[1, 2, 1, 2]],\n    };\n\n    const patterns = progressionPatterns[this.scale.mode];\n    const selectedPattern = patterns[Math.floor(Math.random() * patterns.length)]!;\n    \n    // Adjust pattern length to match requested length\n    const chords: string[] = [];\n    for (let i = 0; i < length; i++) {\n      const degree = selectedPattern[i % selectedPattern.length]!;\n      const chord = this.generateChord(degree, voicing);\n      chords.push(chord);\n    }\n\n    return {\n      chords,\n      key: this.scale.tonic,\n      mode: this.scale.mode,\n    };\n  }\n\n  public generateChord(degree: number, voicing: 'triad' | 'seventh' | 'extended' = 'triad'): string {\n    const scaleNotes = this.scale.getNoteNames();\n    const rootNote = scaleNotes[(degree - 1) % scaleNotes.length]!;\n    \n    // Determine chord quality based on scale degree and mode\n    const chordQuality = this.getChordQuality(degree);\n    \n    let chordSymbol = rootNote;\n    \n    switch (voicing) {\n      case 'triad':\n        chordSymbol += chordQuality;\n        break;\n      case 'seventh':\n        chordSymbol += chordQuality;\n        chordSymbol += this.getSeventhQuality(degree);\n        break;\n      case 'extended':\n        chordSymbol += chordQuality;\n        chordSymbol += this.getSeventhQuality(degree);\n        if (Math.random() > 0.5) {\n          chordSymbol += this.getExtension();\n        }\n        break;\n    }\n    \n    return chordSymbol;\n  }\n\n  public computeCircle(steps = 8): ChordProgression {\n    // Circle of fifths progression\n    const chords: string[] = [];\n    let currentDegree = 1;\n    \n    for (let i = 0; i < steps; i++) {\n      const chord = this.generateChord(currentDegree, 'triad');\n      chords.push(chord);\n      \n      // Move by fifth (4 scale degrees up)\n      currentDegree = ((currentDegree + 3) % 7) + 1;\n    }\n    \n    return {\n      chords,\n      key: this.scale.tonic,\n      mode: this.scale.mode,\n    };\n  }\n\n  public getChordPitches(degree: number, octave = 4, voicing: 'triad' | 'seventh' = 'triad'): Pitch[] {\n    const intervals = voicing === 'triad' ? [0, 2, 4] : [0, 2, 4, 6];\n    \n    return intervals.map(interval => {\n      const scaleDegree = ((degree - 1 + interval) % 7) + 1;\n      return this.scale.getDegree(scaleDegree, octave);\n    });\n  }\n\n  private getChordQuality(degree: number): string {\n    const qualityMap: Record<ScaleMode, Record<number, string>> = {\n      major: { 1: '', 2: 'm', 3: 'm', 4: '', 5: '', 6: 'm', 7: 'dim' },\n      minor: { 1: 'm', 2: 'dim', 3: '', 4: 'm', 5: 'm', 6: '', 7: '' },\n      dorian: { 1: 'm', 2: 'm', 3: '', 4: '', 5: 'm', 6: 'dim', 7: '' },\n      phrygian: { 1: 'm', 2: '', 3: '', 4: 'm', 5: 'dim', 6: '', 7: 'm' },\n      lydian: { 1: '', 2: '', 3: 'm', 4: 'dim', 5: '', 6: 'm', 7: 'm' },\n      mixolydian: { 1: '', 2: 'm', 3: 'dim', 4: '', 5: 'm', 6: 'm', 7: '' },\n      locrian: { 1: 'dim', 2: '', 3: 'm', 4: 'm', 5: '', 6: '', 7: 'm' },\n    };\n\n    return qualityMap[this.scale.mode]?.[degree] || '';\n  }\n\n  private getSeventhQuality(degree: number): string {\n    // Simplified seventh quality logic\n    const quality = this.getChordQuality(degree);\n    if (quality === 'm') return '7';\n    if (quality === 'dim') return 'ø7';\n    if (degree === 5 || degree === 7) return '7';\n    return 'maj7';\n  }\n\n  private getExtension(): string {\n    const extensions = ['add9', 'sus2', 'sus4', '6'];\n    return extensions[Math.floor(Math.random() * extensions.length)]!;\n  }\n\n  public toJMonSequence(\n    options: {\n      length?: number;\n      octave?: number;\n      duration?: string;\n      velocity?: number;\n      label?: string;\n      voicing?: 'triad' | 'seventh';\n      strumPattern?: boolean;\n    } = {}\n  ): JMonSequence {\n    const {\n      length = 4,\n      octave = 4,\n      duration = '1n',\n      velocity = 0.8,\n      label = `${this.scale.tonic} ${this.scale.mode} progression`,\n      voicing = 'triad',\n      strumPattern = false\n    } = options;\n\n    const progression = this.generate({ length, voicing });\n    const notes: JMonNote[] = [];\n\n    progression.chords.forEach((_, chordIndex) => {\n      const chordDegree = ((chordIndex % 7) + 1);\n      const chordPitches = this.getChordPitches(chordDegree, octave, voicing);\n      \n      if (strumPattern) {\n        // Arpeggiate the chord\n        chordPitches.forEach((pitch, noteIndex) => {\n          notes.push({\n            note: JMonConverter.midiToNoteName(pitch),\n            time: JMonConverter.timeToMusicalTime(chordIndex + noteIndex * 0.1),\n            duration: '8n',\n            velocity: velocity * (noteIndex === 0 ? 1 : 0.8)\n          });\n        });\n      } else {\n        // Play chord as block\n        notes.push({\n          note: chordPitches.map(pitch => JMonConverter.midiToNoteName(pitch)),\n          time: JMonConverter.timeToMusicalTime(chordIndex),\n          duration,\n          velocity\n        });\n      }\n    });\n\n    return {\n      label,\n      notes,\n      synth: {\n        type: 'PolySynth',\n        options: {\n          oscillator: { type: 'sawtooth' },\n          envelope: { attack: 0.02, decay: 0.1, sustain: 0.5, release: 1.0 }\n        }\n      }\n    };\n  }\n}","import { Scale } from '../theory/Scale';\n\nexport interface VoicingOptions {\n  voiceCount?: number;\n  voiceRange?: [number, number];\n  intervalLimits?: [number, number];\n  doubling?: boolean;\n  inversion?: number;\n}\n\nexport interface ChordVoicing {\n  notes: number[];\n  root: number;\n  quality: string;\n  inversion: number;\n}\n\n/**\n * Voice leading and harmonization system\n * Based on the Python djalgo harmony module (Voice class)\n */\nexport class Voice {\n  private scale: Scale;\n  private options: Required<VoicingOptions>;\n\n  constructor(scale: Scale, options: VoicingOptions = {}) {\n    this.scale = scale;\n    this.options = {\n      voiceCount: options.voiceCount || 4,\n      voiceRange: options.voiceRange || [48, 84], // C3 to C6\n      intervalLimits: options.intervalLimits || [3, 12], // Minor 3rd to octave\n      doubling: options.doubling || true,\n      inversion: options.inversion || 0\n    };\n  }\n\n  /**\n   * Harmonize a melody with chords\n   */\n  public harmonizeMelody(melody: number[], chordProgression?: number[]): ChordVoicing[] {\n    const harmonizedChords: ChordVoicing[] = [];\n    \n    for (let i = 0; i < melody.length; i++) {\n      const melodyNote = melody[i];\n      const chordRoot = chordProgression ? chordProgression[i % chordProgression.length] : this.findBestChordRoot(melodyNote);\n      \n      const chord = this.buildChord(chordRoot, melodyNote);\n      harmonizedChords.push(chord);\n    }\n    \n    return harmonizedChords;\n  }\n\n  /**\n   * Find the best chord root for a given melody note\n   */\n  private findBestChordRoot(melodyNote: number): number {\n    const scaleDegrees = this.scale.getScaleDegrees();\n    const melodyPitchClass = ((melodyNote % 12) + 12) % 12;\n    \n    // Find scale degrees that contain the melody note\n    const possibleRoots: number[] = [];\n    \n    for (let i = 0; i < scaleDegrees.length; i++) {\n      const triad = this.getTriadForDegree(i);\n      if (triad.some(note => ((note % 12) + 12) % 12 === melodyPitchClass)) {\n        possibleRoots.push(scaleDegrees[i]);\n      }\n    }\n    \n    // Return the first valid root, or default to tonic\n    return possibleRoots.length > 0 ? possibleRoots[0] : scaleDegrees[0];\n  }\n\n  /**\n   * Get triad for a scale degree\n   */\n  private getTriadForDegree(degree: number): number[] {\n    const scaleDegrees = this.scale.getScaleDegrees();\n    const root = scaleDegrees[degree % scaleDegrees.length];\n    const third = scaleDegrees[(degree + 2) % scaleDegrees.length];\n    const fifth = scaleDegrees[(degree + 4) % scaleDegrees.length];\n    \n    return [root, third, fifth];\n  }\n\n  /**\n   * Build a chord with proper voicing\n   */\n  private buildChord(root: number, melodyNote: number): ChordVoicing {\n    const triad = this.getTriadFromRoot(root);\n    const chordTones = this.distributeVoices(triad, melodyNote);\n    \n    return {\n      notes: chordTones,\n      root: root,\n      quality: this.determineChordQuality(triad),\n      inversion: this.options.inversion\n    };\n  }\n\n  /**\n   * Get triad notes from a root\n   */\n  private getTriadFromRoot(root: number): number[] {\n    const scaleDegrees = this.scale.getScaleDegrees();\n    const rootIndex = scaleDegrees.indexOf(root % 12);\n    \n    if (rootIndex === -1) return [root, root + 4, root + 7]; // Default major triad\n    \n    return this.getTriadForDegree(rootIndex);\n  }\n\n  /**\n   * Distribute chord tones across voices\n   */\n  private distributeVoices(triad: number[], melodyNote: number): number[] {\n    const voices: number[] = [];\n    const [root, third, fifth] = triad;\n    const melodyOctave = Math.floor(melodyNote / 12);\n    \n    // Ensure melody note is the highest voice\n    voices.push(melodyNote);\n    \n    // Add lower voices\n    for (let i = 1; i < this.options.voiceCount; i++) {\n      const targetOctave = melodyOctave - Math.ceil(i / triad.length);\n      let chordTone: number;\n      \n      switch (i % 3) {\n        case 1:\n          chordTone = targetOctave * 12 + fifth;\n          break;\n        case 2:\n          chordTone = targetOctave * 12 + third;\n          break;\n        default:\n          chordTone = targetOctave * 12 + root;\n      }\n      \n      // Ensure voice is within range\n      chordTone = this.constrainToRange(chordTone);\n      voices.unshift(chordTone); // Add to beginning (lower voices first)\n    }\n    \n    return this.applyVoiceLeadingRules(voices);\n  }\n\n  /**\n   * Constrain note to voice range\n   */\n  private constrainToRange(note: number): number {\n    const [minNote, maxNote] = this.options.voiceRange;\n    \n    while (note < minNote) note += 12;\n    while (note > maxNote) note -= 12;\n    \n    return note;\n  }\n\n  /**\n   * Apply voice leading rules\n   */\n  private applyVoiceLeadingRules(voices: number[]): number[] {\n    const improvedVoices = [...voices];\n    \n    // Check and fix voice crossing\n    for (let i = 1; i < improvedVoices.length; i++) {\n      if (improvedVoices[i] <= improvedVoices[i - 1]) {\n        // Voice crossing detected, adjust upper voice\n        improvedVoices[i] = improvedVoices[i - 1] + this.options.intervalLimits[0];\n      }\n    }\n    \n    // Check interval limits\n    for (let i = 1; i < improvedVoices.length; i++) {\n      const interval = improvedVoices[i] - improvedVoices[i - 1];\n      const [minInterval, maxInterval] = this.options.intervalLimits;\n      \n      if (interval < minInterval) {\n        improvedVoices[i] = improvedVoices[i - 1] + minInterval;\n      } else if (interval > maxInterval) {\n        improvedVoices[i] = improvedVoices[i - 1] + maxInterval;\n      }\n    }\n    \n    return improvedVoices;\n  }\n\n  /**\n   * Determine chord quality from triad\n   */\n  private determineChordQuality(triad: number[]): string {\n    if (triad.length < 3) return 'unknown';\n    \n    const [root, third, fifth] = triad.map(note => note % 12);\n    const thirdInterval = ((third - root + 12) % 12);\n    const fifthInterval = ((fifth - root + 12) % 12);\n    \n    if (thirdInterval === 4 && fifthInterval === 7) return 'major';\n    if (thirdInterval === 3 && fifthInterval === 7) return 'minor';\n    if (thirdInterval === 4 && fifthInterval === 6) return 'augmented';\n    if (thirdInterval === 3 && fifthInterval === 6) return 'diminished';\n    \n    return 'unknown';\n  }\n\n  /**\n   * Create smooth voice leading between two chords\n   */\n  public smoothVoiceLeading(fromChord: ChordVoicing, toChord: ChordVoicing): ChordVoicing {\n    const improvedToChord = { ...toChord };\n    const fromNotes = fromChord.notes;\n    const toNotes = [...toChord.notes];\n    \n    // Find the best voice leading by minimizing total voice movement\n    const bestVoicing = this.findMinimalMovement(fromNotes, toNotes);\n    improvedToChord.notes = bestVoicing;\n    \n    return improvedToChord;\n  }\n\n  /**\n   * Find voicing with minimal voice movement\n   */\n  private findMinimalMovement(fromNotes: number[], toNotes: number[]): number[] {\n    const result = new Array(fromNotes.length);\n    const usedIndices = new Set<number>();\n    \n    // For each voice in the from chord, find the closest note in the to chord\n    for (let fromIndex = 0; fromIndex < fromNotes.length; fromIndex++) {\n      let minDistance = Infinity;\n      let bestToIndex = 0;\n      \n      for (let toIndex = 0; toIndex < toNotes.length; toIndex++) {\n        if (usedIndices.has(toIndex)) continue;\n        \n        const distance = Math.abs(fromNotes[fromIndex] - toNotes[toIndex]);\n        if (distance < minDistance) {\n          minDistance = distance;\n          bestToIndex = toIndex;\n        }\n      }\n      \n      result[fromIndex] = toNotes[bestToIndex];\n      usedIndices.add(bestToIndex);\n    }\n    \n    return result;\n  }\n\n  /**\n   * Add seventh to a chord\n   */\n  public addSeventh(chord: ChordVoicing): ChordVoicing {\n    const scaleDegrees = this.scale.getScaleDegrees();\n    const rootIndex = scaleDegrees.indexOf(chord.root % 12);\n    \n    if (rootIndex !== -1) {\n      const seventh = scaleDegrees[(rootIndex + 6) % scaleDegrees.length];\n      const seventhNote = Math.floor(chord.root / 12) * 12 + seventh;\n      \n      return {\n        ...chord,\n        notes: [...chord.notes, seventhNote],\n        quality: chord.quality + '7'\n      };\n    }\n    \n    return chord;\n  }\n\n  /**\n   * Create chord inversions\n   */\n  public invert(chord: ChordVoicing, inversion: number): ChordVoicing {\n    const notes = [...chord.notes].sort((a, b) => a - b);\n    const inversionCount = inversion % notes.length;\n    \n    for (let i = 0; i < inversionCount; i++) {\n      const lowestNote = notes.shift()!;\n      notes.push(lowestNote + 12);\n    }\n    \n    return {\n      ...chord,\n      notes: notes,\n      inversion: inversionCount\n    };\n  }\n\n  /**\n   * Generate four-part harmony for a melody\n   */\n  public fourPartHarmony(melody: number[]): ChordVoicing[] {\n    const oldVoiceCount = this.options.voiceCount;\n    this.options.voiceCount = 4;\n    \n    const harmony = this.harmonizeMelody(melody);\n    \n    // Apply smooth voice leading\n    for (let i = 1; i < harmony.length; i++) {\n      harmony[i] = this.smoothVoiceLeading(harmony[i - 1], harmony[i]);\n    }\n    \n    this.options.voiceCount = oldVoiceCount;\n    return harmony;\n  }\n}","export interface OrnamentOptions {\n  density?: number;        // Probability of ornamentation (0-1)\n  maxInterval?: number;    // Maximum interval for ornaments\n  rhythmicVariation?: boolean;\n  graceNoteDuration?: number;\n}\n\nexport interface OrnamentedNote {\n  originalNote: number;\n  ornamentedSequence: number[];\n  durations: number[];\n  type: string;\n}\n\n/**\n * Musical ornamentation system\n * Based on the Python djalgo harmony module (Ornament class)\n */\nexport class Ornament {\n  private options: Required<OrnamentOptions>;\n\n  constructor(options: OrnamentOptions = {}) {\n    this.options = {\n      density: options.density || 0.3,\n      maxInterval: options.maxInterval || 7,\n      rhythmicVariation: options.rhythmicVariation || true,\n      graceNoteDuration: options.graceNoteDuration || 0.125\n    };\n  }\n\n  /**\n   * Apply ornamentation to a melody\n   */\n  public ornament(melody: number[], durations?: number[]): OrnamentedNote[] {\n    const ornamentedMelody: OrnamentedNote[] = [];\n    \n    for (let i = 0; i < melody.length; i++) {\n      const note = melody[i];\n      const duration = durations?.[i] || 1;\n      \n      if (Math.random() < this.options.density) {\n        const ornamentType = this.selectOrnamentType(note, melody[i + 1], i === melody.length - 1);\n        const ornamented = this.applyOrnament(note, melody[i + 1], ornamentType, duration);\n        ornamentedMelody.push(ornamented);\n      } else {\n        // No ornamentation\n        ornamentedMelody.push({\n          originalNote: note,\n          ornamentedSequence: [note],\n          durations: [duration],\n          type: 'none'\n        });\n      }\n    }\n    \n    return ornamentedMelody;\n  }\n\n  /**\n   * Select appropriate ornament type based on context\n   */\n  private selectOrnamentType(currentNote: number, nextNote?: number, isLast: boolean = false): string {\n    const ornamentTypes = ['grace', 'trill', 'mordent', 'turn'];\n    \n    // Filter based on context\n    const availableTypes = ornamentTypes.filter(type => {\n      switch (type) {\n        case 'grace':\n          return !isLast && nextNote !== undefined;\n        case 'trill':\n        case 'mordent':\n        case 'turn':\n          return true;\n        default:\n          return false;\n      }\n    });\n    \n    return availableTypes[Math.floor(Math.random() * availableTypes.length)];\n  }\n\n  /**\n   * Apply specific ornament to a note\n   */\n  private applyOrnament(note: number, nextNote: number | undefined, type: string, duration: number): OrnamentedNote {\n    switch (type) {\n      case 'grace':\n        return this.addGraceNote(note, nextNote, duration);\n      case 'trill':\n        return this.addTrill(note, duration);\n      case 'mordent':\n        return this.addMordent(note, duration);\n      case 'turn':\n        return this.addTurn(note, duration);\n      case 'arpeggio':\n        return this.addArpeggio(note, duration);\n      case 'slide':\n        return this.addSlide(note, nextNote, duration);\n      default:\n        return {\n          originalNote: note,\n          ornamentedSequence: [note],\n          durations: [duration],\n          type: 'none'\n        };\n    }\n  }\n\n  /**\n   * Add grace note ornamentation\n   */\n  private addGraceNote(note: number, nextNote: number | undefined, duration: number): OrnamentedNote {\n    if (nextNote === undefined) {\n      return {\n        originalNote: note,\n        ornamentedSequence: [note],\n        durations: [duration],\n        type: 'none'\n      };\n    }\n    \n    const graceNote = this.getAuxiliaryNote(note, nextNote);\n    const graceDuration = this.options.graceNoteDuration;\n    const mainDuration = duration - graceDuration;\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: [graceNote, note],\n      durations: [graceDuration, Math.max(0.125, mainDuration)],\n      type: 'grace'\n    };\n  }\n\n  /**\n   * Add trill ornamentation\n   */\n  private addTrill(note: number, duration: number): OrnamentedNote {\n    const upperNote = note + this.getTrillInterval();\n    const trillDuration = duration / 8; // 8 alternations\n    const sequence: number[] = [];\n    const durations: number[] = [];\n    \n    for (let i = 0; i < 8; i++) {\n      sequence.push(i % 2 === 0 ? note : upperNote);\n      durations.push(trillDuration);\n    }\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: sequence,\n      durations: durations,\n      type: 'trill'\n    };\n  }\n\n  /**\n   * Add mordent ornamentation (quick alternation)\n   */\n  private addMordent(note: number, duration: number): OrnamentedNote {\n    const auxiliary = note + (Math.random() < 0.5 ? 1 : -1); // Upper or lower mordent\n    const ornamentDuration = Math.min(duration / 4, this.options.graceNoteDuration);\n    const mainDuration = duration - ornamentDuration * 2;\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: [note, auxiliary, note],\n      durations: [ornamentDuration, ornamentDuration, Math.max(0.125, mainDuration)],\n      type: 'mordent'\n    };\n  }\n\n  /**\n   * Add turn ornamentation (four-note figure)\n   */\n  private addTurn(note: number, duration: number): OrnamentedNote {\n    const upper = note + 1;\n    const lower = note - 1;\n    const noteDuration = duration / 4;\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: [upper, note, lower, note],\n      durations: [noteDuration, noteDuration, noteDuration, noteDuration],\n      type: 'turn'\n    };\n  }\n\n  /**\n   * Add arpeggio ornamentation (broken chord)\n   */\n  private addArpeggio(note: number, duration: number): OrnamentedNote {\n    const chord = this.buildArpeggioChord(note);\n    const noteDuration = duration / chord.length;\n    const durations = Array(chord.length).fill(noteDuration);\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: chord,\n      durations: durations,\n      type: 'arpeggio'\n    };\n  }\n\n  /**\n   * Add slide ornamentation (glissando effect)\n   */\n  private addSlide(note: number, nextNote: number | undefined, duration: number): OrnamentedNote {\n    if (nextNote === undefined || Math.abs(nextNote - note) <= 1) {\n      return {\n        originalNote: note,\n        ornamentedSequence: [note],\n        durations: [duration],\n        type: 'none'\n      };\n    }\n    \n    const steps = Math.min(Math.abs(nextNote - note), 5); // Limit slide length\n    const sequence: number[] = [];\n    const stepDuration = duration / (steps + 1);\n    const durations: number[] = [];\n    \n    const direction = nextNote > note ? 1 : -1;\n    \n    for (let i = 0; i <= steps; i++) {\n      sequence.push(note + i * direction);\n      durations.push(stepDuration);\n    }\n    \n    return {\n      originalNote: note,\n      ornamentedSequence: sequence,\n      durations: durations,\n      type: 'slide'\n    };\n  }\n\n  /**\n   * Get auxiliary note for grace notes\n   */\n  private getAuxiliaryNote(note: number, nextNote: number): number {\n    const interval = nextNote - note;\n    \n    if (Math.abs(interval) <= 2) {\n      // Small interval - use step in opposite direction\n      return note + (interval > 0 ? -1 : 1);\n    } else {\n      // Large interval - use step towards target\n      return note + (interval > 0 ? 1 : -1);\n    }\n  }\n\n  /**\n   * Get trill interval (usually whole or half step)\n   */\n  private getTrillInterval(): number {\n    return Math.random() < 0.7 ? 1 : 2; // 70% half step, 30% whole step\n  }\n\n  /**\n   * Build arpeggio chord from root note\n   */\n  private buildArpeggioChord(root: number): number[] {\n    // Simple triad arpeggio\n    const chord = [root, root + 4, root + 7, root + 12]; // Root, third, fifth, octave\n    \n    // Randomize direction\n    if (Math.random() < 0.5) {\n      return chord.reverse();\n    }\n    \n    return chord;\n  }\n\n  /**\n   * Apply rhythmic ornamentation (syncopation, etc.)\n   */\n  public rhythmicOrnamentation(durations: number[]): number[] {\n    if (!this.options.rhythmicVariation) return durations;\n    \n    const ornamentedDurations = [...durations];\n    \n    for (let i = 0; i < ornamentedDurations.length - 1; i++) {\n      if (Math.random() < this.options.density / 2) {\n        // Create syncopation by borrowing time from next note\n        const borrowAmount = Math.min(ornamentedDurations[i + 1] * 0.25, 0.25);\n        ornamentedDurations[i] += borrowAmount;\n        ornamentedDurations[i + 1] -= borrowAmount;\n      }\n    }\n    \n    return ornamentedDurations;\n  }\n\n  /**\n   * Create compound ornamentation (multiple ornaments)\n   */\n  public compoundOrnamentation(melody: number[], durations?: number[]): OrnamentedNote[] {\n    let ornamentedMelody = this.ornament(melody, durations);\n    \n    // Apply second layer of ornamentation to some notes\n    for (let i = 0; i < ornamentedMelody.length; i++) {\n      if (Math.random() < this.options.density / 3 && ornamentedMelody[i].type === 'none') {\n        const secondOrnamentation = this.applyOrnament(\n          ornamentedMelody[i].originalNote,\n          melody[i + 1],\n          'grace',\n          ornamentedMelody[i].durations[0]\n        );\n        ornamentedMelody[i] = secondOrnamentation;\n      }\n    }\n    \n    return ornamentedMelody;\n  }\n\n  /**\n   * Get ornamentation statistics\n   */\n  public getStatistics(ornamentedMelody: OrnamentedNote[]): {\n    totalNotes: number;\n    ornamentedNotes: number;\n    ornamentationRate: number;\n    ornamentTypes: Record<string, number>;\n  } {\n    const stats = {\n      totalNotes: ornamentedMelody.length,\n      ornamentedNotes: 0,\n      ornamentationRate: 0,\n      ornamentTypes: {} as Record<string, number>\n    };\n    \n    for (const note of ornamentedMelody) {\n      if (note.type !== 'none') {\n        stats.ornamentedNotes++;\n      }\n      \n      stats.ornamentTypes[note.type] = (stats.ornamentTypes[note.type] || 0) + 1;\n    }\n    \n    stats.ornamentationRate = stats.ornamentedNotes / stats.totalNotes;\n    \n    return stats;\n  }\n}","import { Duration } from '../../types/common';\nimport { RhythmPattern } from '../../types/music';\n\nexport interface RhythmOptions {\n  measureLength?: number;\n  complexity?: number;\n  swing?: boolean;\n}\n\nexport class Rhythm {\n  public readonly measureLength: number;\n  public durations: Duration[];\n\n  constructor(measureLength = 4.0, durations: Duration[] = []) {\n    this.measureLength = measureLength;\n    this.durations = durations.length > 0 ? [...durations] : this.generateBasicPattern();\n  }\n\n  public random(options: RhythmOptions = {}): RhythmPattern {\n    const { measureLength = this.measureLength, complexity = 0.5 } = options;\n    \n    const possibleDurations = [0.25, 0.5, 1.0, 1.5, 2.0];\n    const durations: Duration[] = [];\n    let currentLength = 0;\n    \n    while (currentLength < measureLength) {\n      const remaining = measureLength - currentLength;\n      const validDurations = possibleDurations.filter(d => d <= remaining);\n      \n      if (validDurations.length === 0) {\n        // Fill remaining with rest\n        if (remaining > 0) {\n          durations.push(remaining);\n        }\n        break;\n      }\n      \n      // Choose duration based on complexity\n      let chosenDuration: Duration;\n      if (Math.random() < complexity) {\n        // More complex rhythms favor shorter durations\n        chosenDuration = validDurations[0]!;\n      } else {\n        // Simpler rhythms favor longer durations\n        chosenDuration = validDurations[validDurations.length - 1]!;\n      }\n      \n      durations.push(chosenDuration);\n      currentLength += chosenDuration;\n    }\n    \n    return {\n      durations,\n      measureLength,\n      accents: this.generateAccents(durations),\n    };\n  }\n\n  public static beatcycle(cycles: number[], measures = 4): RhythmPattern[] {\n    const patterns: RhythmPattern[] = [];\n    \n    for (let m = 0; m < measures; m++) {\n      const durations: Duration[] = [];\n      let totalLength = 0;\n      \n      for (const cycle of cycles) {\n        const beatLength = 4.0 / cycle; // Assuming 4/4 time\n        \n        for (let i = 0; i < cycle; i++) {\n          durations.push(beatLength);\n          totalLength += beatLength;\n        }\n        \n        if (totalLength >= 4.0) break; // Don't exceed measure length\n      }\n      \n      patterns.push({\n        durations,\n        measureLength: 4.0,\n        accents: durations.map((_, i) => i % cycles[0]! === 0),\n      });\n    }\n    \n    return patterns;\n  }\n\n  public static isorhythm(talea: Duration[], color: number[], repetitions = 4): RhythmPattern {\n    const durations: Duration[] = [];\n    let colorIndex = 0;\n    \n    for (let rep = 0; rep < repetitions; rep++) {\n      for (const duration of talea) {\n        durations.push(duration);\n        colorIndex = (colorIndex + 1) % color.length;\n      }\n    }\n    \n    const totalLength = durations.reduce((sum, dur) => sum + dur, 0);\n    \n    return {\n      durations,\n      measureLength: totalLength,\n      accents: durations.map((_, i) => color[i % color.length] === 1),\n    };\n  }\n\n  public darwin(options: RhythmOptions = {}): RhythmPattern {\n    // Simplified genetic algorithm for rhythm evolution\n    const { measureLength = this.measureLength } = options;\n    \n    // Start with current rhythm or random\n    let bestRhythm = this.durations.length > 0 ? \n      { durations: [...this.durations], measureLength, accents: this.generateAccents(this.durations) } :\n      this.random(options);\n    \n    let bestFitness = this.calculateFitness(bestRhythm);\n    \n    // Evolve for several generations\n    for (let gen = 0; gen < 10; gen++) {\n      // Create variations\n      const variations = Array.from({ length: 5 }, () => this.mutateRhythm(bestRhythm));\n      \n      for (const variation of variations) {\n        const fitness = this.calculateFitness(variation);\n        if (fitness > bestFitness) {\n          bestRhythm = variation;\n          bestFitness = fitness;\n        }\n      }\n    }\n    \n    return bestRhythm;\n  }\n\n  private generateBasicPattern(): Duration[] {\n    return [1.0, 1.0, 1.0, 1.0]; // Four quarter notes\n  }\n\n  private generateAccents(durations: Duration[]): boolean[] {\n    return durations.map((_, i) => i === 0 || (i % 4 === 0)); // Accent first beat and strong beats\n  }\n\n  private calculateFitness(rhythm: RhythmPattern): number {\n    let fitness = 0;\n    \n    // Prefer rhythms that fill the measure completely\n    const totalDuration = rhythm.durations.reduce((sum, dur) => sum + dur, 0);\n    if (Math.abs(totalDuration - rhythm.measureLength) < 0.01) {\n      fitness += 10;\n    }\n    \n    // Prefer some variation in duration\n    const uniqueDurations = new Set(rhythm.durations).size;\n    fitness += uniqueDurations * 2;\n    \n    // Prefer reasonable number of notes (not too sparse, not too dense)\n    const noteCount = rhythm.durations.length;\n    if (noteCount >= 2 && noteCount <= 16) {\n      fitness += 5;\n    }\n    \n    return fitness;\n  }\n\n  private mutateRhythm(rhythm: RhythmPattern): RhythmPattern {\n    const durations = [...rhythm.durations];\n    const possibleDurations = [0.25, 0.5, 1.0, 1.5, 2.0];\n    \n    // Randomly modify one duration\n    if (durations.length > 0) {\n      const index = Math.floor(Math.random() * durations.length);\n      durations[index] = possibleDurations[Math.floor(Math.random() * possibleDurations.length)]!;\n    }\n    \n    // Normalize to fit measure\n    const total = durations.reduce((sum, dur) => sum + dur, 0);\n    if (total !== rhythm.measureLength && total > 0) {\n      const factor = rhythm.measureLength / total;\n      for (let i = 0; i < durations.length; i++) {\n        durations[i] *= factor;\n      }\n    }\n    \n    return {\n      durations,\n      measureLength: rhythm.measureLength,\n      accents: this.generateAccents(durations),\n    };\n  }\n}","import { MusicalNote } from '../../types/music';\n\nexport interface RhythmNote {\n  duration: number;\n  offset: number;\n}\n\n/**\n * Advanced rhythm algorithms matching the Python djalgo implementation\n */\nexport class AdvancedRhythm {\n  \n  /**\n   * Isorhythm implementation - merges durations and pitches cyclically\n   */\n  public static isorhythm(pitches: (number | null)[], durations: number[]): MusicalNote[] {\n    // Calculate LCM to find the cycle length\n    const lcm = this.lcm(pitches.length, durations.length);\n    \n    // Repeat patterns to match LCM\n    const pRepeated = this.repeatToLength(pitches, lcm);\n    const dRepeated = this.repeatToLength(durations, lcm);\n    \n    // Create notes with proper offsets\n    const notes: MusicalNote[] = [];\n    let currentOffset = 0;\n    \n    for (let i = 0; i < lcm; i++) {\n      notes.push({\n        pitch: pRepeated[i] || undefined,\n        duration: dRepeated[i]!,\n        offset: currentOffset,\n        velocity: 0.8\n      });\n      currentOffset += dRepeated[i]!;\n    }\n    \n    return notes;\n  }\n\n  /**\n   * Beat cycle implementation - maps pitches to durations cyclically\n   */\n  public static beatcycle(pitches: (number | null)[], durations: number[]): MusicalNote[] {\n    const notes: MusicalNote[] = [];\n    let currentOffset = 0;\n    let durationIndex = 0;\n    \n    for (const pitch of pitches) {\n      const duration = durations[durationIndex % durations.length]!;\n      \n      notes.push({\n        pitch: pitch || undefined,\n        duration,\n        offset: currentOffset,\n        velocity: 0.8\n      });\n      \n      currentOffset += duration;\n      durationIndex++;\n    }\n    \n    return notes;\n  }\n\n  /**\n   * Simple LCM calculation\n   */\n  private static lcm(a: number, b: number): number {\n    return Math.abs(a * b) / this.gcd(a, b);\n  }\n\n  /**\n   * Simple GCD calculation\n   */\n  private static gcd(a: number, b: number): number {\n    while (b !== 0) {\n      const temp = b;\n      b = a % b;\n      a = temp;\n    }\n    return a;\n  }\n\n  /**\n   * Repeat array to specific length\n   */\n  private static repeatToLength<T>(array: T[], length: number): T[] {\n    const result: T[] = [];\n    for (let i = 0; i < length; i++) {\n      result.push(array[i % array.length]!);\n    }\n    return result;\n  }\n}\n\n/**\n * Enhanced Rhythm class with genetic algorithm support\n */\nexport class Rhythm {\n  public measureLength: number;\n  public durations: number[];\n\n  constructor(measureLength: number, durations: number[]) {\n    this.measureLength = measureLength;\n    this.durations = durations;\n  }\n\n  /**\n   * Generate random rhythm with constraints\n   */\n  public random(\n    seed?: number, \n    restProbability: number = 0, \n    maxIter: number = 100\n  ): RhythmNote[] {\n    if (seed !== undefined) {\n      // Simple seed-based random (for reproducibility)\n      Math.random = this.seededRandom(seed);\n    }\n\n    const rhythm: RhythmNote[] = [];\n    let totalLength = 0;\n    let nIter = 0;\n\n    while (totalLength < this.measureLength) {\n      if (nIter >= maxIter) {\n        console.warn('Max iterations reached. The sum of the durations is not equal to the measure length.');\n        break;\n      }\n\n      const duration = this.durations[Math.floor(Math.random() * this.durations.length)]!;\n      \n      if (totalLength + duration > this.measureLength) {\n        continue;\n      }\n      \n      if (Math.random() < restProbability) {\n        continue;\n      }\n\n      rhythm.push({\n        duration,\n        offset: totalLength\n      });\n      \n      totalLength += duration;\n      nIter++;\n    }\n\n    return rhythm;\n  }\n\n  /**\n   * Genetic algorithm for rhythm evolution\n   */\n  public darwin(\n    seed?: number,\n    populationSize: number = 10,\n    maxGenerations: number = 50,\n    mutationRate: number = 0.1\n  ): RhythmNote[] {\n    const ga = new GeneticRhythm(\n      seed,\n      populationSize,\n      this.measureLength,\n      maxGenerations,\n      mutationRate,\n      this.durations\n    );\n    return ga.generate();\n  }\n\n  /**\n   * Simple seeded random number generator\n   */\n  private seededRandom(seed: number): () => number {\n    let m = 0x80000000; // 2**31\n    let a = 1103515245;\n    let c = 12345;\n    let state = seed;\n    \n    return function() {\n      state = (a * state + c) % m;\n      return state / (m - 1);\n    };\n  }\n}\n\n/**\n * Genetic algorithm for rhythm generation\n */\nexport class GeneticRhythm {\n  private populationSize: number;\n  private measureLength: number;\n  private maxGenerations: number;\n  private mutationRate: number;\n  private durations: number[];\n  private population: RhythmNote[][];\n\n  constructor(\n    seed: number | undefined,\n    populationSize: number,\n    measureLength: number,\n    maxGenerations: number,\n    mutationRate: number,\n    durations: number[]\n  ) {\n    if (seed !== undefined) {\n      // Set up seeded random\n      Math.random = this.seededRandom(seed);\n    }\n\n    this.populationSize = populationSize;\n    this.measureLength = measureLength;\n    this.maxGenerations = maxGenerations;\n    this.mutationRate = mutationRate;\n    this.durations = durations;\n    this.population = this.initializePopulation();\n  }\n\n  /**\n   * Initialize random population\n   */\n  private initializePopulation(): RhythmNote[][] {\n    const population: RhythmNote[][] = [];\n    \n    for (let i = 0; i < this.populationSize; i++) {\n      population.push(this.createRandomRhythm());\n    }\n    \n    return population;\n  }\n\n  /**\n   * Create a single random rhythm\n   */\n  private createRandomRhythm(): RhythmNote[] {\n    const rhythm: RhythmNote[] = [];\n    let totalLength = 0;\n\n    while (totalLength < this.measureLength) {\n      const remaining = this.measureLength - totalLength;\n      const noteLength = this.durations[Math.floor(Math.random() * this.durations.length)]!;\n      \n      if (noteLength <= remaining) {\n        rhythm.push({\n          duration: noteLength,\n          offset: totalLength\n        });\n        totalLength += noteLength;\n      } else {\n        break;\n      }\n    }\n\n    return rhythm;\n  }\n\n  /**\n   * Evaluate fitness of a rhythm\n   */\n  private evaluateFitness(rhythm: RhythmNote[]): number {\n    const totalLength = rhythm.reduce((sum, note) => sum + note.duration, 0);\n    return Math.abs(this.measureLength - totalLength);\n  }\n\n  /**\n   * Select parent for reproduction\n   */\n  private selectParent(): RhythmNote[] {\n    const parent1 = this.population[Math.floor(Math.random() * this.population.length)]!;\n    const parent2 = this.population[Math.floor(Math.random() * this.population.length)]!;\n    \n    return this.evaluateFitness(parent1) < this.evaluateFitness(parent2) ? parent1 : parent2;\n  }\n\n  /**\n   * Crossover two parent rhythms\n   */\n  private crossover(parent1: RhythmNote[], parent2: RhythmNote[]): RhythmNote[] {\n    if (parent1.length === 0 || parent2.length === 0) {\n      return parent1.length > parent2.length ? [...parent1] : [...parent2];\n    }\n\n    const crossoverPoint = Math.floor(Math.random() * Math.min(parent1.length, parent2.length));\n    const child = [\n      ...parent1.slice(0, crossoverPoint),\n      ...parent2.slice(crossoverPoint)\n    ];\n\n    return this.ensureMeasureLength(child);\n  }\n\n  /**\n   * Ensure rhythm fits within measure length\n   */\n  private ensureMeasureLength(rhythm: RhythmNote[]): RhythmNote[] {\n    let totalLength = 0;\n    const adjustedRhythm: RhythmNote[] = [];\n\n    for (let i = 0; i < rhythm.length; i++) {\n      const note = rhythm[i]!;\n      if (totalLength + note.duration <= this.measureLength) {\n        adjustedRhythm.push({\n          duration: note.duration,\n          offset: totalLength\n        });\n        totalLength += note.duration;\n      } else {\n        break;\n      }\n    }\n\n    return adjustedRhythm;\n  }\n\n  /**\n   * Mutate a rhythm\n   */\n  private mutate(rhythm: RhythmNote[]): RhythmNote[] {\n    if (Math.random() > this.mutationRate || rhythm.length === 0) {\n      return [...rhythm];\n    }\n\n    const mutatedRhythm = [...rhythm];\n    const index = Math.floor(Math.random() * mutatedRhythm.length);\n    const note = mutatedRhythm[index]!;\n    \n    // Calculate maximum possible duration for this position\n    const nextOffset = index < mutatedRhythm.length - 1 \n      ? mutatedRhythm[index + 1]!.offset \n      : this.measureLength;\n    const maxNewDuration = nextOffset - note.offset;\n    \n    // Find valid durations\n    const validDurations = this.durations.filter(d => d <= maxNewDuration);\n    \n    if (validDurations.length > 0) {\n      const newDuration = validDurations[Math.floor(Math.random() * validDurations.length)]!;\n      mutatedRhythm[index] = {\n        duration: newDuration,\n        offset: note.offset\n      };\n    }\n\n    return mutatedRhythm;\n  }\n\n  /**\n   * Run the genetic algorithm\n   */\n  public generate(): RhythmNote[] {\n    for (let generation = 0; generation < this.maxGenerations; generation++) {\n      const newPopulation: RhythmNote[][] = [];\n      \n      for (let i = 0; i < this.populationSize; i++) {\n        const parent1 = this.selectParent();\n        const parent2 = this.selectParent();\n        let child = this.crossover(parent1, parent2);\n        child = this.mutate(child);\n        \n        // Sort by offset\n        child.sort((a, b) => a.offset - b.offset);\n        newPopulation.push(child);\n      }\n      \n      this.population = newPopulation;\n    }\n\n    // Return best rhythm\n    const bestRhythm = this.population.reduce((best, current) =>\n      this.evaluateFitness(current) < this.evaluateFitness(best) ? current : best\n    );\n\n    return bestRhythm.sort((a, b) => a.offset - b.offset);\n  }\n\n  /**\n   * Simple seeded random number generator\n   */\n  private seededRandom(seed: number): () => number {\n    let m = 0x80000000;\n    let a = 1103515245;\n    let c = 12345;\n    let state = seed;\n    \n    return function() {\n      state = (a * state + c) % m;\n      return state / (m - 1);\n    };\n  }\n}","import { MusicalNote } from '../../types/music';\n\nexport interface Motif {\n  id: string;\n  name: string;\n  artist?: string;\n  instrument: string;\n  scale: string;\n  tags: string[];\n  measures: number;\n  notes: MusicalNote[];\n  metadata?: Record<string, any>;\n}\n\nexport interface MotifSearchOptions {\n  artist?: string;\n  instrument?: string;\n  scale?: string;\n  tag?: string;\n  minMeasures?: number;\n  maxMeasures?: number;\n}\n\n/**\n * Motif bank system for storing and searching musical patterns\n * Based on the Python djalgo MotifBank implementation\n */\nexport class MotifBank {\n  private motifs: Motif[];\n\n  constructor(motifs: Motif[] = []) {\n    this.motifs = motifs;\n  }\n\n  /**\n   * Load motifs from JSON data\n   */\n  public static fromJSON(jsonData: any[]): MotifBank {\n    const motifs: Motif[] = jsonData.map(data => ({\n      id: data.id || Math.random().toString(36).substr(2, 9),\n      name: data.name || 'Untitled',\n      artist: data.artist,\n      instrument: data.instrument || 'piano',\n      scale: data.scale || 'major',\n      tags: data.tags || [],\n      measures: data.measures || 1,\n      notes: data.notes || [],\n      metadata: data.metadata\n    }));\n\n    return new MotifBank(motifs);\n  }\n\n  /**\n   * Get total number of motifs\n   */\n  public get length(): number {\n    return this.motifs.length;\n  }\n\n  /**\n   * Get motif by index\n   */\n  public get(index: number): Motif | undefined {\n    return this.motifs[index];\n  }\n\n  /**\n   * Get motif by ID\n   */\n  public getById(id: string): Motif | undefined {\n    return this.motifs.find(motif => motif.id === id);\n  }\n\n  /**\n   * Get all motifs\n   */\n  public all(): Motif[] {\n    return [...this.motifs];\n  }\n\n  /**\n   * Add a new motif\n   */\n  public add(motif: Motif): void {\n    // Ensure unique ID\n    if (this.motifs.some(m => m.id === motif.id)) {\n      motif.id = Math.random().toString(36).substr(2, 9);\n    }\n    this.motifs.push(motif);\n  }\n\n  /**\n   * Remove motif by ID\n   */\n  public remove(id: string): boolean {\n    const index = this.motifs.findIndex(motif => motif.id === id);\n    if (index !== -1) {\n      this.motifs.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Update existing motif\n   */\n  public update(id: string, updates: Partial<Motif>): boolean {\n    const motif = this.getById(id);\n    if (motif) {\n      Object.assign(motif, updates);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Find motifs by artist\n   */\n  public byArtist(artist: string): Motif[] {\n    const artistLower = artist.toLowerCase();\n    return this.motifs.filter(motif => \n      motif.artist?.toLowerCase() === artistLower\n    );\n  }\n\n  /**\n   * Find motifs by instrument\n   */\n  public byInstrument(instrument: string): Motif[] {\n    const instrumentLower = instrument.toLowerCase();\n    return this.motifs.filter(motif =>\n      motif.instrument.toLowerCase().includes(instrumentLower)\n    );\n  }\n\n  /**\n   * Find motifs by scale\n   */\n  public byScale(scale: string): Motif[] {\n    const scaleLower = scale.toLowerCase();\n    return this.motifs.filter(motif =>\n      motif.scale.toLowerCase() === scaleLower\n    );\n  }\n\n  /**\n   * Find motifs by tag\n   */\n  public byTag(tag: string): Motif[] {\n    const tagLower = tag.toLowerCase();\n    return this.motifs.filter(motif =>\n      motif.tags.some(t => t.toLowerCase().includes(tagLower))\n    );\n  }\n\n  /**\n   * Find motifs by measure range\n   */\n  public byMeasureRange(minMeasures?: number, maxMeasures?: number): Motif[] {\n    return this.motifs.filter(motif => {\n      if (minMeasures !== undefined && motif.measures < minMeasures) {\n        return false;\n      }\n      if (maxMeasures !== undefined && motif.measures > maxMeasures) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  /**\n   * Comprehensive search with multiple criteria\n   */\n  public search(options: MotifSearchOptions): Motif[] {\n    let results = [...this.motifs];\n\n    if (options.artist) {\n      const artistLower = options.artist.toLowerCase();\n      results = results.filter(motif =>\n        motif.artist?.toLowerCase() === artistLower\n      );\n    }\n\n    if (options.instrument) {\n      const instrumentLower = options.instrument.toLowerCase();\n      results = results.filter(motif =>\n        motif.instrument.toLowerCase().includes(instrumentLower)\n      );\n    }\n\n    if (options.scale) {\n      const scaleLower = options.scale.toLowerCase();\n      results = results.filter(motif =>\n        motif.scale.toLowerCase() === scaleLower\n      );\n    }\n\n    if (options.tag) {\n      const tagLower = options.tag.toLowerCase();\n      results = results.filter(motif =>\n        motif.tags.some(t => t.toLowerCase().includes(tagLower))\n      );\n    }\n\n    if (options.minMeasures !== undefined) {\n      results = results.filter(motif => motif.measures >= options.minMeasures!);\n    }\n\n    if (options.maxMeasures !== undefined) {\n      results = results.filter(motif => motif.measures <= options.maxMeasures!);\n    }\n\n    return results;\n  }\n\n  /**\n   * Get random motif\n   */\n  public random(): Motif | undefined {\n    if (this.motifs.length === 0) return undefined;\n    const index = Math.floor(Math.random() * this.motifs.length);\n    return this.motifs[index];\n  }\n\n  /**\n   * Get random motifs matching criteria\n   */\n  public randomSearch(options: MotifSearchOptions, count: number = 1): Motif[] {\n    const candidates = this.search(options);\n    if (candidates.length === 0) return [];\n\n    const results: Motif[] = [];\n    const used = new Set<string>();\n\n    for (let i = 0; i < Math.min(count, candidates.length); i++) {\n      let motif: Motif;\n      do {\n        motif = candidates[Math.floor(Math.random() * candidates.length)]!;\n      } while (used.has(motif.id) && used.size < candidates.length);\n\n      if (!used.has(motif.id)) {\n        results.push(motif);\n        used.add(motif.id);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Find similar motifs based on musical characteristics\n   */\n  public findSimilar(targetMotif: Motif, threshold: number = 0.7): Motif[] {\n    return this.motifs.filter(motif => {\n      if (motif.id === targetMotif.id) return false;\n\n      let similarity = 0;\n      let factors = 0;\n\n      // Scale similarity\n      if (motif.scale === targetMotif.scale) {\n        similarity += 0.3;\n      }\n      factors += 0.3;\n\n      // Instrument similarity\n      if (motif.instrument === targetMotif.instrument) {\n        similarity += 0.2;\n      }\n      factors += 0.2;\n\n      // Measure similarity\n      const measureDiff = Math.abs(motif.measures - targetMotif.measures);\n      const measureSimilarity = Math.max(0, 1 - measureDiff / Math.max(motif.measures, targetMotif.measures));\n      similarity += measureSimilarity * 0.2;\n      factors += 0.2;\n\n      // Tag similarity\n      const commonTags = motif.tags.filter(tag => targetMotif.tags.includes(tag));\n      const tagSimilarity = commonTags.length / Math.max(motif.tags.length, targetMotif.tags.length, 1);\n      similarity += tagSimilarity * 0.3;\n      factors += 0.3;\n\n      return (similarity / factors) >= threshold;\n    });\n  }\n\n  /**\n   * Group motifs by a specific property\n   */\n  public groupBy(property: keyof Motif): Record<string, Motif[]> {\n    const groups: Record<string, Motif[]> = {};\n\n    for (const motif of this.motifs) {\n      const key = String(motif[property] || 'unknown');\n      if (!groups[key]) {\n        groups[key] = [];\n      }\n      groups[key]!.push(motif);\n    }\n\n    return groups;\n  }\n\n  /**\n   * Get statistics about the motif collection\n   */\n  public getStats(): {\n    total: number;\n    byInstrument: Record<string, number>;\n    byScale: Record<string, number>;\n    byArtist: Record<string, number>;\n    averageMeasures: number;\n    mostCommonTags: Array<{ tag: string; count: number }>;\n  } {\n    const byInstrument: Record<string, number> = {};\n    const byScale: Record<string, number> = {};\n    const byArtist: Record<string, number> = {};\n    const tagCounts: Record<string, number> = {};\n    let totalMeasures = 0;\n\n    for (const motif of this.motifs) {\n      // Instrument stats\n      byInstrument[motif.instrument] = (byInstrument[motif.instrument] || 0) + 1;\n\n      // Scale stats\n      byScale[motif.scale] = (byScale[motif.scale] || 0) + 1;\n\n      // Artist stats\n      if (motif.artist) {\n        byArtist[motif.artist] = (byArtist[motif.artist] || 0) + 1;\n      }\n\n      // Tag stats\n      for (const tag of motif.tags) {\n        tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n      }\n\n      totalMeasures += motif.measures;\n    }\n\n    const mostCommonTags = Object.entries(tagCounts)\n      .map(([tag, count]) => ({ tag, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    return {\n      total: this.motifs.length,\n      byInstrument,\n      byScale,\n      byArtist,\n      averageMeasures: this.motifs.length > 0 ? totalMeasures / this.motifs.length : 0,\n      mostCommonTags\n    };\n  }\n\n  /**\n   * Export motifs to JSON\n   */\n  public toJSON(): any[] {\n    return this.motifs.map(motif => ({ ...motif }));\n  }\n\n  /**\n   * Clear all motifs\n   */\n  public clear(): void {\n    this.motifs = [];\n  }\n\n  /**\n   * Clone the motif bank\n   */\n  public clone(): MotifBank {\n    const clonedMotifs = this.motifs.map(motif => ({\n      ...motif,\n      notes: motif.notes.map(note => ({ ...note })),\n      tags: [...motif.tags],\n      metadata: motif.metadata ? { ...motif.metadata } : undefined\n    }));\n    return new MotifBank(clonedMotifs);\n  }\n}","export class Matrix {\n  private data: number[][];\n  public readonly rows: number;\n  public readonly columns: number;\n\n  constructor(data: number[][] | number, columns?: number) {\n    if (typeof data === 'number') {\n      if (columns === undefined) {\n        throw new Error('Columns parameter required when creating matrix from dimensions');\n      }\n      this.rows = data;\n      this.columns = columns;\n      this.data = Array(this.rows).fill(0).map(() => Array(this.columns).fill(0));\n    } else {\n      this.data = data.map(row => [...row]);\n      this.rows = this.data.length;\n      this.columns = this.data[0]?.length || 0;\n    }\n  }\n\n  static zeros(rows: number, columns: number): Matrix {\n    return new Matrix(rows, columns);\n  }\n\n  static from2DArray(data: number[][]): Matrix {\n    return new Matrix(data);\n  }\n\n  get(row: number, column: number): number {\n    if (row < 0 || row >= this.rows || column < 0 || column >= this.columns) {\n      throw new Error(`Index out of bounds: (${row}, ${column})`);\n    }\n    return this.data[row][column];\n  }\n\n  set(row: number, column: number, value: number): void {\n    if (row < 0 || row >= this.rows || column < 0 || column >= this.columns) {\n      throw new Error(`Index out of bounds: (${row}, ${column})`);\n    }\n    this.data[row][column] = value;\n  }\n\n  getRow(row: number): number[] {\n    if (row < 0 || row >= this.rows) {\n      throw new Error(`Row index out of bounds: ${row}`);\n    }\n    return [...this.data[row]];\n  }\n\n  getColumn(column: number): number[] {\n    if (column < 0 || column >= this.columns) {\n      throw new Error(`Column index out of bounds: ${column}`);\n    }\n    return this.data.map(row => row[column]);\n  }\n\n  transpose(): Matrix {\n    const transposed = Array(this.columns).fill(0).map(() => Array(this.rows).fill(0));\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        transposed[j][i] = this.data[i][j];\n      }\n    }\n    return new Matrix(transposed);\n  }\n\n  clone(): Matrix {\n    return new Matrix(this.data);\n  }\n\n  toArray(): number[][] {\n    return this.data.map(row => [...row]);\n  }\n}\n\nexport function ensure2D(X: number[] | number[][]): Matrix {\n  if (Array.isArray(X[0])) {\n    return Matrix.from2DArray(X as number[][]);\n  } else {\n    return Matrix.from2DArray([(X as number[])]);\n  }\n}\n\nexport function choleskyDecomposition(matrix: Matrix): Matrix {\n  if (matrix.rows !== matrix.columns) {\n    throw new Error('Matrix must be square for Cholesky decomposition');\n  }\n\n  const n = matrix.rows;\n  const L = Matrix.zeros(n, n);\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <= i; j++) {\n      if (i === j) {\n        let sum = 0;\n        for (let k = 0; k < j; k++) {\n          sum += L.get(j, k) * L.get(j, k);\n        }\n        const diagonal = matrix.get(j, j) - sum;\n        if (diagonal <= 0) {\n          throw new Error(`Matrix is not positive definite at position (${j}, ${j})`);\n        }\n        L.set(j, j, Math.sqrt(diagonal));\n      } else {\n        let sum = 0;\n        for (let k = 0; k < j; k++) {\n          sum += L.get(i, k) * L.get(j, k);\n        }\n        L.set(i, j, (matrix.get(i, j) - sum) / L.get(j, j));\n      }\n    }\n  }\n\n  return L;\n}","import { Matrix, choleskyDecomposition, ensure2D } from '../../utils/matrix';\nimport { Kernel } from './kernels/base';\nimport { GaussianProcessOptions, PredictionResult } from '../../types/algorithms';\n\nexport class GaussianProcessRegressor {\n  private kernel: Kernel;\n  private alpha: number;\n  private XTrain?: Matrix;\n  private yTrain?: number[];\n  private L?: Matrix;\n  private alphaVector?: number[];\n\n  constructor(kernel: Kernel, options: GaussianProcessOptions = {}) {\n    this.kernel = kernel;\n    this.alpha = options.alpha || 1e-10;\n  }\n\n  public fit(X: number[] | number[][], y: number[]): void {\n    this.XTrain = ensure2D(X);\n    this.yTrain = [...y];\n\n    const K = this.kernel.call(this.XTrain);\n    \n    // Add noise to diagonal\n    for (let i = 0; i < K.rows; i++) {\n      K.set(i, i, K.get(i, i) + this.alpha);\n    }\n\n    try {\n      this.L = choleskyDecomposition(K);\n    } catch (error) {\n      throw new Error(`Failed to compute Cholesky decomposition: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    // Solve L * L^T * alpha = y using forward and back substitution\n    this.alphaVector = this.solveCholesky(this.L, this.yTrain);\n  }\n\n  public predict(X: number[] | number[][], returnStd = false): PredictionResult {\n    if (!this.XTrain || !this.yTrain || !this.L || !this.alphaVector) {\n      throw new Error('Model must be fitted before prediction');\n    }\n\n    const XTest = ensure2D(X);\n    const KStar = this.kernel.call(this.XTrain!, XTest);\n    \n    // Compute mean prediction\n    const mean = new Array(XTest.rows);\n    for (let i = 0; i < XTest.rows; i++) {\n      mean[i] = 0;\n      for (let j = 0; j < this.XTrain!.rows; j++) {\n        mean[i] += KStar.get(j, i) * this.alphaVector![j]!;\n      }\n    }\n\n    const result: PredictionResult = { mean };\n\n    if (returnStd) {\n      const std = this.computeStd(XTest, KStar);\n      result.std = std;\n    }\n\n    return result;\n  }\n\n  public sampleY(X: number[] | number[][], nSamples = 1): number[][] {\n    if (!this.XTrain || !this.yTrain || !this.L || !this.alphaVector) {\n      throw new Error('Model must be fitted before sampling');\n    }\n\n    const XTest = ensure2D(X);\n    const prediction = this.predict(X, true);\n    \n    if (!prediction.std) {\n      throw new Error('Standard deviation computation failed');\n    }\n\n    const samples: number[][] = [];\n    for (let i = 0; i < nSamples; i++) {\n      const sample = new Array(XTest.rows);\n      for (let j = 0; j < XTest.rows; j++) {\n        const mean = prediction.mean[j]!;\n        const std = prediction.std[j]!;\n        sample[j] = mean + std * this.sampleStandardNormal();\n      }\n      samples.push(sample);\n    }\n\n    return samples;\n  }\n\n  public logMarginalLikelihood(): number {\n    if (!this.XTrain || !this.yTrain || !this.L || !this.alphaVector) {\n      throw new Error('Model must be fitted before computing log marginal likelihood');\n    }\n\n    let logLikelihood = 0;\n    \n    // -0.5 * y^T * K^{-1} * y\n    for (let i = 0; i < this.yTrain!.length; i++) {\n      logLikelihood -= 0.5 * this.yTrain![i]! * this.alphaVector![i]!;\n    }\n    \n    // -0.5 * log|K|\n    for (let i = 0; i < this.L!.rows; i++) {\n      logLikelihood -= Math.log(this.L!.get(i, i));\n    }\n    \n    // -n/2 * log(2π)\n    logLikelihood -= 0.5 * this.yTrain.length * Math.log(2 * Math.PI);\n    \n    return logLikelihood;\n  }\n\n  private computeStd(XTest: Matrix, KStar: Matrix): number[] {\n    if (!this.L) {\n      throw new Error('Cholesky decomposition not available');\n    }\n\n    const std = new Array(XTest.rows);\n    \n    for (let i = 0; i < XTest.rows; i++) {\n      // K_** diagonal element\n      const kStarStar = this.kernel.compute(XTest.getRow(i), XTest.getRow(i));\n      \n      // Solve L * v = k_*\n      const kStarColumn = KStar.getColumn(i);\n      const v = this.forwardSubstitution(this.L, kStarColumn);\n      \n      // Compute v^T * v\n      let vTv = 0;\n      for (let j = 0; j < v.length; j++) {\n        vTv += v[j]! * v[j]!;\n      }\n      \n      const variance = kStarStar - vTv;\n      std[i] = Math.sqrt(Math.max(0, variance));\n    }\n    \n    return std;\n  }\n\n  private solveCholesky(L: Matrix, y: number[]): number[] {\n    // Forward substitution: L * z = y\n    const z = this.forwardSubstitution(L, y);\n    \n    // Back substitution: L^T * alpha = z\n    return this.backSubstitution(L, z);\n  }\n\n  private forwardSubstitution(L: Matrix, b: number[]): number[] {\n    const n = L.rows;\n    const x = new Array(n);\n    \n    for (let i = 0; i < n; i++) {\n      x[i] = b[i];\n      for (let j = 0; j < i; j++) {\n        x[i] -= L.get(i, j) * x[j];\n      }\n      x[i] /= L.get(i, i);\n    }\n    \n    return x;\n  }\n\n  private backSubstitution(L: Matrix, b: number[]): number[] {\n    const n = L.rows;\n    const x = new Array(n);\n    \n    for (let i = n - 1; i >= 0; i--) {\n      x[i] = b[i];\n      for (let j = i + 1; j < n; j++) {\n        x[i] -= L.get(j, i) * x[j];\n      }\n      x[i] /= L.get(i, i);\n    }\n    \n    return x;\n  }\n\n  private sampleStandardNormal(): number {\n    const u1 = Math.random();\n    const u2 = Math.random();\n    return Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n  }\n}","import { Matrix } from '../../../utils/matrix';\nimport { KernelParams } from '../../../types/algorithms';\n\nexport abstract class Kernel {\n  protected params: KernelParams;\n\n  constructor(params: KernelParams = {}) {\n    this.params = { ...params };\n  }\n\n  public call(X1: Matrix, X2?: Matrix): Matrix {\n    const X2_actual = X2 || X1;\n    const K = Matrix.zeros(X1.rows, X2_actual.rows);\n    \n    for (let i = 0; i < X1.rows; i++) {\n      for (let j = 0; j < X2_actual.rows; j++) {\n        K.set(i, j, this.compute(X1.getRow(i), X2_actual.getRow(j)));\n      }\n    }\n    \n    return K;\n  }\n\n  public abstract compute(x1: number[], x2: number[]): number;\n\n  public getParams(): KernelParams {\n    return { ...this.params };\n  }\n\n  public setParams(newParams: Partial<KernelParams>): void {\n    Object.assign(this.params, newParams);\n  }\n\n  protected euclideanDistance(x1: number[], x2: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < x1.length; i++) {\n      sum += Math.pow(x1[i]! - x2[i]!, 2);\n    }\n    return Math.sqrt(sum);\n  }\n\n  protected squaredEuclideanDistance(x1: number[], x2: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < x1.length; i++) {\n      sum += Math.pow(x1[i]! - x2[i]!, 2);\n    }\n    return sum;\n  }\n}","import { Kernel } from './base';\n\nexport class RBF extends Kernel {\n  public readonly lengthScale: number;\n  public readonly variance: number;\n\n  constructor(lengthScale = 1.0, variance = 1.0) {\n    super({ length_scale: lengthScale, variance });\n    this.lengthScale = lengthScale;\n    this.variance = variance;\n  }\n\n  public override compute(x1: number[], x2: number[]): number {\n    const distance = this.euclideanDistance(x1, x2);\n    return this.variance * Math.exp(-0.5 * Math.pow(distance / this.lengthScale, 2));\n  }\n\n  public override getParams(): { length_scale: number; variance: number } {\n    return {\n      length_scale: this.lengthScale,\n      variance: this.variance,\n    };\n  }\n}","import { Matrix, choleskyDecomposition } from '../../utils/matrix';\n\nexport function sampleNormal(mean = 0, std = 1): number {\n  const u1 = Math.random();\n  const u2 = Math.random();\n  const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n  return mean + std * z0;\n}\n\nexport function sampleMultivariateNormal(mean: number[], covariance: Matrix): number[] {\n  const n = mean.length;\n  const L = choleskyDecomposition(covariance);\n  const z = Array.from({ length: n }, () => sampleNormal());\n  \n  const sample = new Array(n);\n  for (let i = 0; i < n; i++) {\n    sample[i] = mean[i]!;\n    for (let j = 0; j <= i; j++) {\n      sample[i] += L.get(i, j) * z[j]!;\n    }\n  }\n  \n  return sample;\n}","import { Matrix } from '../../utils/matrix';\nimport { RBF } from './kernels/rbf';\nimport { sampleMultivariateNormal } from './utils';\n\nexport interface KernelGenerationOptions {\n  walkAround?: boolean;\n  length?: number;\n  lengthScale?: number;\n  amplitude?: number;\n  noiseLevel?: number;\n}\n\nexport class KernelGenerator {\n  private data: number[];\n  private lengthScale: number;\n  private amplitude: number;\n  private noiseLevel: number;\n  private walkAround: boolean;\n\n  constructor(\n    data: number[] = [],\n    lengthScale = 1.0,\n    amplitude = 1.0,\n    noiseLevel = 0.1,\n    walkAround = false\n  ) {\n    this.data = [...data];\n    this.lengthScale = lengthScale;\n    this.amplitude = amplitude;\n    this.noiseLevel = noiseLevel;\n    this.walkAround = walkAround;\n  }\n\n  public generate(options: KernelGenerationOptions = {}): number[] {\n    const length = options.length || 100;\n    const lengthScale = options.lengthScale || this.lengthScale;\n    const amplitude = options.amplitude || this.amplitude;\n    const noiseLevel = options.noiseLevel || this.noiseLevel;\n\n    // Create input points\n    const X = Array.from({ length }, (_, i) => [i]);\n    const XMatrix = new Matrix(X);\n\n    // Create RBF kernel\n    const kernel = new RBF(lengthScale, amplitude);\n    const K = kernel.call(XMatrix);\n\n    // Add noise to diagonal\n    for (let i = 0; i < K.rows; i++) {\n      K.set(i, i, K.get(i, i) + noiseLevel);\n    }\n\n    // Sample from multivariate normal\n    const mean = new Array(length).fill(0);\n    const sample = sampleMultivariateNormal(mean, K);\n\n    if (this.walkAround && this.data.length > 0) {\n      // Modify sample to walk around existing data\n      const dataLength = this.data.length;\n      for (let i = 0; i < Math.min(length, dataLength); i++) {\n        sample[i] = this.data[i]! + sample[i]! * 0.1;\n      }\n    }\n\n    return sample;\n  }\n\n  public rbfKernel(x1: number[], x2: number[]): number {\n    let distanceSquared = 0;\n    for (let i = 0; i < x1.length; i++) {\n      distanceSquared += Math.pow(x1[i]! - x2[i]!, 2);\n    }\n    return this.amplitude * Math.exp(-distanceSquared / (2 * Math.pow(this.lengthScale, 2)));\n  }\n\n  public setData(data: number[]): void {\n    this.data = [...data];\n  }\n\n  public getData(): number[] {\n    return [...this.data];\n  }\n\n  public setLengthScale(lengthScale: number): void {\n    this.lengthScale = lengthScale;\n  }\n\n  public setAmplitude(amplitude: number): void {\n    this.amplitude = amplitude;\n  }\n\n  public setNoiseLevel(noiseLevel: number): void {\n    this.noiseLevel = noiseLevel;\n  }\n}","import { Kernel } from './base';\n\nexport class RationalQuadratic extends Kernel {\n  public readonly lengthScale: number;\n  public readonly alpha: number;\n  public readonly variance: number;\n\n  constructor(lengthScale = 1.0, alpha = 1.0, variance = 1.0) {\n    super({ length_scale: lengthScale, alpha, variance });\n    this.lengthScale = lengthScale;\n    this.alpha = alpha;\n    this.variance = variance;\n  }\n\n  public override compute(x1: number[], x2: number[]): number {\n    const distanceSquared = this.squaredEuclideanDistance(x1, x2);\n    const term = 1 + distanceSquared / (2 * this.alpha * Math.pow(this.lengthScale, 2));\n    return this.variance * Math.pow(term, -this.alpha);\n  }\n\n  public override getParams(): { length_scale: number; alpha: number; variance: number } {\n    return {\n      length_scale: this.lengthScale,\n      alpha: this.alpha,\n      variance: this.variance,\n    };\n  }\n}","import { Kernel } from './base';\n\nexport class Periodic extends Kernel {\n  public readonly lengthScale: number;\n  public readonly periodicity: number;\n  public readonly variance: number;\n\n  constructor(lengthScale = 1.0, periodicity = 1.0, variance = 1.0) {\n    super({ length_scale: lengthScale, periodicity, variance });\n    this.lengthScale = lengthScale;\n    this.periodicity = periodicity;\n    this.variance = variance;\n  }\n\n  public override compute(x1: number[], x2: number[]): number {\n    const distance = this.euclideanDistance(x1, x2);\n    const sinTerm = Math.sin(Math.PI * distance / this.periodicity);\n    return this.variance * Math.exp(-2 * Math.pow(sinTerm / this.lengthScale, 2));\n  }\n\n  public override getParams(): { length_scale: number; periodicity: number; variance: number } {\n    return {\n      length_scale: this.lengthScale,\n      periodicity: this.periodicity,\n      variance: this.variance,\n    };\n  }\n}","import { CellularAutomataRule } from '../../types/algorithms';\nimport { Matrix2D } from '../../types/common';\n\nexport interface CellularAutomataOptions {\n  width?: number;\n  ruleNumber?: number;\n  initialState?: number[];\n}\n\nexport class CellularAutomata {\n  public readonly width: number;\n  public ruleNumber: number;\n  public initialState: number[];\n  public state: number[];\n  public rules: CellularAutomataRule;\n  private history: Matrix2D = [];\n\n  constructor(options: CellularAutomataOptions = {}) {\n    this.width = options.width || 51;\n    this.ruleNumber = options.ruleNumber || 30;\n    this.initialState = options.initialState || this.generateRandomInitialState();\n    this.state = [...this.initialState];\n    this.rules = this.loadRules(this.ruleNumber);\n  }\n\n  public generate(steps: number): Matrix2D {\n    this.history = [];\n    this.state = [...this.initialState];\n    \n    this.history.push([...this.state]);\n    \n    for (let step = 0; step < steps; step++) {\n      this.updateState();\n      this.history.push([...this.state]);\n    }\n    \n    return this.history;\n  }\n\n  public generate01(steps: number): Matrix2D {\n    const result = this.generate(steps);\n    return result.map(row => row.map(cell => cell > 0 ? 1 : 0));\n  }\n\n  public loadRules(ruleNumber: number): CellularAutomataRule {\n    const binary = ruleNumber.toString(2).padStart(8, '0');\n    const rules: CellularAutomataRule = {};\n    \n    // Map binary neighborhoods to rule outputs\n    const neighborhoods = ['111', '110', '101', '100', '011', '010', '001', '000'];\n    \n    for (let i = 0; i < 8; i++) {\n      rules[neighborhoods[i]!] = parseInt(binary[i]!, 10);\n    }\n    \n    return rules;\n  }\n\n  public updateState(): void {\n    const newState = new Array(this.width);\n    \n    for (let i = 0; i < this.width; i++) {\n      const left = this.state[(i - 1 + this.width) % this.width]!;\n      const center = this.state[i]!;\n      const right = this.state[(i + 1) % this.width]!;\n      \n      const neighborhood = `${left}${center}${right}`;\n      newState[i] = this.rules[neighborhood] || 0;\n    }\n    \n    this.state = newState;\n  }\n\n  public validateStrips(strips: Matrix2D): boolean {\n    if (!Array.isArray(strips) || strips.length === 0) {\n      return false;\n    }\n    \n    const width = strips[0]?.length;\n    if (!width) return false;\n    \n    return strips.every(strip => \n      Array.isArray(strip) && \n      strip.length === width &&\n      strip.every(cell => typeof cell === 'number' && (cell === 0 || cell === 1))\n    );\n  }\n\n  public validateValues(values: number[]): boolean {\n    return Array.isArray(values) && \n           values.length === this.width &&\n           values.every(val => typeof val === 'number' && (val === 0 || val === 1));\n  }\n\n  public setInitialState(state: number[]): void {\n    if (this.validateValues(state)) {\n      this.initialState = [...state];\n      this.state = [...state];\n    } else {\n      throw new Error('Invalid initial state');\n    }\n  }\n\n  public setRuleNumber(ruleNumber: number): void {\n    if (ruleNumber >= 0 && ruleNumber <= 255) {\n      (this as { ruleNumber: number }).ruleNumber = ruleNumber;\n      this.rules = this.loadRules(ruleNumber);\n    } else {\n      throw new Error('Rule number must be between 0 and 255');\n    }\n  }\n\n  public getHistory(): Matrix2D {\n    return this.history.map(row => [...row]);\n  }\n\n  public getCurrentState(): number[] {\n    return [...this.state];\n  }\n\n  private generateRandomInitialState(): number[] {\n    const state = new Array(this.width).fill(0);\n    // Single cell in center\n    state[Math.floor(this.width / 2)] = 1;\n    return state;\n  }\n\n  public generateRandomState(): number[] {\n    return Array.from({ length: this.width }, () => Math.random() > 0.5 ? 1 : 0);\n  }\n\n  public plot(): { data: Matrix2D; width: number; height: number } {\n    return {\n      data: this.getHistory(),\n      width: this.width,\n      height: this.history.length,\n    };\n  }\n\n  /**\n   * Create Observable Plot visualization of CA evolution\n   */\n  public plotEvolution(options?: any): ReturnType<typeof import('../../visualization/cellular-automata/CAVisualizer').CAVisualizer.plotEvolution> {\n    const { CAVisualizer } = require('../../visualization/cellular-automata/CAVisualizer');\n    return CAVisualizer.plotEvolution(this.getHistory(), options);\n  }\n\n  /**\n   * Create Observable Plot visualization of current generation\n   */\n  public plotGeneration(options?: any): ReturnType<typeof import('../../visualization/cellular-automata/CAVisualizer').CAVisualizer.plotGeneration> {\n    const { CAVisualizer } = require('../../visualization/cellular-automata/CAVisualizer');\n    return CAVisualizer.plotGeneration(this.getCurrentState(), options);\n  }\n\n  /**\n   * Create Observable Plot density visualization\n   */\n  public plotDensity(options?: any): ReturnType<typeof import('../../visualization/cellular-automata/CAVisualizer').CAVisualizer.plotDensity> {\n    const { CAVisualizer } = require('../../visualization/cellular-automata/CAVisualizer');\n    return CAVisualizer.plotDensity(this.getHistory(), options);\n  }\n}","import { PolyloopPoint, PolyloopLayer, PolyloopConfig, PolyloopTrigger } from '../../types/polyloop';\nimport { JMonSequence, JMonNote } from '../../types/jmon';\nimport { JMonConverter } from '../../io/jmon/conversion';\n\nexport class Polyloop {\n  private config: PolyloopConfig;\n  private currentTime: number = 0;\n  private rotationAngles: Map<string, number> = new Map();\n\n  constructor(config: PolyloopConfig) {\n    this.config = config;\n    // Initialize rotation angles for each layer\n    this.config.layers.forEach(layer => {\n      this.rotationAngles.set(layer.label, 0);\n    });\n  }\n\n  /**\n   * Create a simple polyloop layer from rhythmic pattern\n   */\n  public static fromRhythm(\n    durations: number[],\n    pitches: number[] = [60],\n    options: {\n      instrument?: string;\n      color?: string;\n      label?: string;\n      speed?: number;\n      radius?: number;\n    } = {}\n  ): PolyloopLayer {\n    const {\n      instrument = 'synth',\n      color = 'steelblue',\n      label = 'Polyloop',\n      speed = 1,\n      radius = 0.8\n    } = options;\n\n    const totalDuration = durations.reduce((sum, dur) => sum + dur, 0);\n    const points: PolyloopPoint[] = [];\n    \n    let currentAngle = 0;\n    durations.forEach((duration, index) => {\n      const angleStep = (duration / totalDuration) * 360;\n      \n      points.push({\n        angle: currentAngle,\n        radius,\n        active: duration > 0,\n        pitch: duration > 0 ? pitches[index % pitches.length] : undefined,\n        velocity: 0.8,\n        instrument\n      });\n      \n      currentAngle += angleStep;\n    });\n\n    return {\n      points,\n      color,\n      label,\n      instrument,\n      divisions: durations.length,\n      speed\n    };\n  }\n\n  /**\n   * Create polyloop layer from Euclidean rhythm\n   */\n  public static euclidean(\n    beats: number,\n    pulses: number,\n    pitches: number[] = [60],\n    options: {\n      instrument?: string;\n      color?: string;\n      label?: string;\n      speed?: number;\n      radius?: number;\n    } = {}\n  ): PolyloopLayer {\n    const {\n      instrument = 'synth',\n      color = 'steelblue', \n      label = `Euclidean ${pulses}/${beats}`,\n      speed = 1,\n      radius = 0.8\n    } = options;\n\n    // Generate Euclidean rhythm\n    const pattern = this.generateEuclideanRhythm(beats, pulses);\n    const points: PolyloopPoint[] = [];\n    \n    pattern.forEach((active, index) => {\n      const angle = (index / beats) * 360;\n      \n      points.push({\n        angle,\n        radius,\n        active,\n        pitch: active ? pitches[index % pitches.length] : undefined,\n        velocity: 0.8,\n        instrument\n      });\n    });\n\n    return {\n      points,\n      color,\n      label,\n      instrument,\n      divisions: beats,\n      speed\n    };\n  }\n\n  /**\n   * Generate Euclidean rhythm pattern\n   */\n  private static generateEuclideanRhythm(beats: number, pulses: number): boolean[] {\n    if (pulses >= beats) {\n      return Array(beats).fill(true);\n    }\n    \n    const pattern: boolean[] = Array(beats).fill(false);\n    const interval = beats / pulses;\n    \n    for (let i = 0; i < pulses; i++) {\n      const index = Math.round(i * interval) % beats;\n      pattern[index] = true;\n    }\n    \n    return pattern;\n  }\n\n  /**\n   * Create polyloop with mathematical function\n   */\n  public static fromFunction(\n    func: (angle: number) => number,\n    divisions: number = 16,\n    pitchRange: [number, number] = [60, 72],\n    options: {\n      instrument?: string;\n      color?: string;\n      label?: string;\n      speed?: number;\n      activeThreshold?: number;\n    } = {}\n  ): PolyloopLayer {\n    const {\n      instrument = 'synth',\n      color = 'purple',\n      label = 'Function Polyloop',\n      speed = 1,\n      activeThreshold = 0.5\n    } = options;\n\n    const points: PolyloopPoint[] = [];\n    const [minPitch, maxPitch] = pitchRange;\n    \n    for (let i = 0; i < divisions; i++) {\n      const angle = (i / divisions) * 360;\n      const angleRad = (angle * Math.PI) / 180;\n      const value = func(angleRad);\n      const normalizedValue = Math.abs(value) % 1;\n      \n      points.push({\n        angle,\n        radius: 0.3 + normalizedValue * 0.5, // Vary radius based on function\n        active: normalizedValue > activeThreshold,\n        pitch: Math.round(minPitch + normalizedValue * (maxPitch - minPitch)),\n        velocity: 0.5 + normalizedValue * 0.5,\n        instrument\n      });\n    }\n\n    return {\n      points,\n      color,\n      label,\n      instrument,\n      divisions,\n      speed\n    };\n  }\n\n  /**\n   * Advance time and calculate triggers\n   */\n  public step(deltaTime: number): PolyloopTrigger[] {\n    this.currentTime += deltaTime;\n    const triggers: PolyloopTrigger[] = [];\n    \n    this.config.layers.forEach(layer => {\n      const currentAngle = this.rotationAngles.get(layer.label) || 0;\n      const newAngle = (currentAngle + (deltaTime * layer.speed * 360)) % 360;\n      this.rotationAngles.set(layer.label, newAngle);\n      \n      // Check for triggers when the rotation line crosses points\n      layer.points.forEach(point => {\n        if (!point.active) return;\n        \n        const angleDiff = Math.abs(newAngle - point.angle);\n        const crossedPoint = angleDiff < (layer.speed * 360 * deltaTime) + 1; // Small tolerance\n        \n        if (crossedPoint) {\n          triggers.push({\n            time: this.currentTime,\n            layer: layer.label,\n            point,\n            angle: newAngle\n          });\n        }\n      });\n    });\n    \n    return triggers;\n  }\n\n  /**\n   * Generate a sequence of triggers for a given duration\n   */\n  public generateSequence(duration: number, stepsPerBeat: number = 16): PolyloopTrigger[] {\n    const stepSize = 1 / stepsPerBeat; // Duration of each step in beats\n    const totalSteps = Math.floor(duration / stepSize);\n    const allTriggers: PolyloopTrigger[] = [];\n    \n    this.currentTime = 0;\n    this.resetRotations();\n    \n    for (let step = 0; step < totalSteps; step++) {\n      const triggers = this.step(stepSize);\n      allTriggers.push(...triggers);\n    }\n    \n    return allTriggers;\n  }\n\n  /**\n   * Reset all rotation angles\n   */\n  public resetRotations(): void {\n    this.config.layers.forEach(layer => {\n      this.rotationAngles.set(layer.label, 0);\n    });\n    this.currentTime = 0;\n  }\n\n  /**\n   * Convert triggers to JMON sequences\n   */\n  public toJMonSequences(duration: number = 4): JMonSequence[] {\n    const triggers = this.generateSequence(duration);\n    const sequencesByLayer = new Map<string, PolyloopTrigger[]>();\n    \n    // Group triggers by layer\n    triggers.forEach(trigger => {\n      if (!sequencesByLayer.has(trigger.layer)) {\n        sequencesByLayer.set(trigger.layer, []);\n      }\n      sequencesByLayer.get(trigger.layer)!.push(trigger);\n    });\n    \n    // Convert each layer to JMON sequence\n    const sequences: JMonSequence[] = [];\n    \n    sequencesByLayer.forEach((layerTriggers, layerName) => {\n      const notes: JMonNote[] = layerTriggers.map(trigger => ({\n        note: JMonConverter.midiToNoteName(trigger.point.pitch || 60),\n        time: JMonConverter.timeToMusicalTime(trigger.time),\n        duration: '8n', // Default duration\n        velocity: trigger.point.velocity || 0.8\n      }));\n      \n      sequences.push({\n        label: layerName,\n        notes,\n        synth: {\n          type: 'Synth',\n          options: {\n            oscillator: { type: 'sine' },\n            envelope: { attack: 0.01, decay: 0.1, sustain: 0.3, release: 0.5 }\n          }\n        }\n      });\n    });\n    \n    return sequences;\n  }\n\n  /**\n   * Get current state for visualization\n   */\n  public getVisualizationState(): {\n    layers: PolyloopLayer[];\n    rotationAngles: Map<string, number>;\n    currentTime: number;\n  } {\n    return {\n      layers: this.config.layers,\n      rotationAngles: new Map(this.rotationAngles),\n      currentTime: this.currentTime\n    };\n  }\n\n  /**\n   * Add a new layer to the polyloop\n   */\n  public addLayer(layer: PolyloopLayer): void {\n    this.config.layers.push(layer);\n    this.rotationAngles.set(layer.label, 0);\n  }\n\n  /**\n   * Remove a layer from the polyloop\n   */\n  public removeLayer(label: string): boolean {\n    const index = this.config.layers.findIndex(layer => layer.label === label);\n    if (index !== -1) {\n      this.config.layers.splice(index, 1);\n      this.rotationAngles.delete(label);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Create Observable Plot visualization of the polyloop\n   */\n  public plot(options?: any): ReturnType<typeof import('../../visualization/polyloops/PolyloopVisualizer').PolyloopVisualizer.plotPolyloop> {\n    const { PolyloopVisualizer } = require('../../visualization/polyloops/PolyloopVisualizer');\n    return PolyloopVisualizer.plotPolyloop(this.config.layers, options);\n  }\n\n  /**\n   * Create Observable Plot timeline visualization\n   */\n  public plotTimeline(duration: number = 8, options?: any): ReturnType<typeof import('../../visualization/polyloops/PolyloopVisualizer').PolyloopVisualizer.plotTimeline> {\n    const { PolyloopVisualizer } = require('../../visualization/polyloops/PolyloopVisualizer');\n    return PolyloopVisualizer.plotTimeline(this.config.layers, duration, options);\n  }\n\n  /**\n   * Create animated visualization frames\n   */\n  public plotAnimated(numFrames: number = 12, options?: any): Array<ReturnType<typeof import('../../visualization/polyloops/PolyloopVisualizer').PolyloopVisualizer.plotPolyloop>> {\n    const { PolyloopVisualizer } = require('../../visualization/polyloops/PolyloopVisualizer');\n    return PolyloopVisualizer.plotAnimated(this.config.layers, numFrames, options);\n  }\n}","import { JMonNote } from '../types/jmon';\n\nexport interface AnalysisOptions {\n  scale?: number[];\n  weights?: number[];\n  sampleRate?: number;\n}\n\nexport interface AnalysisResult {\n  [metric: string]: number;\n}\n\n/**\n * Musical analysis tools inspired by the Python djalgo analysis module\n * Provides statistical and musical evaluation metrics for sequences\n */\nexport class MusicalAnalysis {\n\n  /**\n   * Calculate Gini coefficient for inequality measurement\n   */\n  public static gini(values: number[], weights?: number[]): number {\n    if (values.length === 0) return 0;\n    \n    const n = values.length;\n    const w = weights || Array(n).fill(1);\n    \n    // Sort values with corresponding weights\n    const pairs = values.map((v, i) => ({ value: v, weight: w[i] }))\n                        .sort((a, b) => a.value - b.value);\n    \n    const sortedValues = pairs.map(p => p.value);\n    const sortedWeights = pairs.map(p => p.weight);\n    \n    const totalWeight = sortedWeights.reduce((sum, w) => sum + w, 0);\n    let numerator = 0;\n    let denominator = 0;\n    \n    for (let i = 0; i < n; i++) {\n      const cumWeight = sortedWeights.slice(0, i + 1).reduce((sum, w) => sum + w, 0);\n      numerator += sortedWeights[i] * (2 * cumWeight - sortedWeights[i] - totalWeight) * sortedValues[i];\n      denominator += sortedWeights[i] * sortedValues[i] * totalWeight;\n    }\n    \n    return denominator === 0 ? 0 : numerator / denominator;\n  }\n\n  /**\n   * Calculate center of mass (balance point) of a sequence\n   */\n  public static balance(values: number[], weights?: number[]): number {\n    if (values.length === 0) return 0;\n    \n    const w = weights || Array(values.length).fill(1);\n    const weightedSum = values.reduce((sum, val, i) => sum + val * w[i], 0);\n    const totalWeight = w.reduce((sum, weight) => sum + weight, 0);\n    \n    return totalWeight === 0 ? 0 : weightedSum / totalWeight;\n  }\n\n  /**\n   * Calculate autocorrelation for pattern detection\n   */\n  public static autocorrelation(values: number[], maxLag?: number): number[] {\n    const n = values.length;\n    const lag = maxLag || Math.floor(n / 2);\n    const result: number[] = [];\n    \n    const mean = values.reduce((sum, val) => sum + val, 0) / n;\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / n;\n    \n    for (let k = 0; k <= lag; k++) {\n      let covariance = 0;\n      for (let i = 0; i < n - k; i++) {\n        covariance += (values[i] - mean) * (values[i + k] - mean);\n      }\n      covariance /= (n - k);\n      result.push(variance === 0 ? 0 : covariance / variance);\n    }\n    \n    return result;\n  }\n\n  /**\n   * Detect and score musical motifs\n   */\n  public static motif(values: number[], patternLength: number = 3): number {\n    if (values.length < patternLength * 2) return 0;\n    \n    const patterns = new Map<string, number>();\n    \n    for (let i = 0; i <= values.length - patternLength; i++) {\n      const pattern = values.slice(i, i + patternLength).join(',');\n      patterns.set(pattern, (patterns.get(pattern) || 0) + 1);\n    }\n    \n    const maxOccurrences = Math.max(...patterns.values());\n    const totalPatterns = patterns.size;\n    \n    return totalPatterns === 0 ? 0 : maxOccurrences / totalPatterns;\n  }\n\n  /**\n   * Calculate dissonance/scale conformity\n   */\n  public static dissonance(pitches: number[], scale: number[] = [0, 2, 4, 5, 7, 9, 11]): number {\n    if (pitches.length === 0) return 0;\n    \n    let conformingNotes = 0;\n    \n    for (const pitch of pitches) {\n      const pitchClass = ((pitch % 12) + 12) % 12;\n      if (scale.includes(pitchClass)) {\n        conformingNotes++;\n      }\n    }\n    \n    return 1 - (conformingNotes / pitches.length);\n  }\n\n  /**\n   * Calculate rhythmic fit to a grid\n   */\n  public static rhythmic(onsets: number[], gridDivision: number = 16): number {\n    if (onsets.length === 0) return 0;\n    \n    let gridAlignedCount = 0;\n    const tolerance = 0.1; // Allow slight timing variations\n    \n    for (const onset of onsets) {\n      const gridPosition = onset * gridDivision;\n      const nearestGrid = Math.round(gridPosition);\n      const deviation = Math.abs(gridPosition - nearestGrid);\n      \n      if (deviation <= tolerance) {\n        gridAlignedCount++;\n      }\n    }\n    \n    return gridAlignedCount / onsets.length;\n  }\n\n  /**\n   * Calculate Fibonacci/golden ratio index\n   */\n  public static fibonacciIndex(values: number[]): number {\n    if (values.length < 2) return 0;\n    \n    const goldenRatio = (1 + Math.sqrt(5)) / 2;\n    let fibonacciScore = 0;\n    \n    for (let i = 1; i < values.length; i++) {\n      if (values[i - 1] !== 0) {\n        const ratio = values[i] / values[i - 1];\n        const deviation = Math.abs(ratio - goldenRatio);\n        fibonacciScore += 1 / (1 + deviation);\n      }\n    }\n    \n    return fibonacciScore / (values.length - 1);\n  }\n\n  /**\n   * Calculate syncopation (off-beat emphasis)\n   */\n  public static syncopation(onsets: number[], beatDivision: number = 4): number {\n    if (onsets.length === 0) return 0;\n    \n    let syncopatedCount = 0;\n    \n    for (const onset of onsets) {\n      const beatPosition = (onset * beatDivision) % 1;\n      // Strong beats are at 0, 0.5; weak beats are at 0.25, 0.75\n      const isOffBeat = beatPosition > 0.2 && beatPosition < 0.8 && \n                       Math.abs(beatPosition - 0.5) > 0.2;\n      \n      if (isOffBeat) {\n        syncopatedCount++;\n      }\n    }\n    \n    return syncopatedCount / onsets.length;\n  }\n\n  /**\n   * Calculate contour entropy (melodic direction randomness)\n   */\n  public static contourEntropy(pitches: number[]): number {\n    if (pitches.length < 2) return 0;\n    \n    const directions: number[] = [];\n    \n    for (let i = 1; i < pitches.length; i++) {\n      const diff = pitches[i] - pitches[i - 1];\n      if (diff > 0) directions.push(1);      // Up\n      else if (diff < 0) directions.push(-1); // Down\n      else directions.push(0);                 // Same\n    }\n    \n    const counts = { up: 0, down: 0, same: 0 };\n    for (const dir of directions) {\n      if (dir > 0) counts.up++;\n      else if (dir < 0) counts.down++;\n      else counts.same++;\n    }\n    \n    const total = directions.length;\n    const probabilities = [counts.up / total, counts.down / total, counts.same / total]\n                         .filter(p => p > 0);\n    \n    return -probabilities.reduce((entropy, p) => entropy + p * Math.log2(p), 0);\n  }\n\n  /**\n   * Calculate interval variance (pitch stability)\n   */\n  public static intervalVariance(pitches: number[]): number {\n    if (pitches.length < 2) return 0;\n    \n    const intervals: number[] = [];\n    for (let i = 1; i < pitches.length; i++) {\n      intervals.push(Math.abs(pitches[i] - pitches[i - 1]));\n    }\n    \n    const mean = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;\n    const variance = intervals.reduce((sum, interval) => sum + Math.pow(interval - mean, 2), 0) / intervals.length;\n    \n    return variance;\n  }\n\n  /**\n   * Calculate note density (notes per unit time)\n   */\n  public static density(notes: JMonNote[], timeWindow: number = 1): number {\n    if (notes.length === 0) return 0;\n    \n    // Convert time to numeric for calculation\n    const numericTimes = notes.map(note => {\n      if (typeof note.time === 'string') {\n        // Simple conversion for demonstration - would need proper time parsing\n        return parseFloat(note.time) || 0;\n      }\n      return note.time as number;\n    });\n    \n    const minTime = Math.min(...numericTimes);\n    const maxTime = Math.max(...numericTimes);\n    const totalTime = maxTime - minTime || 1;\n    \n    return notes.length / (totalTime / timeWindow);\n  }\n\n  /**\n   * Calculate gap variance (timing consistency)\n   */\n  public static gapVariance(onsets: number[]): number {\n    if (onsets.length < 2) return 0;\n    \n    const gaps: number[] = [];\n    for (let i = 1; i < onsets.length; i++) {\n      gaps.push(onsets[i] - onsets[i - 1]);\n    }\n    \n    const mean = gaps.reduce((sum, gap) => sum + gap, 0) / gaps.length;\n    const variance = gaps.reduce((sum, gap) => sum + Math.pow(gap - mean, 2), 0) / gaps.length;\n    \n    return variance;\n  }\n\n  /**\n   * Comprehensive analysis of a musical sequence\n   */\n  public static analyze(notes: JMonNote[], options: AnalysisOptions = {}): AnalysisResult {\n    const { scale = [0, 2, 4, 5, 7, 9, 11] } = options;\n    \n    // Extract pitch and timing data\n    const pitches = notes.map(note => {\n      if (typeof note.note === 'number') return note.note;\n      if (typeof note.note === 'string') {\n        // Simple MIDI note conversion - would need proper note parsing\n        return 60; // Default to middle C\n      }\n      return Array.isArray(note.note) ? (note.note[0] as number) : 60;\n    });\n    \n    const onsets = notes.map(note => {\n      if (typeof note.time === 'number') return note.time;\n      return parseFloat(note.time as string) || 0;\n    });\n    \n    return {\n      gini: this.gini(pitches),\n      balance: this.balance(pitches),\n      motif: this.motif(pitches),\n      dissonance: this.dissonance(pitches, scale),\n      rhythmic: this.rhythmic(onsets),\n      fibonacciIndex: this.fibonacciIndex(pitches),\n      syncopation: this.syncopation(onsets),\n      contourEntropy: this.contourEntropy(pitches),\n      intervalVariance: this.intervalVariance(pitches),\n      density: this.density(notes),\n      gapVariance: this.gapVariance(onsets)\n    };\n  }\n}","import { JMonNote } from '../../types/jmon';\nimport { MusicalAnalysis } from '../../analysis/MusicalAnalysis';\n\nexport interface GeneticOptions {\n  populationSize?: number;\n  generations?: number;\n  mutationRate?: number;\n  crossoverRate?: number;\n  elitismRate?: number;\n  fitnessWeights?: FitnessWeights;\n  scale?: number[];\n  durations?: string[];\n  lengthRange?: [number, number];\n}\n\nexport interface FitnessWeights {\n  gini?: number;\n  balance?: number;\n  motif?: number;\n  dissonance?: number;\n  rhythmic?: number;\n  [key: string]: number | undefined;\n}\n\nexport interface Individual {\n  genes: JMonNote[];\n  fitness: number;\n  age: number;\n}\n\n/**\n * Genetic Algorithm for evolving musical phrases\n * Based on the Python djalgo genetic module (Darwin class)\n */\nexport class GeneticAlgorithm {\n  private options: Required<GeneticOptions>;\n  private population: Individual[];\n  private generation: number;\n  private bestFitness: number;\n  private bestIndividual: Individual | null;\n\n  constructor(options: GeneticOptions = {}) {\n    this.options = {\n      populationSize: options.populationSize || 50,\n      generations: options.generations || 100,\n      mutationRate: options.mutationRate || 0.1,\n      crossoverRate: options.crossoverRate || 0.8,\n      elitismRate: options.elitismRate || 0.1,\n      fitnessWeights: {\n        gini: 0.2,\n        balance: 0.15,\n        motif: 0.25,\n        dissonance: 0.2,\n        rhythmic: 0.2,\n        ...options.fitnessWeights\n      },\n      scale: options.scale || [0, 2, 4, 5, 7, 9, 11], // C major\n      durations: options.durations || ['4n', '8n', '2n', '16n'],\n      lengthRange: options.lengthRange || [8, 16]\n    };\n\n    this.population = [];\n    this.generation = 0;\n    this.bestFitness = -Infinity;\n    this.bestIndividual = null;\n  }\n\n  /**\n   * Initialize random population\n   */\n  public initializePopulation(): void {\n    this.population = [];\n    \n    for (let i = 0; i < this.options.populationSize; i++) {\n      const individual = this.createRandomIndividual();\n      this.population.push(individual);\n    }\n    \n    this.evaluatePopulation();\n  }\n\n  /**\n   * Run the genetic algorithm\n   */\n  public evolve(): Individual {\n    this.initializePopulation();\n    \n    for (let gen = 0; gen < this.options.generations; gen++) {\n      this.generation = gen;\n      \n      // Selection and reproduction\n      const newPopulation = this.createNextGeneration();\n      \n      // Replace population\n      this.population = newPopulation;\n      \n      // Evaluate new population\n      this.evaluatePopulation();\n      \n      // Track best individual\n      const currentBest = this.getBestIndividual();\n      if (currentBest.fitness > this.bestFitness) {\n        this.bestFitness = currentBest.fitness;\n        this.bestIndividual = { ...currentBest };\n      }\n    }\n    \n    return this.getBestIndividual();\n  }\n\n  /**\n   * Create a random individual\n   */\n  private createRandomIndividual(): Individual {\n    const length = Math.floor(Math.random() * (this.options.lengthRange[1] - this.options.lengthRange[0] + 1)) + this.options.lengthRange[0];\n    const genes: JMonNote[] = [];\n    \n    let currentTime = 0;\n    \n    for (let i = 0; i < length; i++) {\n      const pitch = this.randomPitch();\n      const duration = this.randomDuration();\n      \n      genes.push({\n        note: pitch,\n        time: `${Math.floor(currentTime)}:${Math.floor((currentTime % 1) * 4)}:0`, // Simple time format\n        duration: duration,\n        velocity: Math.random() * 0.5 + 0.5 // 0.5 to 1.0\n      });\n      \n      // Advance time (simplified duration parsing)\n      currentTime += this.parseDuration(duration);\n    }\n    \n    return {\n      genes,\n      fitness: 0,\n      age: 0\n    };\n  }\n\n  /**\n   * Generate random pitch from scale\n   */\n  private randomPitch(): number {\n    const octave = Math.floor(Math.random() * 3) + 4; // Octaves 4-6\n    const scaleNote = this.options.scale[Math.floor(Math.random() * this.options.scale.length)];\n    return 12 * octave + scaleNote;\n  }\n\n  /**\n   * Generate random duration\n   */\n  private randomDuration(): string {\n    return this.options.durations[Math.floor(Math.random() * this.options.durations.length)];\n  }\n\n  /**\n   * Parse duration to numeric value (simplified)\n   */\n  private parseDuration(duration: string): number {\n    const durationMap: Record<string, number> = {\n      '1n': 4,\n      '2n': 2,\n      '4n': 1,\n      '8n': 0.5,\n      '16n': 0.25,\n      '32n': 0.125\n    };\n    return durationMap[duration] || 1;\n  }\n\n  /**\n   * Evaluate fitness for all individuals\n   */\n  private evaluatePopulation(): void {\n    for (const individual of this.population) {\n      individual.fitness = this.calculateFitness(individual.genes);\n    }\n    \n    // Sort by fitness (descending)\n    this.population.sort((a, b) => b.fitness - a.fitness);\n  }\n\n  /**\n   * Calculate fitness using weighted musical analysis metrics\n   */\n  private calculateFitness(genes: JMonNote[]): number {\n    const analysis = MusicalAnalysis.analyze(genes, { scale: this.options.scale });\n    let fitness = 0;\n    \n    const weights = this.options.fitnessWeights;\n    \n    // Combine weighted metrics\n    fitness += (weights.gini || 0) * (1 - analysis.gini); // Lower gini is better (more equal)\n    fitness += (weights.balance || 0) * (1 - Math.abs(analysis.balance - 60) / 60); // Closer to middle C\n    fitness += (weights.motif || 0) * analysis.motif;\n    fitness += (weights.dissonance || 0) * (1 - analysis.dissonance); // Lower dissonance is better\n    fitness += (weights.rhythmic || 0) * analysis.rhythmic;\n    \n    // Additional penalties/bonuses\n    const length = genes.length;\n    if (length < this.options.lengthRange[0] || length > this.options.lengthRange[1]) {\n      fitness *= 0.5; // Penalty for wrong length\n    }\n    \n    return Math.max(0, fitness); // Ensure non-negative\n  }\n\n  /**\n   * Create next generation through selection, crossover, and mutation\n   */\n  private createNextGeneration(): Individual[] {\n    const newPopulation: Individual[] = [];\n    const eliteCount = Math.floor(this.options.populationSize * this.options.elitismRate);\n    \n    // Elitism - keep best individuals\n    for (let i = 0; i < eliteCount; i++) {\n      const elite = { ...this.population[i] };\n      elite.age++;\n      newPopulation.push(elite);\n    }\n    \n    // Generate offspring\n    while (newPopulation.length < this.options.populationSize) {\n      const parent1 = this.selectParent();\n      const parent2 = this.selectParent();\n      \n      let offspring1, offspring2;\n      \n      if (Math.random() < this.options.crossoverRate) {\n        [offspring1, offspring2] = this.crossover(parent1, parent2);\n      } else {\n        offspring1 = { ...parent1 };\n        offspring2 = { ...parent2 };\n      }\n      \n      // Mutation\n      if (Math.random() < this.options.mutationRate) {\n        this.mutate(offspring1);\n      }\n      if (Math.random() < this.options.mutationRate) {\n        this.mutate(offspring2);\n      }\n      \n      offspring1.age = 0;\n      offspring2.age = 0;\n      \n      newPopulation.push(offspring1);\n      if (newPopulation.length < this.options.populationSize) {\n        newPopulation.push(offspring2);\n      }\n    }\n    \n    return newPopulation;\n  }\n\n  /**\n   * Tournament selection\n   */\n  private selectParent(): Individual {\n    const tournamentSize = 3;\n    const tournament: Individual[] = [];\n    \n    for (let i = 0; i < tournamentSize; i++) {\n      const randomIndex = Math.floor(Math.random() * this.population.length);\n      tournament.push(this.population[randomIndex]);\n    }\n    \n    tournament.sort((a, b) => b.fitness - a.fitness);\n    return { ...tournament[0] };\n  }\n\n  /**\n   * Single-point crossover\n   */\n  private crossover(parent1: Individual, parent2: Individual): [Individual, Individual] {\n    const minLength = Math.min(parent1.genes.length, parent2.genes.length);\n    const crossoverPoint = Math.floor(Math.random() * minLength);\n    \n    const offspring1: Individual = {\n      genes: [\n        ...parent1.genes.slice(0, crossoverPoint),\n        ...parent2.genes.slice(crossoverPoint)\n      ],\n      fitness: 0,\n      age: 0\n    };\n    \n    const offspring2: Individual = {\n      genes: [\n        ...parent2.genes.slice(0, crossoverPoint),\n        ...parent1.genes.slice(crossoverPoint)\n      ],\n      fitness: 0,\n      age: 0\n    };\n    \n    return [offspring1, offspring2];\n  }\n\n  /**\n   * Mutate an individual\n   */\n  private mutate(individual: Individual): void {\n    const genes = individual.genes;\n    const mutationType = Math.random();\n    \n    if (mutationType < 0.3) {\n      // Pitch mutation\n      const index = Math.floor(Math.random() * genes.length);\n      genes[index].note = this.randomPitch();\n    } else if (mutationType < 0.6) {\n      // Duration mutation\n      const index = Math.floor(Math.random() * genes.length);\n      genes[index].duration = this.randomDuration();\n    } else if (mutationType < 0.8) {\n      // Velocity mutation\n      const index = Math.floor(Math.random() * genes.length);\n      genes[index].velocity = Math.random() * 0.5 + 0.5;\n    } else {\n      // Structure mutation (add/remove note)\n      if (Math.random() < 0.5 && genes.length < this.options.lengthRange[1]) {\n        // Add note\n        const insertIndex = Math.floor(Math.random() * (genes.length + 1));\n        const newNote: JMonNote = {\n          note: this.randomPitch(),\n          time: '0:0:0', // Will be recalculated\n          duration: this.randomDuration(),\n          velocity: Math.random() * 0.5 + 0.5\n        };\n        genes.splice(insertIndex, 0, newNote);\n      } else if (genes.length > this.options.lengthRange[0]) {\n        // Remove note\n        const removeIndex = Math.floor(Math.random() * genes.length);\n        genes.splice(removeIndex, 1);\n      }\n    }\n    \n    // Recalculate timing\n    this.recalculateTiming(individual);\n  }\n\n  /**\n   * Recalculate note timing after mutations\n   */\n  private recalculateTiming(individual: Individual): void {\n    let currentTime = 0;\n    \n    for (const note of individual.genes) {\n      note.time = `${Math.floor(currentTime)}:${Math.floor((currentTime % 1) * 4)}:0`;\n      currentTime += this.parseDuration(note.duration as string);\n    }\n  }\n\n  /**\n   * Get the best individual from current population\n   */\n  public getBestIndividual(): Individual {\n    return { ...this.population[0] };\n  }\n\n  /**\n   * Get population statistics\n   */\n  public getStatistics() {\n    const fitnesses = this.population.map(ind => ind.fitness);\n    const avgFitness = fitnesses.reduce((sum, f) => sum + f, 0) / fitnesses.length;\n    const maxFitness = Math.max(...fitnesses);\n    const minFitness = Math.min(...fitnesses);\n    \n    return {\n      generation: this.generation,\n      avgFitness,\n      maxFitness,\n      minFitness,\n      bestAllTime: this.bestFitness,\n      populationSize: this.population.length\n    };\n  }\n\n  /**\n   * Set custom fitness function\n   */\n  public setCustomFitness(fitnessFunction: (genes: JMonNote[]) => number): void {\n    this.calculateFitness = fitnessFunction;\n  }\n}","export interface WalkOptions {\n  length?: number;\n  dimensions?: number;\n  stepSize?: number;\n  bounds?: [number, number];\n  branchProbability?: number;\n  mergeProbability?: number;\n  attractorStrength?: number;\n  attractorPosition?: number[];\n}\n\nexport interface WalkState {\n  position: number[];\n  velocity: number[];\n  branches: WalkState[];\n  age: number;\n  active: boolean;\n}\n\n/**\n * Multi-dimensional random walk generator with branching and merging\n * Based on the Python djalgo walk module (Chain class)\n */\nexport class RandomWalk {\n  private options: Required<WalkOptions>;\n  private walkers: WalkState[];\n  private history: number[][];\n\n  constructor(options: WalkOptions = {}) {\n    this.options = {\n      length: options.length || 100,\n      dimensions: options.dimensions || 1,\n      stepSize: options.stepSize || 1,\n      bounds: options.bounds || [-100, 100],\n      branchProbability: options.branchProbability || 0.05,\n      mergeProbability: options.mergeProbability || 0.02,\n      attractorStrength: options.attractorStrength || 0,\n      attractorPosition: options.attractorPosition || Array(options.dimensions || 1).fill(0)\n    };\n\n    this.walkers = [];\n    this.history = [];\n  }\n\n  /**\n   * Generate random walk sequence\n   */\n  public generate(startPosition?: number[]): number[][] {\n    this.initialize(startPosition);\n    this.history = [];\n\n    for (let step = 0; step < this.options.length; step++) {\n      this.updateWalkers();\n      this.recordState();\n      this.handleBranching();\n      this.handleMerging();\n    }\n\n    return this.history;\n  }\n\n  /**\n   * Initialize walker(s)\n   */\n  private initialize(startPosition?: number[]): void {\n    const initialPosition = startPosition || Array(this.options.dimensions).fill(0);\n    \n    this.walkers = [{\n      position: [...initialPosition],\n      velocity: Array(this.options.dimensions).fill(0),\n      branches: [],\n      age: 0,\n      active: true\n    }];\n  }\n\n  /**\n   * Update all active walkers\n   */\n  private updateWalkers(): void {\n    for (const walker of this.walkers) {\n      if (!walker.active) continue;\n\n      // Random step in each dimension\n      for (let dim = 0; dim < this.options.dimensions; dim++) {\n        const randomStep = (Math.random() - 0.5) * 2 * this.options.stepSize;\n        \n        // Apply attractor force if enabled\n        let attractorForce = 0;\n        if (this.options.attractorStrength > 0) {\n          const distance = walker.position[dim] - this.options.attractorPosition[dim];\n          attractorForce = -this.options.attractorStrength * distance;\n        }\n        \n        // Update velocity and position\n        walker.velocity[dim] = walker.velocity[dim] * 0.9 + randomStep + attractorForce;\n        walker.position[dim] += walker.velocity[dim];\n        \n        // Apply bounds\n        if (walker.position[dim] < this.options.bounds[0]) {\n          walker.position[dim] = this.options.bounds[0];\n          walker.velocity[dim] *= -0.5; // Bounce with damping\n        } else if (walker.position[dim] > this.options.bounds[1]) {\n          walker.position[dim] = this.options.bounds[1];\n          walker.velocity[dim] *= -0.5;\n        }\n      }\n\n      walker.age++;\n    }\n  }\n\n  /**\n   * Record current state of all walkers\n   */\n  private recordState(): void {\n    const activeWalkers = this.walkers.filter(w => w.active);\n    \n    if (activeWalkers.length > 0) {\n      // Average position if multiple walkers, or just use the primary walker\n      const avgPosition: number[] = Array(this.options.dimensions).fill(0);\n      \n      for (const walker of activeWalkers) {\n        for (let dim = 0; dim < this.options.dimensions; dim++) {\n          avgPosition[dim] += walker.position[dim];\n        }\n      }\n      \n      for (let dim = 0; dim < this.options.dimensions; dim++) {\n        avgPosition[dim] /= activeWalkers.length;\n      }\n      \n      this.history.push([...avgPosition]);\n    }\n  }\n\n  /**\n   * Handle branching (walker splitting)\n   */\n  private handleBranching(): void {\n    const newBranches: WalkState[] = [];\n    \n    for (const walker of this.walkers) {\n      if (!walker.active) continue;\n      \n      if (Math.random() < this.options.branchProbability) {\n        // Create a new branch\n        const branch: WalkState = {\n          position: [...walker.position],\n          velocity: walker.velocity.map(v => v + (Math.random() - 0.5) * this.options.stepSize),\n          branches: [],\n          age: 0,\n          active: true\n        };\n        \n        newBranches.push(branch);\n        walker.branches.push(branch);\n      }\n    }\n    \n    this.walkers.push(...newBranches);\n  }\n\n  /**\n   * Handle merging (walker combining)\n   */\n  private handleMerging(): void {\n    if (this.walkers.length <= 1) return;\n    \n    const activeWalkers = this.walkers.filter(w => w.active);\n    const mergeThreshold = this.options.stepSize * 2;\n    \n    for (let i = 0; i < activeWalkers.length; i++) {\n      for (let j = i + 1; j < activeWalkers.length; j++) {\n        if (Math.random() < this.options.mergeProbability) {\n          const distance = this.calculateDistance(activeWalkers[i].position, activeWalkers[j].position);\n          \n          if (distance < mergeThreshold) {\n            // Merge walkers - average their properties\n            for (let dim = 0; dim < this.options.dimensions; dim++) {\n              activeWalkers[i].position[dim] = (activeWalkers[i].position[dim] + activeWalkers[j].position[dim]) / 2;\n              activeWalkers[i].velocity[dim] = (activeWalkers[i].velocity[dim] + activeWalkers[j].velocity[dim]) / 2;\n            }\n            \n            activeWalkers[j].active = false;\n          }\n        }\n      }\n    }\n    \n    // Remove inactive walkers\n    this.walkers = this.walkers.filter(w => w.active);\n  }\n\n  /**\n   * Calculate Euclidean distance between two positions\n   */\n  private calculateDistance(pos1: number[], pos2: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < pos1.length; i++) {\n      sum += Math.pow(pos1[i] - pos2[i], 2);\n    }\n    return Math.sqrt(sum);\n  }\n\n  /**\n   * Get 1D projection of multi-dimensional walk\n   */\n  public getProjection(dimension: number = 0): number[] {\n    return this.history.map(state => state[dimension] || 0);\n  }\n\n  /**\n   * Map walk to musical scale\n   */\n  public mapToScale(dimension: number = 0, scale: number[] = [0, 2, 4, 5, 7, 9, 11], octaveRange: number = 3): number[] {\n    const projection = this.getProjection(dimension);\n    if (projection.length === 0) return [];\n    \n    const minVal = Math.min(...projection);\n    const maxVal = Math.max(...projection);\n    const range = maxVal - minVal || 1;\n    \n    return projection.map(value => {\n      const normalized = (value - minVal) / range;\n      const scaleIndex = Math.floor(normalized * scale.length * octaveRange);\n      const octave = Math.floor(scaleIndex / scale.length);\n      const noteIndex = scaleIndex % scale.length;\n      \n      return 60 + octave * 12 + scale[noteIndex];\n    });\n  }\n\n  /**\n   * Map walk to rhythmic durations\n   */\n  public mapToRhythm(dimension: number = 0, durations: number[] = [0.25, 0.5, 1, 2]): number[] {\n    const projection = this.getProjection(dimension);\n    if (projection.length === 0) return [];\n    \n    const minVal = Math.min(...projection);\n    const maxVal = Math.max(...projection);\n    const range = maxVal - minVal || 1;\n    \n    return projection.map(value => {\n      const normalized = (value - minVal) / range;\n      const durationIndex = Math.floor(normalized * durations.length);\n      const clampedIndex = Math.max(0, Math.min(durationIndex, durations.length - 1));\n      return durations[clampedIndex];\n    });\n  }\n\n  /**\n   * Map walk to velocities\n   */\n  public mapToVelocity(dimension: number = 0, minVel: number = 0.3, maxVel: number = 1.0): number[] {\n    const projection = this.getProjection(dimension);\n    if (projection.length === 0) return [];\n    \n    const minVal = Math.min(...projection);\n    const maxVal = Math.max(...projection);\n    const range = maxVal - minVal || 1;\n    \n    return projection.map(value => {\n      const normalized = (value - minVal) / range;\n      return minVel + normalized * (maxVel - minVel);\n    });\n  }\n\n  /**\n   * Generate correlated walk (walk that follows another walk with some correlation)\n   */\n  public generateCorrelated(targetWalk: number[], correlation: number = 0.5, dimension: number = 0): number[] {\n    if (targetWalk.length === 0) return [];\n    \n    const correlatedWalk: number[] = [];\n    let position = 0;\n    \n    for (let i = 0; i < targetWalk.length; i++) {\n      const randomStep = (Math.random() - 0.5) * 2 * this.options.stepSize;\n      const correlatedStep = correlation * (targetWalk[i] - position);\n      \n      position += randomStep + correlatedStep;\n      \n      // Apply bounds\n      position = Math.max(this.options.bounds[0], Math.min(this.options.bounds[1], position));\n      \n      correlatedWalk.push(position);\n    }\n    \n    return correlatedWalk;\n  }\n\n  /**\n   * Analyze walk properties\n   */\n  public analyze(): {\n    meanDisplacement: number;\n    meanSquaredDisplacement: number;\n    totalDistance: number;\n    fractalDimension: number;\n  } {\n    if (this.history.length < 2) {\n      return {\n        meanDisplacement: 0,\n        meanSquaredDisplacement: 0,\n        totalDistance: 0,\n        fractalDimension: 0\n      };\n    }\n    \n    const projection = this.getProjection(0);\n    const startPos = projection[0];\n    const endPos = projection[projection.length - 1];\n    \n    // Mean displacement\n    const meanDisplacement = Math.abs(endPos - startPos);\n    \n    // Mean squared displacement\n    const squaredDisplacements = projection.map(pos => Math.pow(pos - startPos, 2));\n    const meanSquaredDisplacement = squaredDisplacements.reduce((sum, sq) => sum + sq, 0) / squaredDisplacements.length;\n    \n    // Total distance traveled\n    let totalDistance = 0;\n    for (let i = 1; i < projection.length; i++) {\n      totalDistance += Math.abs(projection[i] - projection[i - 1]);\n    }\n    \n    // Rough fractal dimension estimate (box-counting approximation)\n    const fractalDimension = totalDistance > 0 ? Math.log(totalDistance) / Math.log(projection.length) : 0;\n    \n    return {\n      meanDisplacement,\n      meanSquaredDisplacement,\n      totalDistance,\n      fractalDimension\n    };\n  }\n\n  /**\n   * Get current walker states\n   */\n  public getWalkerStates(): WalkState[] {\n    return this.walkers.map(walker => ({ ...walker }));\n  }\n\n  /**\n   * Reset the walk generator\n   */\n  public reset(): void {\n    this.walkers = [];\n    this.history = [];\n  }\n}","export interface MandelbrotOptions {\n  width?: number;\n  height?: number;\n  maxIterations?: number;\n  xMin?: number;\n  xMax?: number;\n  yMin?: number;\n  yMax?: number;\n}\n\nexport interface ComplexPoint {\n  real: number;\n  imaginary: number;\n}\n\n/**\n * Mandelbrot set fractal generator for musical composition\n * Based on the Python djalgo fractal module\n */\nexport class Mandelbrot {\n  private width: number;\n  private height: number;\n  private maxIterations: number;\n  private xMin: number;\n  private xMax: number;\n  private yMin: number;\n  private yMax: number;\n\n  constructor(options: MandelbrotOptions = {}) {\n    this.width = options.width || 100;\n    this.height = options.height || 100;\n    this.maxIterations = options.maxIterations || 100;\n    this.xMin = options.xMin || -2.5;\n    this.xMax = options.xMax || 1.5;\n    this.yMin = options.yMin || -2.0;\n    this.yMax = options.yMax || 2.0;\n  }\n\n  /**\n   * Generate Mandelbrot set data\n   */\n  public generate(): number[][] {\n    const data: number[][] = [];\n    \n    for (let y = 0; y < this.height; y++) {\n      const row: number[] = [];\n      for (let x = 0; x < this.width; x++) {\n        const real = this.xMin + (x / this.width) * (this.xMax - this.xMin);\n        const imaginary = this.yMin + (y / this.height) * (this.yMax - this.yMin);\n        \n        const iterations = this.mandelbrotIterations({ real, imaginary });\n        row.push(iterations);\n      }\n      data.push(row);\n    }\n    \n    return data;\n  }\n\n  /**\n   * Extract sequence from Mandelbrot data using various methods\n   */\n  public extractSequence(method: 'diagonal' | 'border' | 'spiral' | 'column' | 'row' = 'diagonal', index: number = 0): number[] {\n    const data = this.generate();\n    \n    switch (method) {\n      case 'diagonal':\n        return this.extractDiagonal(data);\n      \n      case 'border':\n        return this.extractBorder(data);\n      \n      case 'spiral':\n        return this.extractSpiral(data);\n      \n      case 'column':\n        return this.extractColumn(data, index);\n      \n      case 'row':\n        return this.extractRow(data, index);\n      \n      default:\n        return this.extractDiagonal(data);\n    }\n  }\n\n  /**\n   * Calculate Mandelbrot iterations for a complex point\n   */\n  private mandelbrotIterations(c: ComplexPoint): number {\n    let z: ComplexPoint = { real: 0, imaginary: 0 };\n    \n    for (let i = 0; i < this.maxIterations; i++) {\n      // z = z^2 + c\n      const zReal = z.real * z.real - z.imaginary * z.imaginary + c.real;\n      const zImaginary = 2 * z.real * z.imaginary + c.imaginary;\n      \n      z.real = zReal;\n      z.imaginary = zImaginary;\n      \n      // Check if point escapes\n      if (z.real * z.real + z.imaginary * z.imaginary > 4) {\n        return i;\n      }\n    }\n    \n    return this.maxIterations;\n  }\n\n  /**\n   * Extract diagonal sequence\n   */\n  private extractDiagonal(data: number[][]): number[] {\n    const sequence: number[] = [];\n    const minDimension = Math.min(data.length, data[0]?.length || 0);\n    \n    for (let i = 0; i < minDimension; i++) {\n      sequence.push(data[i][i]);\n    }\n    \n    return sequence;\n  }\n\n  /**\n   * Extract border sequence (clockwise)\n   */\n  private extractBorder(data: number[][]): number[] {\n    const sequence: number[] = [];\n    const height = data.length;\n    const width = data[0]?.length || 0;\n    \n    if (height === 0 || width === 0) return sequence;\n    \n    // Top row\n    for (let x = 0; x < width; x++) {\n      sequence.push(data[0][x]);\n    }\n    \n    // Right column (excluding top corner)\n    for (let y = 1; y < height; y++) {\n      sequence.push(data[y][width - 1]);\n    }\n    \n    // Bottom row (excluding right corner, reverse order)\n    if (height > 1) {\n      for (let x = width - 2; x >= 0; x--) {\n        sequence.push(data[height - 1][x]);\n      }\n    }\n    \n    // Left column (excluding corners, reverse order)\n    if (width > 1) {\n      for (let y = height - 2; y > 0; y--) {\n        sequence.push(data[y][0]);\n      }\n    }\n    \n    return sequence;\n  }\n\n  /**\n   * Extract spiral sequence (from outside to inside)\n   */\n  private extractSpiral(data: number[][]): number[] {\n    const sequence: number[] = [];\n    const height = data.length;\n    const width = data[0]?.length || 0;\n    \n    if (height === 0 || width === 0) return sequence;\n    \n    let top = 0, bottom = height - 1;\n    let left = 0, right = width - 1;\n    \n    while (top <= bottom && left <= right) {\n      // Top row\n      for (let x = left; x <= right; x++) {\n        sequence.push(data[top][x]);\n      }\n      top++;\n      \n      // Right column\n      for (let y = top; y <= bottom; y++) {\n        sequence.push(data[y][right]);\n      }\n      right--;\n      \n      // Bottom row\n      if (top <= bottom) {\n        for (let x = right; x >= left; x--) {\n          sequence.push(data[bottom][x]);\n        }\n        bottom--;\n      }\n      \n      // Left column\n      if (left <= right) {\n        for (let y = bottom; y >= top; y--) {\n          sequence.push(data[y][left]);\n        }\n        left++;\n      }\n    }\n    \n    return sequence;\n  }\n\n  /**\n   * Extract specific column\n   */\n  private extractColumn(data: number[][], columnIndex: number): number[] {\n    const sequence: number[] = [];\n    const width = data[0]?.length || 0;\n    const clampedIndex = Math.max(0, Math.min(columnIndex, width - 1));\n    \n    for (const row of data) {\n      if (row[clampedIndex] !== undefined) {\n        sequence.push(row[clampedIndex]);\n      }\n    }\n    \n    return sequence;\n  }\n\n  /**\n   * Extract specific row\n   */\n  private extractRow(data: number[][], rowIndex: number): number[] {\n    const clampedIndex = Math.max(0, Math.min(rowIndex, data.length - 1));\n    return data[clampedIndex] ? [...data[clampedIndex]] : [];\n  }\n\n  /**\n   * Map fractal values to musical scale\n   */\n  public mapToScale(sequence: number[], scale: number[] = [0, 2, 4, 5, 7, 9, 11], octaveRange: number = 3): number[] {\n    if (sequence.length === 0) return [];\n    \n    const minVal = Math.min(...sequence);\n    const maxVal = Math.max(...sequence);\n    const range = maxVal - minVal || 1;\n    \n    return sequence.map(value => {\n      // Normalize to 0-1\n      const normalized = (value - minVal) / range;\n      \n      // Map to scale indices\n      const scaleIndex = Math.floor(normalized * scale.length * octaveRange);\n      const octave = Math.floor(scaleIndex / scale.length);\n      const noteIndex = scaleIndex % scale.length;\n      \n      // Convert to MIDI note (C4 = 60)\n      return 60 + octave * 12 + scale[noteIndex];\n    });\n  }\n\n  /**\n   * Generate rhythmic pattern from fractal data\n   */\n  public mapToRhythm(sequence: number[], subdivisions: number[] = [1, 2, 4, 8, 16]): number[] {\n    if (sequence.length === 0) return [];\n    \n    const minVal = Math.min(...sequence);\n    const maxVal = Math.max(...sequence);\n    const range = maxVal - minVal || 1;\n    \n    return sequence.map(value => {\n      const normalized = (value - minVal) / range;\n      const subdivisionIndex = Math.floor(normalized * subdivisions.length);\n      const clampedIndex = Math.max(0, Math.min(subdivisionIndex, subdivisions.length - 1));\n      return 1 / subdivisions[clampedIndex];\n    });\n  }\n}","export interface LogisticMapOptions {\n  r?: number;          // Growth parameter (0-4)\n  x0?: number;         // Initial value (0-1)\n  iterations?: number; // Number of iterations\n  skipTransient?: number; // Skip initial chaotic transients\n}\n\n/**\n * Logistic Map chaotic sequence generator\n * Based on the equation: x(n+1) = r * x(n) * (1 - x(n))\n */\nexport class LogisticMap {\n  private r: number;\n  private x0: number;\n  private iterations: number;\n  private skipTransient: number;\n\n  constructor(options: LogisticMapOptions = {}) {\n    this.r = options.r || 3.8;                    // Chaotic regime\n    this.x0 = options.x0 || 0.5;                  // Initial condition\n    this.iterations = options.iterations || 1000;  // Total iterations\n    this.skipTransient = options.skipTransient || 100; // Skip initial settling\n  }\n\n  /**\n   * Generate logistic map sequence\n   */\n  public generate(): number[] {\n    const sequence: number[] = [];\n    let x = this.x0;\n\n    // Generate iterations including transients\n    for (let i = 0; i < this.iterations + this.skipTransient; i++) {\n      x = this.r * x * (1 - x);\n      \n      // Only collect after transient period\n      if (i >= this.skipTransient) {\n        sequence.push(x);\n      }\n    }\n\n    return sequence;\n  }\n\n  /**\n   * Generate bifurcation data for different r values\n   */\n  public bifurcationDiagram(rMin: number = 2.5, rMax: number = 4.0, rSteps: number = 1000): { r: number[], x: number[] } {\n    const rValues: number[] = [];\n    const xValues: number[] = [];\n    \n    const rStep = (rMax - rMin) / rSteps;\n    \n    for (let i = 0; i < rSteps; i++) {\n      const r = rMin + i * rStep;\n      \n      // Generate sequence for this r value\n      const originalR = this.r;\n      this.r = r;\n      const sequence = this.generate();\n      this.r = originalR;\n      \n      // Take last few values (settled state)\n      const settledValues = sequence.slice(-50);\n      \n      for (const x of settledValues) {\n        rValues.push(r);\n        xValues.push(x);\n      }\n    }\n    \n    return { r: rValues, x: xValues };\n  }\n\n  /**\n   * Map chaotic values to musical scale\n   */\n  public mapToScale(sequence: number[], scale: number[] = [0, 2, 4, 5, 7, 9, 11], octaveRange: number = 3): number[] {\n    if (sequence.length === 0) return [];\n    \n    return sequence.map(value => {\n      // value is already in range [0, 1]\n      const scaleIndex = Math.floor(value * scale.length * octaveRange);\n      const octave = Math.floor(scaleIndex / scale.length);\n      const noteIndex = scaleIndex % scale.length;\n      \n      // Convert to MIDI note (C4 = 60)\n      return 60 + octave * 12 + scale[noteIndex];\n    });\n  }\n\n  /**\n   * Map to rhythmic durations\n   */\n  public mapToRhythm(sequence: number[], durations: number[] = [0.25, 0.5, 1, 2]): number[] {\n    if (sequence.length === 0) return [];\n    \n    return sequence.map(value => {\n      const durationIndex = Math.floor(value * durations.length);\n      const clampedIndex = Math.max(0, Math.min(durationIndex, durations.length - 1));\n      return durations[clampedIndex];\n    });\n  }\n\n  /**\n   * Map to velocities\n   */\n  public mapToVelocity(sequence: number[], minVel: number = 0.3, maxVel: number = 1.0): number[] {\n    if (sequence.length === 0) return [];\n    \n    const range = maxVel - minVel;\n    return sequence.map(value => minVel + value * range);\n  }\n\n  /**\n   * Detect periodic cycles in the sequence\n   */\n  public detectCycles(sequence: number[], tolerance: number = 0.01): number[] {\n    const cycles: number[] = [];\n    \n    for (let period = 1; period <= Math.floor(sequence.length / 2); period++) {\n      let isPeriodic = true;\n      \n      for (let i = period; i < Math.min(sequence.length, period * 3); i++) {\n        if (Math.abs(sequence[i] - sequence[i - period]) > tolerance) {\n          isPeriodic = false;\n          break;\n        }\n      }\n      \n      if (isPeriodic) {\n        cycles.push(period);\n      }\n    }\n    \n    return cycles;\n  }\n\n  /**\n   * Calculate Lyapunov exponent (measure of chaos)\n   */\n  public lyapunovExponent(iterations: number = 10000): number {\n    let x = this.x0;\n    let sum = 0;\n    \n    for (let i = 0; i < iterations; i++) {\n      // Derivative of logistic map: r * (1 - 2*x)\n      const derivative = this.r * (1 - 2 * x);\n      sum += Math.log(Math.abs(derivative));\n      x = this.r * x * (1 - x);\n    }\n    \n    return sum / iterations;\n  }\n\n  /**\n   * Generate multiple correlated sequences\n   */\n  public generateCoupled(numSequences: number = 2, coupling: number = 0.1): number[][] {\n    const sequences: number[][] = Array(numSequences).fill(null).map(() => []);\n    const states: number[] = Array(numSequences).fill(this.x0);\n    \n    for (let i = 0; i < this.iterations + this.skipTransient; i++) {\n      const newStates: number[] = [...states];\n      \n      // Update each sequence with coupling\n      for (let j = 0; j < numSequences; j++) {\n        let coupledTerm = 0;\n        \n        // Calculate coupling influence from other sequences\n        for (let k = 0; k < numSequences; k++) {\n          if (k !== j) {\n            coupledTerm += coupling * (states[k] - states[j]);\n          }\n        }\n        \n        // Standard logistic map update with coupling\n        newStates[j] = this.r * states[j] * (1 - states[j]) + coupledTerm;\n        \n        // Keep values in valid range\n        newStates[j] = Math.max(0, Math.min(1, newStates[j]));\n      }\n      \n      states.splice(0, numSequences, ...newStates);\n      \n      // Collect after transient period\n      if (i >= this.skipTransient) {\n        for (let j = 0; j < numSequences; j++) {\n          sequences[j].push(states[j]);\n        }\n      }\n    }\n    \n    return sequences;\n  }\n\n  /**\n   * Apply different chaotic regimes\n   */\n  public setRegime(regime: 'periodic' | 'chaotic' | 'edge' | 'custom', customR?: number): void {\n    switch (regime) {\n      case 'periodic':\n        this.r = 3.2; // Period-2 cycle\n        break;\n      case 'chaotic':\n        this.r = 3.9; // Full chaos\n        break;\n      case 'edge':\n        this.r = 3.57; // Edge of chaos\n        break;\n      case 'custom':\n        if (customR !== undefined) {\n          this.r = Math.max(0, Math.min(4, customR));\n        }\n        break;\n    }\n  }\n\n  /**\n   * Get current parameters\n   */\n  public getParameters(): LogisticMapOptions {\n    return {\n      r: this.r,\n      x0: this.x0,\n      iterations: this.iterations,\n      skipTransient: this.skipTransient\n    };\n  }\n}","import { MusicalNote } from '../../types/music';\n\nexport type MinimalismOperation = 'additive' | 'subtractive';\nexport type MinimalismDirection = 'forward' | 'backward' | 'inward' | 'outward';\n\nexport interface MinimalismOptions {\n  operation: MinimalismOperation;\n  direction: MinimalismDirection;\n  repetition: number;\n}\n\n/**\n * Implementation of musical minimalism processes based on the Python djalgo library\n * Supports additive and subtractive operations in four directions\n */\nexport class MinimalismProcess {\n  private operation: MinimalismOperation;\n  private direction: MinimalismDirection;\n  private repetition: number;\n  private sequence: MusicalNote[] = [];\n\n  constructor(options: MinimalismOptions) {\n    const { operation, direction, repetition } = options;\n    \n    if (!['additive', 'subtractive'].includes(operation)) {\n      throw new Error(\"Invalid operation. Choose 'additive' or 'subtractive'.\");\n    }\n    \n    if (!['forward', 'backward', 'inward', 'outward'].includes(direction)) {\n      throw new Error(\"Invalid direction. Choose 'forward', 'backward', 'inward' or 'outward'.\");\n    }\n    \n    if (repetition < 0 || !Number.isInteger(repetition)) {\n      throw new Error(\"Invalid repetition value. Must be an integer greater than or equal to 0.\");\n    }\n    \n    this.operation = operation;\n    this.direction = direction;\n    this.repetition = repetition;\n  }\n\n  /**\n   * Generate processed sequence based on operation and direction\n   */\n  public generate(sequence: MusicalNote[]): MusicalNote[] {\n    this.sequence = sequence;\n    \n    let processed: MusicalNote[];\n    \n    if (this.operation === 'additive' && this.direction === 'forward') {\n      processed = this.additiveForward();\n    } else if (this.operation === 'additive' && this.direction === 'backward') {\n      processed = this.additiveBackward();\n    } else if (this.operation === 'additive' && this.direction === 'inward') {\n      processed = this.additiveInward();\n    } else if (this.operation === 'additive' && this.direction === 'outward') {\n      processed = this.additiveOutward();\n    } else if (this.operation === 'subtractive' && this.direction === 'forward') {\n      processed = this.subtractiveForward();\n    } else if (this.operation === 'subtractive' && this.direction === 'backward') {\n      processed = this.subtractiveBackward();\n    } else if (this.operation === 'subtractive' && this.direction === 'inward') {\n      processed = this.subtractiveInward();\n    } else if (this.operation === 'subtractive' && this.direction === 'outward') {\n      processed = this.subtractiveOutward();\n    } else {\n      throw new Error('Invalid operation/direction combination');\n    }\n\n    // Adjust offsets based on durations\n    return this.adjustOffsets(processed);\n  }\n\n  private additiveForward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    \n    for (let i = 0; i < this.sequence.length; i++) {\n      const segment = this.sequence.slice(0, i + 1);\n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private additiveBackward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    \n    for (let i = this.sequence.length; i > 0; i--) {\n      const segment = this.sequence.slice(i - 1);\n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private additiveInward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    const n = this.sequence.length;\n    \n    for (let i = 0; i < Math.ceil(n / 2); i++) {\n      let segment: MusicalNote[];\n      \n      if (i < n - i - 1) {\n        // Combine from start and end\n        const leftPart = this.sequence.slice(0, i + 1);\n        const rightPart = this.sequence.slice(n - i - 1);\n        segment = [...leftPart, ...rightPart];\n      } else {\n        // Middle element(s)\n        segment = [...this.sequence];\n      }\n      \n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private additiveOutward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    const n = this.sequence.length;\n    \n    if (n % 2 === 0) {\n      // Even length\n      const midLeft = Math.floor(n / 2) - 1;\n      const midRight = Math.floor(n / 2);\n      \n      for (let i = 0; i < n / 2; i++) {\n        const segment = this.sequence.slice(midLeft - i, midRight + i + 1);\n        for (let rep = 0; rep <= this.repetition; rep++) {\n          processed.push(...segment);\n        }\n      }\n    } else {\n      // Odd length\n      const mid = Math.floor(n / 2);\n      \n      for (let i = 0; i <= mid; i++) {\n        const segment = this.sequence.slice(mid - i, mid + i + 1);\n        for (let rep = 0; rep <= this.repetition; rep++) {\n          processed.push(...segment);\n        }\n      }\n    }\n    \n    return processed;\n  }\n\n  private subtractiveForward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    \n    for (let i = 0; i < this.sequence.length; i++) {\n      const segment = this.sequence.slice(i);\n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private subtractiveBackward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    \n    for (let i = this.sequence.length; i > 0; i--) {\n      const segment = this.sequence.slice(0, i);\n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private subtractiveInward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    const n = this.sequence.length;\n    const steps = Math.floor(n / 2);\n    \n    // Start with full sequence\n    for (let rep = 0; rep <= this.repetition; rep++) {\n      processed.push(...this.sequence);\n    }\n    \n    // Remove elements from both ends\n    for (let i = 1; i <= steps; i++) {\n      const segment = this.sequence.slice(i, n - i);\n      if (segment.length > 0) {\n        for (let rep = 0; rep <= this.repetition; rep++) {\n          processed.push(...segment);\n        }\n      }\n    }\n    \n    return processed;\n  }\n\n  private subtractiveOutward(): MusicalNote[] {\n    const processed: MusicalNote[] = [];\n    let segment = [...this.sequence];\n    \n    // Start with full sequence\n    for (let rep = 0; rep <= this.repetition; rep++) {\n      processed.push(...segment);\n    }\n    \n    // Remove first and last elements iteratively\n    while (segment.length > 2) {\n      segment = segment.slice(1, -1);\n      for (let rep = 0; rep <= this.repetition; rep++) {\n        processed.push(...segment);\n      }\n    }\n    \n    return processed;\n  }\n\n  private adjustOffsets(processed: MusicalNote[]): MusicalNote[] {\n    let currentOffset = 0;\n    \n    return processed.map(note => {\n      const newNote: MusicalNote = {\n        ...note,\n        offset: currentOffset\n      };\n      currentOffset += note.duration;\n      return newNote;\n    });\n  }\n}\n\n/**\n * Tintinnabuli style implementation for modal composition\n */\nexport class Tintinnabuli {\n  private tChord: number[];\n  private direction: 'up' | 'down' | 'any' | 'alternate';\n  private rank: number;\n  private isAlternate: boolean;\n  private currentDirection: 'up' | 'down';\n\n  constructor(\n    tChord: number[],\n    direction: 'up' | 'down' | 'any' | 'alternate' = 'down',\n    rank: number = 0\n  ) {\n    if (!['up', 'down', 'any', 'alternate'].includes(direction)) {\n      throw new Error(\"Invalid direction. Choose 'up', 'down', 'any' or 'alternate'.\");\n    }\n    \n    this.tChord = tChord;\n    this.isAlternate = direction === 'alternate';\n    this.currentDirection = this.isAlternate ? 'up' : direction as 'up' | 'down';\n    this.direction = direction;\n    \n    if (!Number.isInteger(rank) || rank < 0) {\n      throw new Error(\"Rank must be a non-negative integer.\");\n    }\n    \n    this.rank = Math.min(rank, tChord.length - 1);\n    \n    if (this.rank >= tChord.length) {\n      console.warn(\"Rank exceeds the length of the t-chord. Using last note of the t-chord.\");\n    }\n  }\n\n  /**\n   * Generate t-voice from m-voice sequence\n   */\n  public generate(sequence: MusicalNote[]): MusicalNote[] {\n    const tVoice: MusicalNote[] = [];\n    \n    for (const note of sequence) {\n      if (note.pitch === undefined) {\n        // Rest note\n        tVoice.push({\n          ...note,\n          pitch: undefined\n        });\n        continue;\n      }\n      \n      const mPitch = note.pitch;\n      const differences = this.tChord.map(t => t - mPitch);\n      const sortedDifferences = differences\n        .map((diff, index) => ({ index, value: diff }))\n        .sort((a, b) => Math.abs(a.value) - Math.abs(b.value));\n      \n      let effectiveRank = this.rank;\n      let tVoicePitch: number;\n      \n      if (this.currentDirection === 'up' || this.currentDirection === 'down') {\n        const filteredDifferences = sortedDifferences.filter(({ value }) =>\n          this.currentDirection === 'up' ? value >= 0 : value <= 0\n        );\n        \n        if (filteredDifferences.length === 0) {\n          // No notes in desired direction, use extreme note\n          tVoicePitch = this.currentDirection === 'up' \n            ? Math.max(...this.tChord) \n            : Math.min(...this.tChord);\n        } else {\n          if (effectiveRank >= filteredDifferences.length) {\n            effectiveRank = filteredDifferences.length - 1;\n          }\n          const chosenIndex = filteredDifferences[effectiveRank].index;\n          tVoicePitch = this.tChord[chosenIndex];\n        }\n      } else { // 'any'\n        if (effectiveRank >= sortedDifferences.length) {\n          effectiveRank = sortedDifferences.length - 1;\n        }\n        const chosenIndex = sortedDifferences[effectiveRank].index;\n        tVoicePitch = this.tChord[chosenIndex];\n      }\n      \n      // Change direction if alternate\n      if (this.isAlternate) {\n        this.currentDirection = this.currentDirection === 'up' ? 'down' : 'up';\n      }\n      \n      tVoice.push({\n        ...note,\n        pitch: tVoicePitch\n      });\n    }\n    \n    return tVoice;\n  }\n}","import { MusicalNote } from '../types/music';\n\n/**\n * Musical utility functions matching the Python djalgo utils module\n */\nexport class MusicUtils {\n\n  /**\n   * Check input type of a sequence\n   */\n  public static checkInput(sequence: any): 'list of tuples' | 'list' | 'unknown' {\n    if (!Array.isArray(sequence)) return 'unknown';\n    if (sequence.length === 0) return 'list';\n    \n    const firstItem = sequence[0];\n    if (Array.isArray(firstItem) || (typeof firstItem === 'object' && 'pitch' in firstItem)) {\n      return 'list of tuples';\n    }\n    \n    return 'list';\n  }\n\n  /**\n   * Fill gaps with rests in a musical sequence\n   */\n  public static fillGapsWithRests(notes: MusicalNote[], tolerance: number = 0.01): MusicalNote[] {\n    if (notes.length === 0) return [];\n    \n    // Sort notes by offset\n    const sortedNotes = [...notes].sort((a, b) => a.offset - b.offset);\n    const result: MusicalNote[] = [];\n    \n    let currentTime = 0;\n    \n    for (const note of sortedNotes) {\n      // Check if there's a gap before this note\n      if (note.offset > currentTime + tolerance) {\n        // Add a rest to fill the gap\n        result.push({\n          pitch: undefined, // Rest\n          duration: note.offset - currentTime,\n          offset: currentTime,\n          velocity: 0\n        });\n      }\n      \n      result.push(note);\n      currentTime = Math.max(currentTime, note.offset + note.duration);\n    }\n    \n    return result;\n  }\n\n  /**\n   * Set offsets according to durations (sequential timing)\n   */\n  public static setOffsetsAccordingToDurations(notes: MusicalNote[]): MusicalNote[] {\n    let currentOffset = 0;\n    \n    return notes.map(note => {\n      const newNote: MusicalNote = {\n        ...note,\n        offset: currentOffset\n      };\n      currentOffset += note.duration;\n      return newNote;\n    });\n  }\n\n  /**\n   * Convert CDE notation to MIDI (e.g., \"C4\" -> 60)\n   */\n  public static cdeToMidi(note: string): number {\n    const noteRegex = /^([A-G][#b]?)(-?\\d+)$/;\n    const match = note.match(noteRegex);\n    \n    if (!match) {\n      throw new Error(`Invalid note format: ${note}`);\n    }\n    \n    const noteName = match[1]!;\n    const octave = parseInt(match[2]!);\n    \n    const noteToSemitone: Record<string, number> = {\n      'C': 0, 'C#': 1, 'Db': 1, 'D': 2, 'D#': 3, 'Eb': 3,\n      'E': 4, 'F': 5, 'F#': 6, 'Gb': 6, 'G': 7, 'G#': 8,\n      'Ab': 8, 'A': 9, 'A#': 10, 'Bb': 10, 'B': 11\n    };\n    \n    const semitone = noteToSemitone[noteName];\n    if (semitone === undefined) {\n      throw new Error(`Unknown note name: ${noteName}`);\n    }\n    \n    return (octave + 1) * 12 + semitone;\n  }\n\n  /**\n   * Convert MIDI to CDE notation (e.g., 60 -> \"C4\")\n   */\n  public static midiToCde(midi: number): string {\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const octave = Math.floor(midi / 12) - 1;\n    const noteIndex = midi % 12;\n    \n    return noteNames[noteIndex] + octave;\n  }\n\n  /**\n   * Get octave from MIDI note number\n   */\n  public static getOctave(midi: number): number {\n    return Math.floor(midi / 12) - 1;\n  }\n\n  /**\n   * Get degree from pitch in a scale\n   */\n  public static getDegreeFromPitch(pitch: number, scaleList: number[], tonicPitch: number): number {\n    // Convert to pitch classes\n    const pitchClass = ((pitch % 12) + 12) % 12;\n    const tonicClass = ((tonicPitch % 12) + 12) % 12;\n    \n    // Find the closest scale degree\n    let minDistance = Infinity;\n    let closestDegree = 1;\n    \n    for (let i = 0; i < scaleList.length; i++) {\n      const scaleNoteClass = ((scaleList[i]! % 12) + 12) % 12;\n      const scaleDegreeClass = ((scaleNoteClass - tonicClass + 12) % 12);\n      const distance = Math.abs(pitchClass - scaleDegreeClass);\n      \n      if (distance < minDistance) {\n        minDistance = distance;\n        closestDegree = i + 1; // Scale degrees start from 1\n      }\n    }\n    \n    // Adjust for octave\n    const octaveOffset = Math.floor((pitch - tonicPitch) / 12) * scaleList.length;\n    return closestDegree + octaveOffset;\n  }\n\n  /**\n   * Quantize timing to a grid\n   */\n  public static quantize(notes: MusicalNote[], gridDivision: number = 16): MusicalNote[] {\n    const gridSize = 1 / gridDivision;\n    \n    return notes.map(note => ({\n      ...note,\n      offset: Math.round(note.offset / gridSize) * gridSize\n    }));\n  }\n\n  /**\n   * Transpose a sequence by semitones\n   */\n  public static transpose(notes: MusicalNote[], semitones: number): MusicalNote[] {\n    return notes.map(note => ({\n      ...note,\n      pitch: note.pitch !== undefined ? note.pitch + semitones : undefined\n    }));\n  }\n\n  /**\n   * Invert a melody around a pivot point\n   */\n  public static invert(notes: MusicalNote[], pivot?: number): MusicalNote[] {\n    const pitches = notes.map(n => n.pitch).filter(p => p !== undefined) as number[];\n    if (pitches.length === 0) return notes;\n    \n    const actualPivot = pivot !== undefined ? pivot : \n      (Math.max(...pitches) + Math.min(...pitches)) / 2;\n    \n    return notes.map(note => ({\n      ...note,\n      pitch: note.pitch !== undefined ? 2 * actualPivot - note.pitch : undefined\n    }));\n  }\n\n  /**\n   * Retrograde (reverse) a sequence\n   */\n  public static retrograde(notes: MusicalNote[]): MusicalNote[] {\n    const reversed = [...notes].reverse();\n    const totalDuration = notes.reduce((sum, note) => Math.max(sum, note.offset + note.duration), 0);\n    \n    return this.setOffsetsAccordingToDurations(reversed.map(note => ({\n      ...note,\n      offset: 0 // Will be recalculated\n    })));\n  }\n\n  /**\n   * Create augmentation (stretch) or diminution (compress) of durations\n   */\n  public static augment(notes: MusicalNote[], factor: number): MusicalNote[] {\n    let currentOffset = 0;\n    \n    return notes.map(note => {\n      const newNote: MusicalNote = {\n        ...note,\n        duration: note.duration * factor,\n        offset: currentOffset\n      };\n      currentOffset += newNote.duration;\n      return newNote;\n    });\n  }\n\n  /**\n   * Remove duplicate consecutive notes\n   */\n  public static removeDuplicates(notes: MusicalNote[]): MusicalNote[] {\n    if (notes.length <= 1) return notes;\n    \n    const result: MusicalNote[] = [notes[0]!];\n    \n    for (let i = 1; i < notes.length; i++) {\n      const current = notes[i]!;\n      const previous = result[result.length - 1]!;\n      \n      if (current.pitch !== previous.pitch || \n          Math.abs(current.offset - (previous.offset + previous.duration)) > 0.01) {\n        result.push(current);\n      } else {\n        // Extend duration of previous note instead of adding duplicate\n        previous.duration += current.duration;\n      }\n    }\n    \n    return result;\n  }\n\n  /**\n   * Split long notes into smaller ones\n   */\n  public static splitLongNotes(notes: MusicalNote[], maxDuration: number): MusicalNote[] {\n    const result: MusicalNote[] = [];\n    \n    for (const note of notes) {\n      if (note.duration <= maxDuration) {\n        result.push(note);\n      } else {\n        // Split into multiple notes\n        const numSplits = Math.ceil(note.duration / maxDuration);\n        const splitDuration = note.duration / numSplits;\n        \n        for (let i = 0; i < numSplits; i++) {\n          result.push({\n            ...note,\n            duration: splitDuration,\n            offset: note.offset + i * splitDuration\n          });\n        }\n      }\n    }\n    \n    return result;\n  }\n\n  /**\n   * Calculate the total duration of a sequence\n   */\n  public static getTotalDuration(notes: MusicalNote[]): number {\n    if (notes.length === 0) return 0;\n    return Math.max(...notes.map(note => note.offset + note.duration));\n  }\n\n  /**\n   * Get pitch range (lowest and highest pitches)\n   */\n  public static getPitchRange(notes: MusicalNote[]): { min: number; max: number } | null {\n    const pitches = notes.map(n => n.pitch).filter(p => p !== undefined) as number[];\n    if (pitches.length === 0) return null;\n    \n    return {\n      min: Math.min(...pitches),\n      max: Math.max(...pitches)\n    };\n  }\n\n  /**\n   * Normalize velocities to a range\n   */\n  public static normalizeVelocities(notes: MusicalNote[], min: number = 0.1, max: number = 1.0): MusicalNote[] {\n    const velocities = notes.map(n => n.velocity || 0.8);\n    const currentMin = Math.min(...velocities);\n    const currentMax = Math.max(...velocities);\n    const range = currentMax - currentMin;\n    \n    if (range === 0) {\n      return notes.map(note => ({ ...note, velocity: (min + max) / 2 }));\n    }\n    \n    return notes.map(note => {\n      const normalizedVelocity = ((note.velocity || 0.8) - currentMin) / range;\n      return {\n        ...note,\n        velocity: min + normalizedVelocity * (max - min)\n      };\n    });\n  }\n\n  /**\n   * Create a rhythmic pattern from note onsets\n   */\n  public static extractRhythm(notes: MusicalNote[]): number[] {\n    return notes.map(note => note.offset).sort((a, b) => a - b);\n  }\n\n  /**\n   * Apply swing timing to notes\n   */\n  public static applySwing(notes: MusicalNote[], swingRatio: number = 0.67): MusicalNote[] {\n    const beatDuration = 1; // Assuming quarter note beat\n    const subdivisionDuration = beatDuration / 2;\n    \n    return notes.map(note => {\n      const beatPosition = note.offset % beatDuration;\n      const isOffBeat = Math.abs(beatPosition - subdivisionDuration) < 0.01;\n      \n      if (isOffBeat) {\n        const swingOffset = subdivisionDuration * swingRatio;\n        const beatStart = note.offset - beatPosition;\n        return {\n          ...note,\n          offset: beatStart + swingOffset\n        };\n      }\n      \n      return note;\n    });\n  }\n}","import * as Plotly from 'plotly.js';\nimport { Matrix2D } from '../../types/common';\n\nexport interface PlotOptions {\n  title?: string;\n  width?: number;\n  height?: number;\n  color?: string;\n  showAxis?: boolean;\n  colorScale?: string;\n  xTitle?: string;\n  yTitle?: string;\n  zTitle?: string;\n  style?: Record<string, any>;\n}\n\nexport interface PlotData {\n  x: number[];\n  y: number[];\n  z?: number[];\n  color?: string[];\n  size?: number[];\n  [key: string]: any;\n}\n\nexport class PlotRenderer {\n  \n  /**\n   * Create a line plot\n   */\n  public static async line(data: PlotData, options: PlotOptions = {}, elementId: string = 'plot'): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400, \n      color = 'steelblue',\n      xTitle = 'X',\n      yTitle = 'Y'\n    } = options;\n    \n    const trace: Plotly.Data = {\n      x: data.x,\n      y: data.y,\n      type: 'scatter',\n      mode: 'lines',\n      line: { color, width: 2 },\n      name: 'Line'\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      xaxis: { title: { text: xTitle } },\n      yaxis: { title: { text: yTitle } }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n\n  /**\n   * Create a scatter plot\n   */\n  public static async scatter(data: PlotData, options: PlotOptions = {}, elementId: string = 'plot'): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400, \n      color = 'steelblue',\n      xTitle = 'X',\n      yTitle = 'Y'\n    } = options;\n    \n    const trace: Plotly.Data = {\n      x: data.x,\n      y: data.y,\n      type: 'scatter',\n      mode: 'markers',\n      marker: { \n        color: data.color || color,\n        size: data.size || 8\n      },\n      name: 'Scatter'\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      xaxis: { title: { text: xTitle } },\n      yaxis: { title: { text: yTitle } }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n\n  /**\n   * Create a heatmap from 2D matrix data\n   */\n  public static async heatmap(matrix: Matrix2D, options: PlotOptions = {}, elementId: string = 'plot'): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400,\n      colorScale = 'Viridis',\n      xTitle = 'X',\n      yTitle = 'Y'\n    } = options;\n    \n    const trace: Plotly.Data = {\n      z: matrix,\n      type: 'heatmap',\n      colorscale: colorScale,\n      showscale: true\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      xaxis: { title: { text: xTitle } },\n      yaxis: { title: { text: yTitle } }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n\n  /**\n   * Create a bar chart\n   */\n  public static async bar(data: PlotData, options: PlotOptions = {}, elementId: string = 'plot'): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400, \n      color = 'steelblue',\n      xTitle = 'X',\n      yTitle = 'Y'\n    } = options;\n    \n    const trace: Plotly.Data = {\n      x: data.x.map(x => x.toString()),\n      y: data.y,\n      type: 'bar',\n      marker: { color: data.color || color },\n      name: 'Bar'\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      xaxis: { title: { text: xTitle } },\n      yaxis: { title: { text: yTitle } }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n\n  /**\n   * Create a polar/radar plot for polyloops\n   */\n  public static async radar(data: PlotData, options: PlotOptions = {}, elementId: string = 'plot'): Promise<void> {\n    const { title, width = 400, height = 400, color = 'steelblue' } = options;\n    \n    // Close the loop by adding first point at the end\n    const angles = [...data.x, data.x[0]];\n    const values = [...data.y, data.y[0]];\n    \n    const trace: Plotly.Data = {\n      r: values,\n      theta: angles,\n      type: 'scatterpolar',\n      mode: 'lines+markers',\n      fill: 'toself',\n      line: { color },\n      marker: { color, size: 8 },\n      name: 'Radar'\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      polar: {\n        radialaxis: {\n          visible: true,\n          range: [0, Math.max(...data.y) * 1.1]\n        }\n      }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n\n  /**\n   * Create a time series plot\n   */\n  public static async timeSeries(data: PlotData, options: PlotOptions = {}, elementId: string = 'plot'): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400,\n      xTitle = 'Time',\n      yTitle = 'Value'\n    } = options;\n    \n    const trace: Plotly.Data = {\n      x: data.x,\n      y: data.y,\n      type: 'scatter',\n      mode: 'lines',\n      line: { width: 2 },\n      name: 'Time Series'\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      xaxis: { title: { text: xTitle } },\n      yaxis: { title: { text: yTitle } }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n\n  /**\n   * Create a matrix visualization (for cellular automata)\n   */\n  public static async matrix(matrix: Matrix2D, options: PlotOptions = {}, elementId: string = 'plot'): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400,\n      xTitle = 'Position',\n      yTitle = 'Time Step'\n    } = options;\n    \n    // Flip matrix vertically for proper display\n    const flippedMatrix = matrix.slice().reverse();\n    \n    const trace: Plotly.Data = {\n      z: flippedMatrix,\n      type: 'heatmap',\n      colorscale: [[0, 'white'], [1, 'black']],\n      showscale: false,\n      hoverinfo: 'none'\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      xaxis: { \n        title: { text: xTitle },\n        showticklabels: false\n      },\n      yaxis: { \n        title: { text: yTitle },\n        showticklabels: false\n      }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n\n  /**\n   * Create a 3D surface plot\n   */\n  public static async surface(\n    data: { x: number[], y: number[], z: number[][] }, \n    options: PlotOptions = {}, \n    elementId: string = 'plot'\n  ): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400,\n      colorScale = 'Viridis',\n      xTitle = 'X',\n      yTitle = 'Y',\n      zTitle = 'Z'\n    } = options;\n    \n    const trace: Plotly.Data = {\n      x: data.x,\n      y: data.y,\n      z: data.z,\n      type: 'surface',\n      colorscale: colorScale\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      scene: {\n        xaxis: { title: { text: xTitle } },\n        yaxis: { title: { text: yTitle } },\n        zaxis: { title: { text: zTitle } }\n      }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n\n  /**\n   * Create multiple line plot\n   */\n  public static async multiLine(datasets: PlotData[], options: PlotOptions = {}, elementId: string = 'plot'): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400,\n      xTitle = 'X',\n      yTitle = 'Y'\n    } = options;\n    \n    const traces: Plotly.Data[] = datasets.map((data, i) => ({\n      x: data.x,\n      y: data.y,\n      type: 'scatter',\n      mode: 'lines',\n      name: `Series ${i + 1}`,\n      line: { width: 2 }\n    }));\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      xaxis: { title: { text: xTitle } },\n      yaxis: { title: { text: yTitle } }\n    };\n\n    await Plotly.newPlot(elementId, traces, layout);\n  }\n\n  /**\n   * Create histogram\n   */\n  public static async histogram(data: PlotData, options: PlotOptions = {}, elementId: string = 'plot'): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400, \n      color = 'steelblue',\n      xTitle = 'Value',\n      yTitle = 'Frequency'\n    } = options;\n    \n    const trace: Plotly.Data = {\n      x: data.x,\n      type: 'histogram',\n      marker: { color },\n      name: 'Histogram'\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      xaxis: { title: { text: xTitle } },\n      yaxis: { title: { text: yTitle } }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n\n  /**\n   * Create box plot\n   */\n  public static async boxPlot(data: PlotData[], options: PlotOptions = {}, elementId: string = 'plot'): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400,\n      yTitle = 'Value'\n    } = options;\n    \n    const traces: Plotly.Data[] = data.map((dataset, i) => ({\n      y: dataset.y,\n      type: 'box',\n      name: `Dataset ${i + 1}`\n    }));\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      yaxis: { title: { text: yTitle } }\n    };\n\n    await Plotly.newPlot(elementId, traces, layout);\n  }\n\n  /**\n   * Create a violin plot\n   */\n  public static async violin(data: PlotData[], options: PlotOptions = {}, elementId: string = 'plot'): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400,\n      yTitle = 'Value'\n    } = options;\n    \n    const traces: Plotly.Data[] = data.map((dataset, i) => ({\n      y: dataset.y,\n      type: 'violin',\n      name: `Dataset ${i + 1}`,\n      box: { visible: true },\n      meanline: { visible: true }\n    }));\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      yaxis: { title: { text: yTitle } }\n    };\n\n    await Plotly.newPlot(elementId, traces, layout);\n  }\n\n  /**\n   * Create a contour plot\n   */\n  public static async contour(\n    data: { x: number[], y: number[], z: number[][] }, \n    options: PlotOptions = {}, \n    elementId: string = 'plot'\n  ): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400,\n      colorScale = 'Viridis',\n      xTitle = 'X',\n      yTitle = 'Y'\n    } = options;\n    \n    const trace: Plotly.Data = {\n      x: data.x,\n      y: data.y,\n      z: data.z,\n      type: 'contour',\n      colorscale: colorScale,\n      showscale: true\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      xaxis: { title: { text: xTitle } },\n      yaxis: { title: { text: yTitle } }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n\n  /**\n   * Create a 3D scatter plot\n   */\n  public static async scatter3D(\n    data: { x: number[], y: number[], z: number[], color?: string[] }, \n    options: PlotOptions = {}, \n    elementId: string = 'plot'\n  ): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400,\n      color = 'steelblue',\n      xTitle = 'X',\n      yTitle = 'Y',\n      zTitle = 'Z'\n    } = options;\n    \n    const trace: Plotly.Data = {\n      x: data.x,\n      y: data.y,\n      z: data.z,\n      type: 'scatter3d',\n      mode: 'markers',\n      marker: {\n        color: data.color || color,\n        size: 4,\n        opacity: 0.8\n      },\n      name: '3D Scatter'\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      scene: {\n        xaxis: { title: { text: xTitle } },\n        yaxis: { title: { text: yTitle } },\n        zaxis: { title: { text: zTitle } }\n      }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n\n  /**\n   * Create animated plot with frames\n   */\n  public static async animate(\n    frames: Array<{ data: Plotly.Data[], layout?: Partial<Plotly.Layout> }>,\n    options: PlotOptions & { duration?: number, transition?: number } = {},\n    elementId: string = 'plot'\n  ): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400,\n      duration = 500,\n      transition = 100\n    } = options;\n\n    const initialData = frames[0]?.data || [];\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      updatemenus: [{\n        type: 'buttons',\n        showactive: false,\n        buttons: [{\n          label: 'Play',\n          method: 'animate',\n          args: [null, {\n            frame: { duration, redraw: true },\n            transition: { duration: transition },\n            fromcurrent: true\n          }]\n        }, {\n          label: 'Pause',\n          method: 'animate',\n          args: [[null], {\n            frame: { duration: 0, redraw: false },\n            mode: 'immediate',\n            transition: { duration: 0 }\n          }]\n        }]\n      }],\n      ...frames[0]?.layout\n    };\n\n    const plotlyFrames = frames.map((frame, i) => ({\n      name: i.toString(),\n      data: frame.data,\n      layout: frame.layout\n    }));\n\n    await Plotly.newPlot(elementId, initialData, layout);\n    await Plotly.addFrames(elementId, plotlyFrames);\n  }\n\n  /**\n   * Create candlestick chart\n   */\n  public static async candlestick(\n    data: { x: (string | number)[], open: number[], high: number[], low: number[], close: number[] },\n    options: PlotOptions = {},\n    elementId: string = 'plot'\n  ): Promise<void> {\n    const { \n      title, \n      width = 640, \n      height = 400,\n      xTitle = 'Time',\n      yTitle = 'Price'\n    } = options;\n    \n    const trace: Plotly.Data = {\n      x: data.x,\n      open: data.open,\n      high: data.high,\n      low: data.low,\n      close: data.close,\n      type: 'candlestick',\n      name: 'OHLC'\n    };\n\n    const layout: Partial<Plotly.Layout> = {\n      title: title ? { text: title } : undefined,\n      width,\n      height,\n      xaxis: { title: { text: xTitle } },\n      yaxis: { title: { text: yTitle } }\n    };\n\n    await Plotly.newPlot(elementId, [trace], layout);\n  }\n}","import { PlotRenderer, PlotOptions } from '../plots/PlotRenderer';\nimport { Matrix2D } from '../../types/common';\n\nexport interface CAVisualizationOptions extends PlotOptions {\n  colorScheme?: 'binary' | 'viridis' | 'plasma' | 'greys';\n  cellSize?: number;\n  showGrid?: boolean;\n  animate?: boolean;\n}\n\nexport class CAVisualizer {\n  \n  /**\n   * Visualize cellular automata evolution over time\n   */\n  public static plotEvolution(\n    history: Matrix2D, \n    options: CAVisualizationOptions = {}\n  ): ReturnType<typeof PlotRenderer.matrix> {\n    const { \n      title = 'Cellular Automata Evolution',\n      width = 600,\n      height = 400,\n      colorScheme = 'binary',\n      showAxis = false\n    } = options;\n\n    // Convert to plot data format\n    const plotData: Array<{x: number, y: number, value: number}> = [];\n    \n    history.forEach((row, timeStep) => {\n      row.forEach((cell, position) => {\n        plotData.push({ \n          x: position, \n          y: history.length - 1 - timeStep, // Flip Y to show time progression downward\n          value: cell \n        });\n      });\n    });\n\n    return PlotRenderer.matrix(history, {\n      title,\n      width,\n      height,\n      showAxis\n    });\n  }\n\n  /**\n   * Visualize a single CA generation\n   */\n  public static plotGeneration(\n    generation: number[], \n    options: CAVisualizationOptions = {}\n  ): ReturnType<typeof PlotRenderer.scatter> {\n    const { \n      title = 'CA Generation',\n      width = 600,\n      height = 100,\n      // colorScheme = 'binary' // supprimé car inutilisé\n    } = options;\n\n    const plotData = {\n      x: generation.map((_, i) => i),\n      y: generation.map(() => 0),\n      color: generation.map(cell => cell ? 'black' : 'white')\n    };\n\n    return PlotRenderer.scatter(plotData, {\n      title,\n      width,\n      height,\n      showAxis: false\n    });\n  }\n\n  /**\n   * Compare multiple CA rules side by side\n   */\n  public static compareRules(\n    rules: Array<{ ruleNumber: number; history: Matrix2D }>,\n    options: CAVisualizationOptions = {}\n  ): Array<ReturnType<typeof PlotRenderer.matrix>> {\n    const { \n      width = 300,\n      height = 200,\n      colorScheme = 'binary'\n    } = options;\n\n    return rules.map(({ ruleNumber, history }) => \n      this.plotEvolution(history, {\n        title: `Rule ${ruleNumber}`,\n        width,\n        height,\n        colorScheme,\n        showAxis: false\n      })\n    );\n  }\n\n  /**\n   * Create an animated visualization data structure\n   */\n  public static createAnimationData(history: Matrix2D): Array<{\n    frame: number;\n    data: Array<{x: number, y: number, value: number}>;\n  }> {\n    return history.map((generation, frame) => ({\n      frame,\n      data: generation.map((cell, x) => ({\n        x,\n        y: 0,\n        value: cell\n      }))\n    }));\n  }\n\n  /**\n   * Extract specific patterns from CA history\n   */\n  public static extractPatterns(history: Matrix2D): {\n    oscillators: Array<{position: number, period: number}>;\n    gliders: Array<{startPosition: number, direction: number}>;\n    stillLifes: Array<{position: number, width: number}>;\n  } {\n    const oscillators: Array<{position: number, period: number}> = [];\n    const gliders: Array<{startPosition: number, direction: number}> = [];\n    const stillLifes: Array<{position: number, width: number}> = [];\n\n    // Simple pattern detection (can be enhanced)\n    const width = history[0]?.length || 0;\n    \n    // Check for oscillators (patterns that repeat)\n    for (let pos = 0; pos < width; pos++) {\n      const column = history.map(row => row[pos]);\n      const period = this.findPeriod(column.filter((v): v is number => v !== undefined));\n      if (period > 1 && period < 10) {\n        oscillators.push({ position: pos, period });\n      }\n    }\n\n    // Check for still lifes (unchanging patterns)\n    if (history.length > 5) {\n      const lastGen = history[history.length - 1];\n      const prevGen = history[history.length - 2];\n      \n      if (lastGen && prevGen) {\n        for (let pos = 0; pos < width - 3; pos++) {\n          const isStable = lastGen.slice(pos, pos + 3).every((cell, i) => \n            cell === prevGen[pos + i] && cell === 1\n          );\n          if (isStable) {\n            stillLifes.push({ position: pos, width: 3 });\n          }\n        }\n      }\n    }\n\n    return { oscillators, gliders, stillLifes };\n  }\n\n  /**\n   * Find the period of a repeating sequence\n   */\n  private static findPeriod(sequence: number[]): number {\n    if (sequence.length < 4) return 1;\n    \n    for (let period = 1; period <= Math.floor(sequence.length / 2); period++) {\n      let isRepeating = true;\n      for (let i = period; i < sequence.length; i++) {\n        if (sequence[i] !== sequence[i - period]) {\n          isRepeating = false;\n          break;\n        }\n      }\n      if (isRepeating) return period;\n    }\n    return 1;\n  }\n\n  /**\n   * Create a density plot showing CA activity over time\n   */\n  public static plotDensity(history: Matrix2D, options: CAVisualizationOptions = {}): ReturnType<typeof PlotRenderer.line> {\n    const { \n      title = 'CA Density Over Time',\n      width = 600,\n      height = 300\n    } = options;\n\n    const densityData = history.map((generation, time) => ({\n      time,\n      density: generation.reduce((sum, cell) => sum + cell, 0) / generation.length\n    }));\n\n    const plotData = {\n      x: densityData.map(d => d.time),\n      y: densityData.map(d => d.density)\n    };\n\n    return PlotRenderer.line(plotData, {\n      title,\n      width,\n      height,\n      color: 'steelblue',\n      showAxis: true\n    });\n  }\n\n  /**\n   * Create a spacetime diagram with enhanced visualization\n   */\n  public static plotSpacetime(\n    history: Matrix2D, \n    options: CAVisualizationOptions = {}\n  ): ReturnType<typeof PlotRenderer.matrix> {\n    const { \n      title = 'Spacetime Diagram',\n      width = 600,\n      height = 400,\n      showGrid = false\n    } = options;\n\n    // Enhanced visualization with cell borders and colors\n    const plotData: Array<{x: number, y: number, value: number, border: boolean}> = [];\n    \n    history.forEach((row, timeStep) => {\n      row.forEach((cell, position) => {\n        plotData.push({ \n          x: position, \n          y: history.length - 1 - timeStep,\n          value: cell,\n          border: showGrid\n        });\n      });\n    });\n\n    return PlotRenderer.matrix(history, {\n      title,\n      width,\n      height,\n      showAxis: false\n    });\n  }\n}","import * as Plotly from 'plotly.js';\nimport { PolyloopLayer, PolyloopPoint } from '../../types/polyloop';\n\nexport class PolyloopVisualizer {\n  /**\n   * Create a polar radar chart visualization of polyloops using Plotly.js\n   * Mirrors the functionality of the Python implementation\n   */\n  public static plotPolyloop(\n    layers: PolyloopLayer[],\n    options: {\n      pulse?: number;\n      colors?: string[];\n      measureLength?: number;\n      container?: string | HTMLElement;\n      title?: string;\n    } = {}\n  ): Promise<any> {\n    const {\n      pulse = 1/4,\n      colors,\n      measureLength = 4,\n      container = 'polyloop-plot',\n      title = 'Polyloop Visualization'\n    } = options;\n\n    // Generate colors if not provided\n    const layerColors = colors || this.generateColors(layers.length);\n    \n    const traces: any[] = [];\n    const layerNames = layers.map(layer => layer.label);\n\n    // Create traces for each layer\n    layers.forEach((layer, layerIndex) => {\n      const activePoints = layer.points.filter(point => point.active);\n      \n      if (activePoints.length === 0) return;\n\n      // Create duration arcs for each active point\n      activePoints.forEach(point => {\n        const startTheta = point.angle;\n        const duration = this.calculateDuration(point, layer, measureLength);\n        const durationTheta = duration * 360 / measureLength;\n        \n        // Generate arc points\n        const arcPoints = this.generateArcPoints(startTheta, durationTheta, 100);\n        const radius = Array(100).fill(layers.length - layerIndex - 1);\n\n        // Duration arc trace\n        traces.push({\n          type: 'scatterpolar',\n          r: radius,\n          theta: arcPoints,\n          mode: 'lines',\n          line: {\n            color: 'rgba(60, 60, 60, 0.65)',\n            width: 8\n          },\n          name: `${layer.label} Duration`,\n          showlegend: false\n        });\n\n        // Start and end markers\n        [startTheta, (startTheta + durationTheta) % 360].forEach(theta => {\n          traces.push({\n            type: 'scatterpolar',\n            r: [layers.length - layerIndex - 0.9, layers.length - layerIndex - 1.1],\n            theta: [theta, theta],\n            mode: 'lines',\n            line: {\n              color: 'Black',\n              width: 3\n            },\n            name: `${layer.label} Start/End`,\n            showlegend: false\n          });\n        });\n      });\n\n      // Main layer shape\n      if (activePoints.length > 0) {\n        const startThetas = activePoints.map(point => point.angle);\n        startThetas.push(startThetas[0]); // Close the loop\n\n        traces.push({\n          type: 'scatterpolar',\n          r: Array(startThetas.length).fill(layers.length - layerIndex - 1),\n          theta: startThetas,\n          mode: 'lines',\n          line: {\n            color: 'rgba(0, 0, 0, 0.65)',\n            width: 1\n          },\n          fill: 'toself',\n          fillcolor: layerColors[layerIndex % layerColors.length],\n          name: layer.label,\n          showlegend: true\n        });\n      }\n    });\n\n    // Reverse traces to match Python implementation layering\n    const finalTraces = [...traces].reverse();\n\n    // Generate tick values and labels\n    const tickvals = this.generateTickValues(measureLength, pulse);\n    const ticktext = this.generateTickLabels(measureLength, pulse);\n    const radialTickvals = Array.from({length: layers.length}, (_, i) => i);\n\n    const layout = {\n      title: { text: title },\n      polar: {\n        radialaxis: {\n          visible: true,\n          range: [layers.length, -0.1],\n          tickvals: radialTickvals,\n          ticktext: layerNames\n        },\n        angularaxis: {\n          tickvals: tickvals,\n          ticktext: ticktext,\n          direction: 'clockwise',\n          rotation: 90\n        }\n      },\n      template: 'none',\n      showlegend: true,\n      annotations: [{\n        x: 0.5,\n        y: 0.5,\n        text: '�',\n        showarrow: false,\n        font: {\n          size: 30,\n          color: 'White'\n        },\n        xref: 'paper',\n        yref: 'paper'\n      }]\n    } as Partial<Plotly.Layout>;\n\n    const config = {\n      responsive: true,\n      displayModeBar: true\n    };\n\n    return Plotly.newPlot(container, finalTraces, layout, config);\n  }\n\n  /**\n   * Generate equally spaced colors using HSV color space\n   */\n  private static generateColors(count: number): string[] {\n    const colors: string[] = [];\n    \n    for (let i = 0; i < count; i++) {\n      const hue = i / count;\n      const rgb = this.hsvToRgb(hue, 1, 1);\n      colors.push(`rgba(${Math.round(rgb.r * 255)}, ${Math.round(rgb.g * 255)}, ${Math.round(rgb.b * 255)}, 0.5)`);\n    }\n    \n    return colors;\n  }\n\n  /**\n   * Convert HSV to RGB color space\n   */\n  private static hsvToRgb(h: number, s: number, v: number): {r: number, g: number, b: number} {\n    let r: number, g: number, b: number;\n\n    const i = Math.floor(h * 6);\n    const f = h * 6 - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n\n    switch (i % 6) {\n      case 0: r = v; g = t; b = p; break;\n      case 1: r = q; g = v; b = p; break;\n      case 2: r = p; g = v; b = t; break;\n      case 3: r = p; g = q; b = v; break;\n      case 4: r = t; g = p; b = v; break;\n      case 5: r = v; g = p; b = q; break;\n      default: r = g = b = 0;\n    }\n\n    return { r, g, b };\n  }\n\n  /**\n   * Generate arc points for smooth curves\n   */\n  private static generateArcPoints(startTheta: number, durationTheta: number, numPoints: number): number[] {\n    const points: number[] = [];\n    const endTheta = startTheta + durationTheta;\n    \n    for (let i = 0; i < numPoints; i++) {\n      const theta = startTheta + (i / (numPoints - 1)) * durationTheta;\n      points.push(theta % 360);\n    }\n    \n    return points;\n  }\n\n  /**\n   * Calculate duration for a point (simplified for this implementation)\n   */\n  private static calculateDuration(point: PolyloopPoint, layer: PolyloopLayer, measureLength: number): number {\n    // For simplicity, assume equal duration for all points\n    // In a more sophisticated implementation, this could be derived from the point data\n    return measureLength / layer.divisions;\n  }\n\n  /**\n   * Generate tick values for angular axis\n   */\n  private static generateTickValues(measureLength: number, pulse: number): number[] {\n    const tickvals: number[] = [];\n    const numTicks = Math.floor(measureLength / pulse);\n    \n    for (let i = 0; i < numTicks; i++) {\n      tickvals.push((i * 360) / numTicks);\n    }\n    \n    return tickvals;\n  }\n\n  /**\n   * Generate tick labels for angular axis\n   */\n  private static generateTickLabels(measureLength: number, pulse: number): string[] {\n    const ticktext: string[] = [];\n    const numTicks = Math.floor(measureLength / pulse);\n    \n    for (let i = 0; i < numTicks; i++) {\n      const beat = (i * pulse) % measureLength;\n      ticktext.push(beat.toString());\n    }\n    \n    return ticktext;\n  }\n\n  /**\n   * Create a timeline visualization of the polyloop triggers\n   */\n  public static plotTimeline(\n    layers: PolyloopLayer[],\n    duration: number = 8,\n    options: {\n      container?: string | HTMLElement;\n      title?: string;\n      colors?: string[];\n    } = {}\n  ): Promise<any> {\n    const {\n      container = 'polyloop-timeline',\n      title = 'Polyloop Timeline',\n      colors\n    } = options;\n\n    const layerColors = colors || this.generateColors(layers.length);\n    const traces: any[] = [];\n\n    layers.forEach((layer, layerIndex) => {\n      const activePoints = layer.points.filter(point => point.active);\n      const times: number[] = [];\n      const pitches: number[] = [];\n\n      // Convert angles to time positions\n      activePoints.forEach(point => {\n        const time = (point.angle / 360) * 4; // Assuming 4-beat measure\n        times.push(time);\n        pitches.push(point.pitch || 60);\n      });\n\n      if (times.length > 0) {\n        traces.push({\n          type: 'scatter',\n          x: times,\n          y: pitches,\n          mode: 'markers',\n          marker: {\n            color: layerColors[layerIndex % layerColors.length],\n            size: 10\n          },\n          name: layer.label\n        });\n      }\n    });\n\n    const layout = {\n      title: { text: title },\n      xaxis: {\n        title: 'Time (beats)',\n        range: [0, duration]\n      },\n      yaxis: {\n        title: 'Pitch (MIDI)',\n        range: [20, 120]\n      },\n      showlegend: true\n    } as Partial<Plotly.Layout>;\n\n    const config = {\n      responsive: true,\n      displayModeBar: true\n    };\n\n    return Plotly.newPlot(container, traces, layout, config);\n  }\n\n  /**\n   * Create animated frames of the polyloop visualization\n   */\n  public static plotAnimated(\n    layers: PolyloopLayer[],\n    numFrames: number = 12,\n    options: {\n      container?: string | HTMLElement;\n      title?: string;\n      colors?: string[];\n      measureLength?: number;\n    } = {}\n  ): Promise<any[]> {\n    const frames: Promise<any>[] = [];\n    \n    for (let frame = 0; frame < numFrames; frame++) {\n      const rotationAngle = (frame / numFrames) * 360;\n      \n      // Create rotated layers\n      const rotatedLayers = layers.map(layer => ({\n        ...layer,\n        points: layer.points.map(point => ({\n          ...point,\n          angle: (point.angle + rotationAngle * layer.speed) % 360\n        }))\n      }));\n\n      const frameOptions = {\n        ...options,\n        container: `${options.container || 'polyloop-plot'}-frame-${frame}`,\n        title: `${options.title || 'Polyloop'} - Frame ${frame + 1}`\n      };\n\n      frames.push(this.plotPolyloop(rotatedLayers, frameOptions));\n    }\n    \n    return Promise.all(frames);\n  }\n\n  /**\n   * Convert polyloop data to format compatible with Python implementation\n   */\n  public static convertToPolyloopData(layers: PolyloopLayer[]): Record<string, Array<[number | null, number, number]>> {\n    const polyloopData: Record<string, Array<[number | null, number, number]>> = {};\n    \n    layers.forEach(layer => {\n      const notes: Array<[number | null, number, number]> = layer.points.map(point => [\n        point.active ? point.pitch || null : null,\n        4 / layer.divisions, // duration\n        point.angle / 360 * 4 // offset in beats\n      ]);\n      \n      polyloopData[layer.label] = notes;\n    });\n    \n    return polyloopData;\n  }\n}","import { PlotRenderer, PlotOptions } from '../plots/PlotRenderer';\n\nexport interface FractalVisualizationOptions extends PlotOptions {\n  colorScheme?: 'viridis' | 'plasma' | 'turbo' | 'rainbow' | 'heat';\n  iterations?: number;\n  threshold?: number;\n  zoom?: number;\n  centerX?: number;\n  centerY?: number;\n}\n\nexport interface LogisticMapData {\n  r: number;\n  x: number;\n  iteration: number;\n}\n\nexport interface MandelbrotPoint {\n  x: number;\n  y: number;\n  iterations: number;\n  escaped: boolean;\n}\n\nexport class FractalVisualizer {\n  \n  /**\n   * Visualize logistic map bifurcation diagram\n   */\n  public static plotLogisticMap(\n    rMin: number = 2.8,\n    rMax: number = 4.0,\n    rSteps: number = 1000,\n    iterations: number = 1000,\n    skipTransient: number = 500,\n    options: FractalVisualizationOptions = {}\n  ): ReturnType<typeof PlotRenderer.scatter> {\n    const { \n      title = 'Logistic Map Bifurcation',\n      width = 800,\n      height = 600,\n      colorScheme = 'viridis'\n    } = options;\n\n    const plotData: Array<{x: number, y: number, color: string}> = [];\n    \n    for (let i = 0; i < rSteps; i++) {\n      const r = rMin + (i / rSteps) * (rMax - rMin);\n      let x = 0.5; // Initial condition\n      \n      // Skip transient behavior\n      for (let j = 0; j < skipTransient; j++) {\n        x = r * x * (1 - x);\n      }\n      \n      // Collect attractors\n      const attractors = new Set<number>();\n      for (let j = 0; j < iterations; j++) {\n        x = r * x * (1 - x);\n        attractors.add(Math.round(x * 10000) / 10000); // Round for stability\n      }\n      \n      // Plot each attractor value\n      attractors.forEach(value => {\n        plotData.push({\n          x: r,\n          y: value,\n          color: this.getColorForValue(value, colorScheme)\n        });\n      });\n    }\n\n    const data = {\n      x: plotData.map(d => d.x),\n      y: plotData.map(d => d.y),\n      color: plotData.map(d => d.color)\n    };\n\n    return PlotRenderer.scatter(data, {\n      title,\n      width,\n      height,\n      showAxis: true\n    });\n  }\n\n  /**\n   * Generate Mandelbrot set visualization\n   */\n  public static plotMandelbrot(\n    xMin: number = -2.5,\n    xMax: number = 1.0,\n    yMin: number = -1.25,\n    yMax: number = 1.25,\n    resolution: number = 400,\n    maxIterations: number = 100,\n    options: FractalVisualizationOptions = {}\n  ): ReturnType<typeof PlotRenderer.heatmap> {\n    const { \n      title = 'Mandelbrot Set',\n      width = 600,\n      height = 600,\n      colorScheme = 'plasma'\n    } = options;\n\n    const matrix: number[][] = [];\n    const dx = (xMax - xMin) / resolution;\n    const dy = (yMax - yMin) / resolution;\n\n    for (let py = 0; py < resolution; py++) {\n      const row: number[] = [];\n      const y = yMin + py * dy;\n      \n      for (let px = 0; px < resolution; px++) {\n        const x = xMin + px * dx;\n        const iterations = this.mandelbrotIterations(x, y, maxIterations);\n        row.push(iterations / maxIterations);\n      }\n      matrix.push(row);\n    }\n\n    return PlotRenderer.heatmap(matrix, {\n      title,\n      width,\n      height,\n      showAxis: false\n    });\n  }\n\n  /**\n   * Create Julia set visualization\n   */\n  public static plotJuliaSet(\n    cReal: number = -0.7,\n    cImag: number = 0.27015,\n    xMin: number = -1.5,\n    xMax: number = 1.5,\n    yMin: number = -1.5,\n    yMax: number = 1.5,\n    resolution: number = 400,\n    maxIterations: number = 100,\n    options: FractalVisualizationOptions = {}\n  ): ReturnType<typeof PlotRenderer.heatmap> {\n    const { \n      title = `Julia Set (c = ${cReal} + ${cImag}i)`,\n      width = 600,\n      height = 600,\n      colorScheme = 'turbo'\n    } = options;\n\n    const matrix: number[][] = [];\n    const dx = (xMax - xMin) / resolution;\n    const dy = (yMax - yMin) / resolution;\n\n    for (let py = 0; py < resolution; py++) {\n      const row: number[] = [];\n      const y = yMin + py * dy;\n      \n      for (let px = 0; px < resolution; px++) {\n        const x = xMin + px * dx;\n        const iterations = this.juliaIterations(x, y, cReal, cImag, maxIterations);\n        row.push(iterations / maxIterations);\n      }\n      matrix.push(row);\n    }\n\n    return PlotRenderer.heatmap(matrix, {\n      title,\n      width,\n      height,\n      showAxis: false\n    });\n  }\n\n  /**\n   * Visualize strange attractors (Lorenz, Rossler, etc.)\n   */\n  public static plotAttractor(\n    type: 'lorenz' | 'rossler' | 'henon',\n    steps: number = 10000,\n    options: FractalVisualizationOptions = {}\n  ): ReturnType<typeof PlotRenderer.scatter> {\n    const { \n      title = `${type.charAt(0).toUpperCase() + type.slice(1)} Attractor`,\n      width = 600,\n      height = 600,\n      colorScheme = 'viridis'\n    } = options;\n\n    const points = this.generateAttractor(type, steps);\n    \n    const data = {\n      x: points.map(p => p.x),\n      y: points.map(p => p.y),\n      color: points.map((_, i) => this.getColorForValue(i / points.length, colorScheme))\n    };\n\n    return PlotRenderer.scatter(data, {\n      title,\n      width,\n      height,\n      showAxis: false\n    });\n  }\n\n  /**\n   * Create a chaos game visualization (Sierpinski triangle, etc.)\n   */\n  public static plotChaosGame(\n    vertices: Array<{x: number, y: number}>,\n    ratio: number = 0.5,\n    iterations: number = 10000,\n    options: FractalVisualizationOptions = {}\n  ): ReturnType<typeof PlotRenderer.scatter> {\n    const { \n      title = 'Chaos Game',\n      width = 600,\n      height = 600\n    } = options;\n\n    const points: Array<{x: number, y: number}> = [];\n    let current = { x: 0.5, y: 0.5 }; // Starting point\n\n    for (let i = 0; i < iterations; i++) {\n      const vertex = vertices[Math.floor(Math.random() * vertices.length)]!;\n      current = {\n        x: current.x + ratio * (vertex.x - current.x),\n        y: current.y + ratio * (vertex.y - current.y)\n      };\n      \n      if (i > 100) { // Skip initial transient\n        points.push({ ...current });\n      }\n    }\n\n    const data = {\n      x: points.map(p => p.x),\n      y: points.map(p => p.y),\n      color: points.map(() => 'steelblue')\n    };\n\n    return PlotRenderer.scatter(data, {\n      title,\n      width,\n      height,\n      showAxis: false\n    });\n  }\n\n  /**\n   * Plot fractal dimension analysis\n   */\n  public static plotFractalDimension(\n    data: number[],\n    options: FractalVisualizationOptions = {}\n  ): ReturnType<typeof PlotRenderer.line> {\n    const { \n      title = 'Fractal Dimension Analysis',\n      width = 600,\n      height = 400\n    } = options;\n\n    // Box-counting method\n    const scales: number[] = [];\n    const counts: number[] = [];\n    \n    for (let scale = 1; scale <= data.length / 10; scale *= 2) {\n      const boxCount = this.boxCount(data, scale);\n      scales.push(Math.log(1 / scale));\n      counts.push(Math.log(boxCount));\n    }\n\n    const plotData = {\n      x: scales,\n      y: counts\n    };\n\n    return PlotRenderer.line(plotData, {\n      title,\n      width,\n      height,\n      showAxis: true\n    });\n  }\n\n  /**\n   * Create a phase space plot for time series\n   */\n  public static plotPhaseSpace(\n    data: number[],\n    delay: number = 1,\n    embedding: number = 2,\n    options: FractalVisualizationOptions = {}\n  ): ReturnType<typeof PlotRenderer.scatter> {\n    const { \n      title = 'Phase Space Reconstruction',\n      width = 600,\n      height = 600,\n      colorScheme = 'viridis'\n    } = options;\n\n    const points: Array<{x: number, y: number, z?: number}> = [];\n    \n    for (let i = 0; i < data.length - delay * (embedding - 1); i++) {\n      if (embedding === 2) {\n        points.push({\n          x: data[i]!,\n          y: data[i + delay]!\n        });\n      } else if (embedding === 3) {\n        points.push({\n          x: data[i]!,\n          y: data[i + delay]!,\n          z: data[i + 2 * delay]!\n        });\n      }\n    }\n\n    const plotData = {\n      x: points.map(p => p.x),\n      y: points.map(p => p.y),\n      color: points.map((_, i) => this.getColorForValue(i / points.length, colorScheme))\n    };\n\n    return PlotRenderer.scatter(plotData, {\n      title,\n      width,\n      height,\n      showAxis: true\n    });\n  }\n\n  /**\n   * Helper: Calculate Mandelbrot iterations\n   */\n  private static mandelbrotIterations(x: number, y: number, maxIterations: number): number {\n    let zx = 0;\n    let zy = 0;\n    let iteration = 0;\n\n    while (zx * zx + zy * zy < 4 && iteration < maxIterations) {\n      const temp = zx * zx - zy * zy + x;\n      zy = 2 * zx * zy + y;\n      zx = temp;\n      iteration++;\n    }\n\n    return iteration;\n  }\n\n  /**\n   * Helper: Calculate Julia set iterations\n   */\n  private static juliaIterations(\n    x: number, \n    y: number, \n    cReal: number, \n    cImag: number, \n    maxIterations: number\n  ): number {\n    let zx = x;\n    let zy = y;\n    let iteration = 0;\n\n    while (zx * zx + zy * zy < 4 && iteration < maxIterations) {\n      const temp = zx * zx - zy * zy + cReal;\n      zy = 2 * zx * zy + cImag;\n      zx = temp;\n      iteration++;\n    }\n\n    return iteration;\n  }\n\n  /**\n   * Helper: Generate strange attractor points\n   */\n  private static generateAttractor(\n    type: 'lorenz' | 'rossler' | 'henon',\n    steps: number\n  ): Array<{x: number, y: number, z?: number}> {\n    const points: Array<{x: number, y: number, z?: number}> = [];\n    \n    if (type === 'lorenz') {\n      let x = 1, y = 1, z = 1;\n      const sigma = 10, rho = 28, beta = 8/3;\n      const dt = 0.01;\n      \n      for (let i = 0; i < steps; i++) {\n        const dx = sigma * (y - x);\n        const dy = x * (rho - z) - y;\n        const dz = x * y - beta * z;\n        \n        x += dx * dt;\n        y += dy * dt;\n        z += dz * dt;\n        \n        points.push({ x, y, z });\n      }\n    } else if (type === 'rossler') {\n      let x = 1, y = 1, z = 1;\n      const a = 0.2, b = 0.2, c = 5.7;\n      const dt = 0.01;\n      \n      for (let i = 0; i < steps; i++) {\n        const dx = -y - z;\n        const dy = x + a * y;\n        const dz = b + z * (x - c);\n        \n        x += dx * dt;\n        y += dy * dt;\n        z += dz * dt;\n        \n        points.push({ x, y, z });\n      }\n    } else if (type === 'henon') {\n      let x = 0, y = 0;\n      const a = 1.4, b = 0.3;\n      \n      for (let i = 0; i < steps; i++) {\n        const newX = 1 - a * x * x + y;\n        const newY = b * x;\n        \n        x = newX;\n        y = newY;\n        \n        points.push({ x, y });\n      }\n    }\n    \n    return points;\n  }\n\n  /**\n   * Helper: Box counting for fractal dimension\n   */\n  private static boxCount(data: number[], scale: number): number {\n    const boxes = new Set<string>();\n    \n    for (let i = 0; i < data.length; i++) {\n      const box = Math.floor(data[i]! / scale);\n      boxes.add(box.toString());\n    }\n    \n    return boxes.size;\n  }\n\n  /**\n   * Helper: Get color for value based on color scheme\n   */\n  private static getColorForValue(value: number, scheme: string): string {\n    const normalized = Math.max(0, Math.min(1, value));\n    \n    switch (scheme) {\n      case 'viridis':\n        return `hsl(${240 + normalized * 120}, 60%, ${30 + normalized * 40}%)`;\n      case 'plasma':\n        return `hsl(${300 - normalized * 60}, 80%, ${20 + normalized * 60}%)`;\n      case 'turbo':\n        return `hsl(${normalized * 360}, 70%, 50%)`;\n      case 'heat':\n        return `hsl(${(1 - normalized) * 60}, 100%, 50%)`;\n      default:\n        return `hsl(${normalized * 240}, 70%, 50%)`;\n    }\n  }\n\n  /**\n   * Create musical fractal sequences from logistic map\n   */\n  public static generateMusicalSequence(\n    r: number,\n    length: number,\n    initialValue: number = 0.5\n  ): number[] {\n    const sequence: number[] = [];\n    let x = initialValue;\n    \n    for (let i = 0; i < length; i++) {\n      x = r * x * (1 - x);\n      sequence.push(x);\n    }\n    \n    return sequence;\n  }\n\n  /**\n   * Create rhythm patterns from cellular automata\n   */\n  public static rhythmFromCA(\n    rule: number,\n    width: number,\n    generations: number,\n    initialPattern?: number[]\n  ): number[][] {\n    const pattern = initialPattern || Array(width).fill(0).map(() => Math.random() > 0.5 ? 1 : 0);\n    const history: number[][] = [pattern];\n    \n    for (let gen = 0; gen < generations - 1; gen++) {\n      const current = history[history.length - 1];\n      const next: number[] = [];\n      \n      for (let i = 0; i < width; i++) {\n        const left = current![(i - 1 + width) % width]!;\n        const center = current![i]!;\n        const right = current![(i + 1) % width]!;\n        const index = (left << 2) | (center << 1) | right;\n        next.push((rule >> index) & 1);\n      }\n      \n      history.push(next);\n    }\n    \n    return history;\n  }\n}"],"names":["Plotly"],"mappings":"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"}