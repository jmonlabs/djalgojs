# %% [markdown]
# # 5. Conclusion and Next Steps
# 
# Throughout this user guide, we've explored the various features of djalgojs for algorithmic music composition and visualization. We've covered:
# 
# 1. **Introduction to djalgojs**: Basic concepts and features of the library
# 2. **Scales and Music Theory**: Working with scales, chord progressions, and melodies
# 3. **Loops**: Creating and visualizing polyloops for complex rhythmic patterns
# 4. **Algorithmic Composition**: Using various algorithms to generate musical patterns
# 
# Now, let's bring everything together and explore some next steps for using djalgojs in your own projects.

# %% [esm]
// First, import Plotly.js (required for visualization)
import Plotly from "https://cdn.plot.ly/plotly-2.24.1.min.js";
window.Plotly = Plotly;  // Make it available globally

// Then import djalgojs
import { dj, viz } from "https://cdn.jsdelivr.net/gh/jmonlabs/djalgojs@main/dist/djalgojs.min.js";

// Make them available globally for the demo
globalThis.dj = dj;
globalThis.viz = viz;

# %% [markdown]
# ## Combining Techniques
# 
# One of the most powerful aspects of djalgojs is the ability to combine different techniques to create complex and interesting musical compositions. Let's create a simple example that combines scales, chord progressions, polyloops, and algorithmic generation.

# %% [javascript]
// Create a scale and chord progression
const scale = new dj.Scale('C', 'major');
const progression = new dj.Progression('C', 'major');
const chords = progression.generate({ length: 4, voicing: 'triad' });

// Create a polyloop for the bass line
const bassLine = [];
for (let i = 0; i < 4; i++) {
  bassLine.push({
    pitch: scale.getDegree(1, 3), // Root note in octave 3
    duration: 1.0,
    offset: i
  });
}

// Create a polyloop for the melody using a logistic map
const logisticMap = new dj.LogisticMap({ r: 3.9, iterations: 16 });
const sequence = logisticMap.generate();

// Map to pitches in the scale
const melodyPitches = sequence.map(value => {
  const scaleDegrees = scale.getScaleDegrees(4);
  const index = Math.floor(value * scaleDegrees.length);
  return scaleDegrees[index % scaleDegrees.length];
});

// Create a melody with varying durations
const melody = [];
let offset = 0;
for (let i = 0; i < melodyPitches.length; i++) {
  const duration = 0.25 + Math.floor(sequence[i] * 3) * 0.25; // 0.25, 0.5, 0.75, or 1.0
  melody.push({
    pitch: melodyPitches[i],
    duration: duration,
    offset: offset
  });
  offset += duration;
}

// Display the bass line and melody
[bassLine, melody]

# %% [javascript]
// Visualize the combined composition
const bassX = bassLine.map(note => note.offset);
const bassY = bassLine.map(note => note.pitch);
const melodyX = melody.map(note => note.offset);
const melodyY = melody.map(note => note.pitch);

// Create a container for our visualization
const compositionContainer = document.createElement('div');
compositionContainer.id = 'composition-viz';
compositionContainer.style.width = '600px';
compositionContainer.style.height = '400px';
element.appendChild(compositionContainer);

// Create a scatter plot with multiple traces
const compositionData = [
  {
    x: bassX,
    y: bassY,
    mode: 'markers',
    type: 'scatter',
    name: 'Bass Line',
    marker: {
      size: bassLine.map(note => note.duration * 10),
      color: 'rgba(0, 0, 255, 0.7)'
    }
  },
  {
    x: melodyX,
    y: melodyY,
    mode: 'markers',
    type: 'scatter',
    name: 'Melody',
    marker: {
      size: melody.map(note => note.duration * 10),
      color: 'rgba(255, 0, 0, 0.7)'
    }
  }
];

const compositionLayout = {
  title: 'Combined Composition',
  xaxis: {
    title: 'Time (offset)'
  },
  yaxis: {
    title: 'Pitch (MIDI)'
  }
};

Plotly.newPlot('composition-viz', compositionData, compositionLayout);

# %% [markdown]
# ## Next Steps
# 
# Now that you've explored the basics of djalgojs, here are some next steps to consider:
# 
# ### 1. Create Your Own Compositions
# 
# Use the techniques you've learned to create your own algorithmic compositions. Experiment with different scales, chord progressions, rhythmic patterns, and algorithms to find interesting combinations.
# 
# ### 2. Integrate with Web Audio API
# 
# djalgojs is designed to work well with the Web Audio API, which allows you to play sounds directly in the browser. You can use the patterns generated by djalgojs to control oscillators, filters, and other audio components.
# 
# ### 3. Explore Advanced Features
# 
# djalgojs includes many advanced features that we haven't covered in this user guide, such as:
# 
# - Genetic algorithms for evolving musical patterns
# - Tintinnabuli techniques inspired by Arvo PÃ¤rt
# - Minimalism processes for creating evolving patterns
# - Advanced rhythm generation with cellular automata
# 
# ### 4. Contribute to djalgojs
# 
# djalgojs is an open-source project, and contributions are welcome! If you have ideas for new features, improvements to existing features, or bug fixes, consider contributing to the project on GitHub.

# %% [javascript]
// Let's create a simple example of using djalgojs with Web Audio API
function playMelody(notes, audioContext) {
  // Create an oscillator and gain node
  const oscillator = audioContext.createOscillator();
  const gainNode = audioContext.createGain();
  
  // Connect the nodes
  oscillator.connect(gainNode);
  gainNode.connect(audioContext.destination);
  
  // Set the oscillator type
  oscillator.type = 'sine';
  
  // Schedule the notes
  let startTime = audioContext.currentTime;
  
  notes.forEach(note => {
    // Set the frequency
    const frequency = 440 * Math.pow(2, (note.pitch - 69) / 12); // Convert MIDI to frequency
    oscillator.frequency.setValueAtTime(frequency, startTime + note.offset);
    
    // Set the volume
    gainNode.gain.setValueAtTime(note.velocity || 0.8, startTime + note.offset);
    gainNode.gain.setValueAtTime(0, startTime + note.offset + note.duration);
  });
  
  // Start and stop the oscillator
  oscillator.start(startTime);
  oscillator.stop(startTime + notes[notes.length - 1].offset + notes[notes.length - 1].duration);
}

// Create a button to play the melody
const playButton = document.createElement('button');
playButton.textContent = 'Play Melody';
playButton.style.padding = '10px';
playButton.style.margin = '10px';
playButton.style.backgroundColor = '#4CAF50';
playButton.style.color = 'white';
playButton.style.border = 'none';
playButton.style.borderRadius = '5px';
playButton.style.cursor = 'pointer';

playButton.addEventListener('click', () => {
  const audioContext = new (window.AudioContext || window.webkitAudioContext)();
  playMelody(melody, audioContext);
});

element.appendChild(playButton);

# %% [markdown]
# ## Conclusion
# 
# djalgojs provides a powerful set of tools for algorithmic music composition and visualization. By combining music theory concepts, rhythmic patterns, and various algorithms, you can create complex and interesting musical compositions directly in the browser.
# 
# We hope this user guide has given you a good introduction to the library and inspired you to explore its capabilities further. Happy composing!