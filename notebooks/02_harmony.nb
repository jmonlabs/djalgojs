# %% [markdown]
# # 2. Harmony & Music Theory

This notebook will help you understand music theory concepts and how to apply them with djalgojs.

## 2.1 JavaScript Basics for Music

### 2.1.1 Arrays and Objects

djalgojs uses JavaScript arrays and objects to represent musical data. Unlike Python lists, JavaScript arrays are more flexible and objects provide named properties.

# %% [javascript]
// JavaScript arrays can hold mixed types
const mixedArray = [1, "hello", 10, "music"];
console.log('Mixed array:', mixedArray);

// Objects use key-value pairs
const musicalNote = {
  pitch: 60,        // MIDI note number
  duration: 1.0,    // Quarter note duration
  time: 0.0,        // Start time
  velocity: 0.8     // Note velocity (0-1)
};
console.log('Musical note object:', musicalNote);

# %% [markdown]
### 2.1.2 Music as Information

djalgojs represents music as structured data. Notes contain:
- **pitch**: MIDI note number (0-127, where 60 = C4)
- **duration**: Note length in quarter note units
- **time**: When the note starts (in quarter note units)
- **velocity**: How loud the note is (0-1)

MIDI pitches range from 0 (C-1, ~8Hz) to 127 (G9, ~12kHz). Durations and timing use quarter note units, making it easy to work with different tempos.

Let's create the "Twinkle Twinkle Little Star" melody:

# %% [javascript]
// Import djalgojs components
import { Scale, Progression, JMonConverter } from 'djalgojs';

// Twinkle Twinkle Little Star - first part
const twinkle1 = [
  { pitch: 60, duration: 1.0, time: 0.0, velocity: 0.8 }, // C (twin)
  { pitch: 60, duration: 1.0, time: 1.0, velocity: 0.8 }, // C (kle)
  { pitch: 67, duration: 1.0, time: 2.0, velocity: 0.8 }, // G (twin)
  { pitch: 67, duration: 1.0, time: 3.0, velocity: 0.8 }, // G (kle)
  { pitch: 69, duration: 1.0, time: 4.0, velocity: 0.8 }, // A (lit)
  { pitch: 69, duration: 1.0, time: 5.0, velocity: 0.8 }, // A (tle)
  { pitch: 67, duration: 2.0, time: 6.0, velocity: 0.8 }, // G (star)
];

// Second part
const twinkle2 = [
  { pitch: 65, duration: 1.0, time: 8.0, velocity: 0.8 },  // F (how)
  { pitch: 65, duration: 1.0, time: 9.0, velocity: 0.8 },  // F (I)
  { pitch: 64, duration: 1.0, time: 10.0, velocity: 0.8 }, // E (won)
  { pitch: 64, duration: 1.0, time: 11.0, velocity: 0.8 }, // E (der)
  { pitch: 62, duration: 1.0, time: 12.0, velocity: 0.8 }, // D (what)
  { pitch: 62, duration: 1.0, time: 13.0, velocity: 0.8 }, // D (you)
  { pitch: 60, duration: 2.0, time: 14.0, velocity: 0.8 }, // C (are)
];

console.log('Twinkle part 1:', twinkle1);
console.log('Twinkle part 2:', twinkle2);

# %% [markdown]
To combine sequences horizontally (in time), we can concatenate arrays:

# %% [javascript]
// Combine both parts horizontally
const twinkleCombined = [...twinkle1, ...twinkle2];
console.log('Combined melody:', twinkleCombined);

# %% [markdown]
To create multiple tracks (vertical stacking), we use a sequence structure:

# %% [javascript]
// Create a multi-track piece
const twinkleComposition = {
  sequences: [
    { label: 'Melody 1', notes: twinkle1 },
    { label: 'Melody 2', notes: twinkle2 }
  ]
};

console.log('Multi-track composition:', twinkleComposition);

# %% [markdown]
## 2.2 Using djalgojs for Music Composition

### 2.2.1 Scales

We haven't fully leveraged djalgojs yet. Let's explore scales - subsets of the chromatic scale designed to work harmoniously together. djalgojs can generate pitch lists for any scale.

# %% [javascript]
// Create a C major scale
const cMajorScale = new Scale('C', 'major');
const allCMajorNotes = cMajorScale.generate(); // All octaves
console.log('All C major notes:', allCMajorNotes);

// Get just one octave (C4 to C5)
const cMajorOctave = cMajorScale.generate(4, 8);
console.log('C major octave (C4-C5):', cMajorOctave);

# %% [markdown]
Scales are defined by intervals from the chromatic scale. A major scale follows the pattern: whole-whole-half-whole-whole-whole-half steps.

# %% [javascript]
// djalgojs provides scale interval patterns
import { MusicTheoryConstants } from 'djalgojs';

console.log('Available scale modes:', Object.keys(MusicTheoryConstants.scaleIntervals));
console.log('Major scale intervals:', MusicTheoryConstants.scaleIntervals.major);
console.log('Minor scale intervals:', MusicTheoryConstants.scaleIntervals.minor);

# %% [markdown]
Let's convert our scale to the djalgojs note format and create a JMON sequence:

# %% [javascript]
// Convert to JMON sequence with proper timing
const cMajorSequence = cMajorScale.toJMonSequence({
  length: 8,
  octave: 4,
  duration: '4n',  // Quarter notes
  velocity: 0.8,
  label: 'C Major Scale'
});

console.log('C Major JMON sequence:', cMajorSequence);

# %% [markdown]
### 2.2.2 Visualizing Music

While we can't render musical scores directly in starboard, we can display the JMON data structure and convert note numbers to readable names:

# %% [javascript]
// Convert MIDI numbers to note names for readability
const noteNames = cMajorOctave.map(pitch => JMonConverter.midiToNoteName(pitch));
console.log('Scale note names:', noteNames);

// Create a simple visualization of the scale
const scaleVisualization = cMajorSequence.notes.map((note, index) => ({
  step: index + 1,
  note: note.note,
  time: note.time,
  duration: note.duration
}));

console.table(scaleVisualization);

# %% [markdown]
### 2.2.3 Chords

A chord combines multiple pitches played simultaneously. In djalgojs, chords are represented as arrays of pitches within a note object:

# %% [javascript]
// Create a C major chord (C-E-G)
const cMajorChord = {
  note: [60, 64, 67], // C4, E4, G4
  time: '0:0:0',
  duration: '1n',
  velocity: 0.8
};

console.log('C major chord:', cMajorChord);

// Convert to JMON sequence
const chordSequence = {
  label: 'C Major Chord',
  notes: [cMajorChord],
  synth: {
    type: 'PolySynth',
    options: {
      oscillator: { type: 'triangle' },
      envelope: { attack: 0.02, decay: 0.1, sustain: 0.5, release: 1.0 }
    }
  }
};

console.log('Chord JMON sequence:', chordSequence);

# %% [markdown]
### 2.2.4 Chord Progressions

Let's generate chord progressions using djalgojs:

# %% [javascript]
// Create a chord progression
const progression = new Progression('C', 'major');
const progressionData = progression.generate({ 
  length: 4, 
  voicing: 'triad' 
});

console.log('Generated progression:', progressionData);

// Convert to JMON with block chords
const progressionSequence = progression.toJMonSequence({
  length: 4,
  octave: 3,
  duration: '1n',
  velocity: 0.9,
  label: 'C Major Progression',
  voicing: 'triad',
  strumPattern: false
});

console.log('Progression JMON sequence:', progressionSequence);

# %% [markdown]
### 2.2.5 Rhythms

So far, all our notes have had the same duration. Let's create varied rhythmic patterns:

# %% [javascript]
import { Rhythm } from 'djalgojs';

// Generate a random rhythm pattern
const rhythm = new Rhythm(4.0); // 4 quarter notes per measure
const randomRhythm = rhythm.random({ complexity: 0.7 });

console.log('Random rhythm pattern:', randomRhythm);

// Convert rhythm to JMON sequence with pitches
const rhythmSequence = JMonConverter.rhythmPatternToJMonSequence(
  randomRhythm,
  [60, 64, 67], // C, E, G
  'Random Rhythm Pattern'
);

console.log('Rhythm JMON sequence:', rhythmSequence);

# %% [markdown]
Let's create a chord progression with the same rhythm:

# %% [javascript]
// Generate progression with same length as rhythm
const rhythmProgression = new Progression('C', 'major');
const rhythmProgressionData = rhythmProgression.generate({ 
  length: randomRhythm.durations.length
});

// Map chord progression to rhythm pattern
const rhythmicChords = randomRhythm.durations.map((duration, index) => {
  const chordPitches = rhythmProgression.getChordPitches(
    (index % 7) + 1, // Cycle through scale degrees
    3, // Octave 3
    'triad'
  );
  
  return {
    note: chordPitches.map(pitch => JMonConverter.midiToNoteName(pitch)),
    time: JMonConverter.timeToMusicalTime(
      randomRhythm.durations.slice(0, index).reduce((sum, d) => sum + d, 0)
    ),
    duration: JMonConverter.durationToNoteValue(duration),
    velocity: randomRhythm.accents?.[index] ? 0.9 : 0.7
  };
});

const rhythmicProgressionSequence = {
  label: 'Rhythmic Chord Progression',
  notes: rhythmicChords,
  synth: {
    type: 'PolySynth',
    options: {
      oscillator: { type: 'sawtooth' },
      envelope: { attack: 0.02, decay: 0.1, sustain: 0.5, release: 0.8 }
    }
  }
};

console.log('Rhythmic progression:', rhythmicProgressionSequence);

# %% [markdown]
## 2.3 Complete Composition

Let's bring everything together with our Twinkle Twinkle melody:

# %% [javascript]
// Convert our original twinkle melody to JMON format
const twinkleJMON = {
  label: 'Twinkle Twinkle Melody',
  notes: twinkleCombined.map(note => ({
    note: JMonConverter.midiToNoteName(note.pitch),
    time: JMonConverter.timeToMusicalTime(note.time),
    duration: JMonConverter.durationToNoteValue(note.duration),
    velocity: note.velocity
  })),
  synth: {
    type: 'Synth',
    options: {
      oscillator: { type: 'triangle' },
      envelope: { attack: 0.02, decay: 0.1, sustain: 0.3, release: 0.5 }
    }
  }
};

console.log('Twinkle JMON sequence:', twinkleJMON);

# %% [javascript]
// Add harmonizing chords at specific points
const twinkleScale = new Scale('C', 'major');
const harmonicChords = [
  { // Chord at measure 1 (C major)
    note: ['C3', 'E3', 'G3'],
    time: '0:0:0',
    duration: '2n',
    velocity: 0.6
  },
  { // Chord at measure 3 (C major) 
    note: ['C3', 'E3', 'G3'],
    time: '2:0:0', 
    duration: '2n',
    velocity: 0.6
  }
];

const twinkleChordSequence = {
  label: 'Twinkle Harmony',
  notes: harmonicChords,
  synth: {
    type: 'PolySynth',
    options: {
      oscillator: { type: 'sine' },
      envelope: { attack: 0.05, decay: 0.1, sustain: 0.7, release: 1.0 }
    }
  }
};

console.log('Twinkle chord sequence:', twinkleChordSequence);

# %% [javascript]
// Create the complete composition
const twinkleComposition = JMonConverter.createComposition(
  [twinkleJMON, twinkleChordSequence],
  {
    bpm: 120,
    keySignature: 'C',
    timeSignature: '4/4',
    effects: [
      { type: 'Reverb', options: { wet: 0.2, roomSize: 0.5 } }
    ],
    metadata: {
      name: 'Twinkle Twinkle Little Star',
      author: 'Traditional / djalgojs arrangement',
      description: 'Classic melody with harmonic accompaniment'
    }
  }
);

console.log('Complete Twinkle composition:', JSON.stringify(twinkleComposition, null, 2));

# %% [markdown]
## 2.4 Advanced Harmony Features

djalgojs provides additional harmony tools for complex compositions:

# %% [javascript]
// Circle of fifths progression
const circleProgression = new Progression('C', 'major');
const circleSequence = circleProgression.computeCircle(8);

console.log('Circle of fifths progression:', circleSequence);

// Different scale modes
const scales = ['major', 'minor', 'dorian', 'mixolydian'].map(mode => {
  const scale = new Scale('D', mode);
  return {
    mode,
    notes: scale.getNoteNames().slice(0, 7), // First octave only
    pitches: scale.generate(4, 7)
  };
});

console.log('Different scale modes on D:', scales);

# %% [markdown]
## Browser Audio Integration

In a browser environment, you could play these JMON compositions using the Web Audio API or libraries like Tone.js:

```javascript
// Example of how you might play audio (not executable in this notebook)
import * as Tone from 'tone';

// Convert JMON to Tone.js playback
function playJMONSequence(sequence) {
  const synth = new Tone.PolySynth(Tone.Synth).toDestination();
  
  sequence.notes.forEach(note => {
    if (Array.isArray(note.note)) {
      // Play chord
      synth.triggerAttackRelease(note.note, note.duration, note.time);
    } else {
      // Play single note
      synth.triggerAttackRelease(note.note, note.duration, note.time);
    }
  });
}
```

# %% [markdown]
## Summary

You've learned how to:

- Create musical data structures in JavaScript
- Generate scales and chord progressions with djalgojs
- Convert musical data to JMON format
- Build complete compositions with multiple sequences
- Apply rhythm patterns and harmonic progressions

The next notebook will explore polyloops and advanced rhythmic patterns!

# %% [markdown]
---

## Navigation

**djalgojs Tutorial Series:**

1. [Getting Started](01_getting-started.nb)
2. **Harmony & Music Theory** ← *You are here*
3. [Polyloops & Rhythmic Patterns](03_loops.nb)
4. [Minimalist Techniques](04_minimalism.nb)
5. [Random Walks & Algorithms](05_walks.nb)
6. [Fractals & Chaos](06_fractals.nb)
7. [Genetic Algorithms](07_genetic.nb)
8. [Machine Learning & AI](08_ai.nb)

---
*© 2024 djalgojs - TypeScript adaptation of djalgo by Essi Parent*